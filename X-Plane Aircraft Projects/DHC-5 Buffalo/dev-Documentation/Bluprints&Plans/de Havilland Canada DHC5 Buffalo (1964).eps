%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 05874.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Onno
%%CreationDate: 9/13/2017
%%BoundingBox: 0 0 812 583
%%HiResBoundingBox: 0 0 811.2803 582.0806
%%CropBox: 0 0 811.2803 582.0806
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.3 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font ArialMT
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: ArialMT
%%DocumentNeededFonts: ArialMT
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:rights>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Copyright 2009 - 2012, Onno van Braam, EVOlution Graphics</rdf:li>
            </rdf:Alt>
         </dc:rights>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Onno van Braam</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">de Havilland Canada DHC5 Buffalo (1964)_S</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2017-09-13T18:01:20+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2017-09-13T18:01:20+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2017-09-13T18:01:20+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>184</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6X5c8lfnVZeeo9Vv/MEM&#xA;mhS3Ty6jZeq0nqKIEj5ophUKJGX4YgR6dPtNXFUtn/LH874HsV03zd6cTW2n218/qhZIhbyXTTrD&#xA;W3cOBHOoVn+Jm+1sqkKr9S/Ln87Jmlv4Nft01eW5+sGVJ5EjRZIOEkMamFhxTkyRkrWgDfaxVfYe&#xA;Q/z3ay02HWfMcV63q2k+qKlw0Y9eG/mlkaNlt1YxfVBAnpbBnqdqfEqifNXkX83ZLi9n8q39tY6n&#xA;Ld3Mx1mW+uC9xbTSNJa27WhhkgjFqPTSoqSq7U5uMVWT+TPz7ieyNr5ljmjj9Y3cctxxLGa1ijor&#xA;fVX2Sf1GSvTY4q1pXkL84otM8wabqGrxXGnX2km20q2N1IzxXhVN2m9BHAYmWr13qNttlVIflZ+Z&#xA;0n6Ue31tdItbt4zpmjxXUk0doircgr9aMSzkrJMJBxI68eiLiqZ6N+XPm2383xayixaVp4tpbcab&#xA;HqNzexRK0Uy0RZokKySTypJ6iMAFUrwLHlirGtH/ACr/ADntvL1zoUmsRx2N/Gyzcb+UyxMti0BC&#xA;stuu09wyueJFAKmrE1VVtO/LL879Ongii16OXTbVoJY42vZTKT6LC9RWeBqNcPNIFkJPA0bjsMVZ&#xA;Xc+UfP18baG/1J2vLaLy/N9dhmaGCSWxvnl1SNgi9ZYeJFUAc8dgFNFWF6P+Tn5zW13JO3maO2eS&#xA;BoYeV1c3MVurQvDLxQrE7TTsyy+qJAA3IlGYRlVXqH5a6P5l0nTLq01yT1Gja1jt25s6sYtPtorh&#xA;05ksEe5SQivU1b9rFWX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FVssiRRPLIaIilnPWgAqemKsYksIblZzczX6XV3IApiub2OOIGRYmVWi&#xA;kWFSjlqCtSKYqj/LNs9rarA080/KCCctcTSTsHlDBgHlZ34/BsCcVTrFXYq7FXYq7FUmn07zO0zt&#xA;DrMUcRYlIzZhiFPQFvVFaeNMVWDTPNnfXIf+kIf9VsVQGlDzfey6grazAgs7prZf9CBqFjRq/wB6&#xA;P58VR/6M82/9XyH/AKQR/wBVsVTDTbfU4UcX94l45IKMkPo8R4U5PXFUZirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdiqB1afhEsSjk7VkMfQssdDx9+blEp/lYqhtZjWDR1t2asaowkc&#xA;7V9KF5OR/wBkgJxVGW6ql9KiklVt4ApYliQGl6sSSfmcVReKuxV2KuxVZNPFCoMjUqaKNyxPgqip&#xA;J+WKqcd7byOIwWR2+ykiNGWpueIcLyp3piqviqR+Wf8AejXP+2nJ/wAmYsVTt5EjQvIwRF3ZmNAP&#xA;mTiqgNQtSQCXQHYPJHIi+3xMoXf54qiMVdirsVdirsVdirsVdirsVdirsVY95t842vl60MvoNe3H&#xA;xfuIyFC8V5Hm5BCbdO57DFWK6j+bGs2mhw6m/l+Qeq24gY3kKqJGhJlnRYljHqIeJ+KtOgrirJvr&#xA;3mw6S95E9pJKJXWGIQSFpAZyiJR5oQjcaCpNCfDFWmttVntrl59QvLbUXLfVxHCxhhYKAo4ojB05&#xA;gndySD18FVHTtX8222m20muQR28rKqy81R5DN3RFt5XRq0LA/Dt16bqpjaalqt2ZeMZMKPw5xxxh&#xA;vsKx+3cMAQWPVTiqJ9LVX3V5AnQrLJCjf8k4pP8AiVcVS+7kW0vQt3epaLLGDFE088pLKx5EfvIW&#xA;q3IUAU9DiqksEd3cwt9Snu4wwaSaSARgolWRQ125m/vKEAGnXx3VTBtLWa5SRbC2hiRSFEqqzBmI&#xA;qxRAVNAKD4+5xVG2OnW1kreiiqzgBuChFotaBVUAACuKtarp51CxltRcTWjSKQtxbOY5EJFAVYYq&#xA;kbeUdYjKm18zX5APxR3fpzLxoQADEtu/Wm7Mf44q59K8924/0bWra7Wo/dT25iIFRUCVWmP2elUJ&#xA;r3xVzv5+tqSejbXtSF9KOYLSv7Tc4YqgeAatcVQE3mTzTaRTahc6QVjDujShVlEUUNeZIimdgAI2&#xA;bp12r0xVC6F+ZEur2bpNpN1JLzdTwtbmIgJI6q3ELPxIMezc/tA9CCAqt1v80p9K0OK6m0q5+sTI&#xA;gj5I0Idm48qPNGkY+14nxoRirHtK/NG70zUwLu0jnh1OVPUa0nEtJ2RQz8WRCyyMRw4dDVaNTZSz&#xA;STzjcG6Z5dGvPTtoxIF9C5O7FqsQISagJ8P04oSi0/M3U9Q1W7sbbSpWWEKRE1rMWKmFpGAcsgc1&#xA;Wn2R125CrYqnFvqfnYrLbxaQAI5RGGaWFOCuFbqJJvsc/wCQ/CPHFVd7b8wmFEubGMkirszSACo5&#xA;HiII6mnT4hirb+XfNkqH1/Mf70/tw2piCjwVRMR/wVTiqvZeVJre/ivJtd1S89Kv+jzTIsJ3qOSQ&#xA;xxcqf5VcVT/FXYq7FXYq7FXYqh79btoCLY8XrvSnKlD9mpA607jbuOuKsR0S81WwtY1XTWv5mNxN&#xA;PfetK6+oSlUBEcxJbdQFLAcKFuhKqrrSX93qL3AhufTjtgotoo7hoZnrIVElWtt1ND0+nFUkjCWU&#xA;ixxXupm8RGmiZdLillAibg54pHViGuRyFKjbpilNr/UNUtNNd73VdQgiRiHuhYwK5DtRUGzDl8QV&#xA;eK1J98UIKTR7XULBbq2n1bUJSkslhPdhJY6zoB9pArqv+oQR9wxVkWmN5iEt+501LT63cCaP1pkc&#xA;IohiQ1WLluzRsdj3xVH/AKKup9769lcH/dMB9BAD1UlKO334qibPTNPs6m1t0iZvtOqjk1afab7R&#xA;6DqcVROKuxV2KuxV2KuxV2KpVrcMaaZqPrGljPBL9baoUxqYyruORUU47nceOKsb/LuPS/qd4dE1&#xA;Br8SOBNdO6t6fN5LgAL6kx5VuSd6Cta7imKp9rUEkD2E1uhENossZYQyXRUPGEX91GfUbFWG6HrF&#xA;vrUN5ZacbmWW2CWV1HcRXk4eSOSrOrzKqQK3Fqg06dNhil6NNFIJRPCAZAvF0JoHWtRv2K1NPp+Y&#xA;UMD8rW3l+LzdfNpt211qvxfWLNpFHp/Vv9HfnSWX7LPQ0TrirP7eH0kNTykdi8j0pVj9+w6D2xVU&#xA;xV2KuxV2KuxV2KuxV2KuxVC6na3V1aNDbXRtJGK1lEaS/CD8S8XBX4htiqD0jy3a6PZCy06eaG3D&#xA;M/D92xqxqSWZGY+G56Yqjfqlx/y2zfdD/wBU8Vd9UuP+W2b7of8Aqniqhe6Ol9ayWt3cSzW8oo8b&#xA;LD2NQQRHUEEVBG4O4xVI/NWq3PlTSLWSwtL3Uo/UW3j0+wjiMoRY2b90iwMpICbKxUeBrQFVBeSv&#xA;OWr+ZL2W3uNN1LSoo7ZbhLm4jCoxaaSL0uMttA6uBGGII8R+zUqsw+qXH/LbN90P/VPFXfVLj/lt&#xA;m+6H/qnirvqlx/y2zfdD/wBU8Vd9UuP+W2b7of8AqnirVjbXsBn+s3jXYkctCGREMadk+ADl8ziq&#xA;6/k1CO1drCGK4uh9iKeVoUPjV1SYj/gcVa9TUv8AfEP/ACOf/qlirvU1L/fEP/I5/wDqlirvU1L/&#xA;AHxD/wAjn/6pYqo3kF1eWk9nc2sMltcxtDNH67jkkilWFRGDuD2xVLPLPlSz8swTQaPYRQR3DK8o&#xA;NzK9WVAg3eM+FfmcVVvMnmSXy/o82rXtsj20BQOsU1XJkcIOIdEBNW+yDU9ACaDFWDflr568j3uq&#xA;SWXlfS/qV1q7TXE/qTGjPAFd+X97wb9+aLQbAn7PElV6Z6mpf74h/wCRz/8AVLFUi0rybp2la3da&#xA;3Y6fFHqV5631iY3MrBvrEomk+ExlRV1B2GKp76mpf74h/wCRz/8AVLFXepqX++If+Rz/APVLFXep&#xA;qX++If8Akc//AFSxVSmm1sSQCG0tnjaQC5Zrh1KRcTVkAhPJuVPhNPniqOxV2KuxV2KuxV2KuxV2&#xA;KuxV2KsX1aTUzbajcQ3Xom3HqI49SqKs0iMaCQR0VIq/Y+eKp5o13Nd6Xb3E/H1mWkpXZSykqxAN&#xA;aAkVpiqMxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZI45E4SKHQ0JVgCKg1Gx98VWx2ttE3KOJEalOS&#xA;qAaUApUf6o+7FVTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqx+WH61pGtAHis0M8KtSuzi&#xA;SVXHsVnGKo3y5JE2ncYieKyyGhNePqN6oQGi7IJOPTtiqZ4q7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUitlLaHcqGKKVi9V1pyEf1eH1KVBFeFa&#xA;bYq15OEq6aPWZWlnSC5KopVU5wojJQljyEkT1xVPsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVU7qb0LaWenL0kZ+NaV4itK4qlnoejpWp25bl6aGP&#xA;kNq8bWMV26YqpeWR6cKIevpvGAdzyt7iVJAT/ks4xVPMVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdiqQ+aNa17TXs10vSH1GK4cpdXKttbgUKsYlBeTlv0&#xA;oB3OKpZfa1cvYTn9IgyO7xG09JIxwMhjP75i6D4N+RYj3xVGWI1SUaiJZ5pSTKTH6CxAlUVY1PNG&#xA;5eolG26Yql1leapp916Fiy6w6Pcn6qLa4tWUzSrLJyuZWliJV23Bod/uVZtirsVdirsVSnV9eksL&#xA;lYI7OS5/dGaWRCAEQEipADN28MVRem37XkcpeL0ZYZPSkj5K9DxV+o9nGxxVF4q7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhtT/45t3/xhk/4gcVdaf70Xv8AxmH/ACZj&#xA;xVLNI/46Vx/xmvP+Jw4qnmKuxV2KuxVIryRGvdTkmYIkMUVt6hNFWOenNmr/ACdcVRWmELqeqRoa&#xA;xGSKZadAZIlDUp2PDl8ycVTPFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqoXd&#xA;y0AiCKrNK4jXm3BQSCRU0brSg264qwHWNZ8xanp9qkGpJpT39tJdfWl2iiX6tHIiq4+IkGapNDUD&#xA;YDFUX5XsbO/8oTXVxPLqEyLKq3k0k5kPFO/qFWFGrt0r0xVkieWNICsskXqcmYj4nFFJ2XZuwxVe&#xA;pe2tdUZHYvEWZHejNUW6EVqN6e/04qtHlbQvXkuGti9xKayTNJIWY99+Xt2xVStfL2jme7BgqFlA&#xA;Uc5Nh6UZ/m8Tiqv/AIa0SlPq1aeLyf8ANWKqC6HbLfyx2809rGkUbcIZWAJdnBJB5fyDFUPqrXek&#xA;qksN3dyxkj1FcRulCQu8roSh32618N8VU9MupLzT9UvZKB7iBiVHQek00I+8RVxVMrN+PmHUoaE8&#xA;obabnT4fi9RONf5h6dfkcVTTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq0yq&#xA;6lHAZWFGU7gg9QRiqQa55G0DWLN7WZHt43LsWtm9Ng0i8HK7MBVdjQb98VUtL8nS6To36H07UXjs&#xA;gjIvqRJJIeQoWZvhq3jsMVRc9lrNraTypqjNwV5aNErb0LUBYtQeA6DFUZa2yMt/byM0ivJwkZj8&#xA;TBoY67ilOvbFUrtG1y41CeIalxgV5UjVoY2ceiUXdhxB5c69MVRcWlazHJM41WvrOHI+rx7EIqeP&#xA;+Tiqr9Q1r/q6f8kI/wCuKqY0fUXnaSbVJCrKFdYo0iYhSSvxfERQk9KYqqLoUHNHmubqfgeSK9xI&#xA;FB6VIQpy/wBlXxxVAtGYpdaggWrOsEMSuxpzmUqCzHkftPUnfFUbp9f0zqddj/o9QN/91nFUzxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpNr/m7RNCntLe/lYXV+zLZwIj&#xA;M0hWnL4vsLSv7TDFVDUNcum0u4mNmFs35wi5MykDk5hDUQMacvCuKoyz1GP1L6SSN4lDvIOXE1EK&#xA;Ikn2WbowxVLE1H9EXc9zqltNaWhkuHFyVEsdJTGy19EyMNkNajFWT4q7FXYq7FWN67fR2OoThkkI&#xA;vLQheCkhpgaKSxoo4qO5xVH6DNHcyajdqwb1rkBSK7IsMYVdwOm5PuTiqa4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVK4tbW5j9O5hSeMGvCRQ4qO9GBxVK9R0DSks7qZI&#xA;WSZUeVZFkkVg4BbkCGrXlvXFVNNKsLSLVZYI2RkJNBJKAQsCMA1GFRU4qgvLGh6VHMl2ttFJc8rt&#xA;2u2RTKUa5pbnkRUfu49h2+eKsqxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxVxAIoemKpHa1bRLtannJGiIe5d7WJVAr3LHFXeVBWxhkB5LJawOG/4y&#xA;NJKFam3ILItR74qnmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxVIoEDaLfo1Q8AAqpKkSQQxioIIOzx4q35QtVt9OkVYxGrSKVRacQqwRItKf5KC&#xA;vvXFU8xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2Ksa1En9E62g+1LbyxIf8AKlnuEX8WxVNPLzM+kxyMSWkeaRq9i8zsQPYVoPbFUxxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpTfeWrO89YPP&#xA;cxx3BBkjilKLseW1BUfESevU4qmdvBDbwRwQII4YlCRoOgVRQAYqvxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjv/KyPy7/6mnSP+k+2/wCqmKu/5WP+Xn/U0aR/0n23&#xA;/VTFVa287eWLwSGxvku0QArPCryQPWo/dzqrRSUKkNwY8TscVYdpH5x3T+YLTSNd0QaTHcRK8l69&#xA;5CyRyGHmY/TPGR/3v7scR4NSmKWbaB5t8u+YGul0a9S9FmUWd4w3AGReS8XICuOu6EioI6jFCb4q&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWO3Xmye0uoVns0NtIy83jn5SpHJMsCSNEY0HHm4&#xA;rR606A0yOXJGMuEGz18rcjSac5ok/TzrzoEn3Gh+0MiyTjpV/iny99dmsvr8IntmZLgMwVY3T0qo&#xA;zGihv9ITb3p1BxVHxXlnLcTW0U8clxb8fXhV1Lx8xVeag1Wo6VxVAweZ9DnRzFdIzxXBtJIR/eLI&#xA;t0bPdPtBfXHHlSnfpiqMn1HT4ITNPdQxQqqyNK8iqoRjRWLE0oTsDiq06tpQmaE3sAmRDK8ZlTkI&#xA;woYuRWvHiQa+GKqSa/orvxF7ACXEcfKRAHZlDD06n49j29/DFVul+Y9B1WG2m0+/huEvEMtqFcB5&#xA;EUlWZUNGoCpB2xVVk1nR445ZZL63SOCT0Z3aVAqS/wC+3JPwt7HfFVz6tpSSSRvewLJFQyoZUDIG&#xA;bgOQrtV/h377Yq8P8v8A/OOV/Y6bp9vf2/la9nsbdrRpLjSp5WlX1AVkkdbmHk/AdeI+0a1xVry9&#xA;/wA44anoUrXAl8u6kVhliWC70USIwknkn3BuFqw9X01PIUQKtdsVTTyB5n1nyxoNn5fGgX3pi6u5&#xA;FkTTJoYo/rl59Y4iFJJfTij+ucRuaKhxSnnmX8r9e1vzppXmn9I21vPpc0Uy2vpyPG5hDACvJSK8&#xA;9ziqI/KP8udc8i6NfaTcXttdx/CNOuY0kBO8kjNNGSKUeWgCuagVqK0ChfF5R/N6C3aNPPsE8hUB&#xA;ZrjSISQ3qRnmRHLGPsI68f8AKrXYYq1B5V/OQQcZ/PVo01XpJHo8SijI4WqmVqlXKNsRsCO9cVaH&#xA;lP8AOJpWaTz5bCMpcoqJpEQ4mVGFu+8pq0T8W7AgUI74qqat5U/Ny6Qx2Pnu3sF9OFRIukQyyeoi&#xA;IJXPOXjSRlZqBRxr1xVSt/Kf5zpcRPP59tJo1YerGNGiQMgLFgKTEhjUCtaCnQ71VZ1pkV/Dp1tF&#xA;qNwl1fRxqtzcxp6SySAUZxHVuPI70rtiqJxV2KuxV2KuxV2KuxV2KuxV2KsP8weTm1NmC29ZpkEH&#xA;1prqVI7dAzkTRwLVHmj9UtGWXZqHkMxNFhMZmeXc7V1ujIj7+t+TcdVkjjOPGajK72F77Her+Fsw&#xA;zLaWK6n5GGp3+qz3lxBLbX8NxFawNbcmga6tYLZ3Z2kIk+G3NAEXZiK4qhdO/LOzttUurue8lkim&#xA;a7eIwS3tpcp9duVupFaeG6CkclA+GNa0Fa71VQ6flndRSBoNRto/q9/c6pZSfUmM5muLkXAW6mNx&#xA;yuEX7JHwlqIa/CMVU7n8sNRup7GW41mNv0WsUVgi200Q9OBZo4xM0V0juwjuTurJ8QDU6gqpYn5O&#xA;zz2OtaPJcWtppd3JS3dLVpJ2DaLFpxZZXuGZIg/P901TxHHlxOKskm/LfTJNav8AU6wr9ajgitIh&#xA;br/owgMTfu25d2gU7AU28MVQ2lfl9q2m31ldwatbiSyQQ1FpN+9jRZliWVWu2iqn1g/GiK3UVANM&#xA;VU7X8tb21gsY4r3T3bTIRbWjTaZzDxiOSLlcgXKmWWkn2wV6ybfvDRVTtPyf0m300WJnjnPo38D3&#xA;E1ujSyfXoo4Q8hDCrRpEP9b/ACcVf//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:89681AC59C98E7118C03BBBE75D94AF6</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:89681AC59C98E7118C03BBBE75D94AF6</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:79AE110971C1DE11AAC7AC14CF027332</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:01307524-0d38-4afa-97e2-d560b8db0993</stRef:instanceID>
            <stRef:documentID>xmp.did:B64FA89CC793E211A2B1ACE263979489</stRef:documentID>
            <stRef:originalDocumentID>uuid:79AE110971C1DE11AAC7AC14CF027332</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F6CA1011EC72DF11ABD7ADA872BA7E6D</stEvt:instanceID>
                  <stEvt:when>2010-06-08T12:55:06+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:89681AC59C98E7118C03BBBE75D94AF6</stEvt:instanceID>
                  <stEvt:when>2017-09-13T18:01:20+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:GTS_PDFXVersion>PDF/X-1:2001</pdf:GTS_PDFXVersion>
         <pdf:Trapped>False</pdf:Trapped>
         <pdf:GTS_PDFXConformance>PDF/X-1a:2001</pdf:GTS_PDFXConformance>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:GTS_PDFXConformance>PDF/X-1a:2001</pdfx:GTS_PDFXConformance>
         <pdfx:GTS_PDFXVersion>PDF/X-1:2001</pdfx:GTS_PDFXVersion>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpRights="http://ns.adobe.com/xap/1.0/rights/">
         <xmpRights:WebStatement>http://www.the-blueprints.com</xmpRights:WebStatement>
         <xmpRights:Marked>True</xmpRights:Marked>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>296.999959</stDim:w>
            <stDim:h>209.999929</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.22</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Process Cyan</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 877 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>40.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>AutoCAD Color</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 8222 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>LAB</xmpG:mode>
                           <xmpG:L>52.549004</xmpG:L>
                           <xmpG:A>-15</xmpG:A>
                           <xmpG:B>-21</xmpG:B>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -582.081 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 582.081 li
811.28 582.081 li
811.28 0 li
cp
clp
196.451 151.658 mo
196.451 148.86 198.718 146.593 201.516 146.593 cv
204.313 146.593 206.58 148.86 206.58 151.658 cv
206.58 154.456 204.313 156.723 201.516 156.723 cv
198.718 156.723 196.451 154.456 196.451 151.658 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.619837 .538445 .529625 .256565 cmyk
ef
104.707 150.648 mo
106.864 150.648 108.611 152.396 108.611 154.552 cv
108.611 156.708 106.864 158.458 104.707 158.458 cv
102.551 158.458 100.803 156.708 100.803 154.552 cv
100.803 152.396 102.551 150.648 104.707 150.648 cv
cp
ef
179.827 112.287 mo
181.098 110.936 182.312 109.748 183.148 109.208 cv
186.462 107.066 193.314 106.493 199.221 107.408 cv
201.592 107.775 203.811 108.382 205.587 109.223 cv
206.454 109.634 207.216 110.101 207.839 110.623 cv
210.019 112.45 li
234.584 112.398 li
235.125 112.397 235.626 112.384 236.127 112.357 cv
236.628 112.331 237.128 112.29 237.667 112.234 cv
252.303 110.703 272.247 108.183 290.138 106.423 cv
298.51 105.6 306.433 104.943 313.153 104.632 cv
315.219 104.528 316.931 103.319 317.659 101.381 cv
335.055 55.0596 li
335.055 54.5918 337.467 54.2124 345.714 54.2124 cv
353.96 54.2124 364.918 54.5918 364.918 55.0596 cv
364.918 55.2612 362.883 55.521 359.907 55.7505 cv
359.907 57.2466 li
363.68 58.2495 li
364.278 58.4082 364.681 58.9316 364.681 59.5508 cv
364.681 104.437 li
365.165 104.437 li
365.938 104.437 366.259 105.428 365.635 105.881 cv
359.772 110.125 351.718 113.565 341.401 116.174 cv
335.307 117.715 328.422 118.966 320.735 119.922 cv
320.389 119.965 320.057 120.014 319.732 120.068 cv
319.394 120.126 319.065 120.19 318.736 120.263 cv
298.158 124.825 268.635 134.592 247.952 142.051 cv
243.594 143.623 239.939 144.581 236.127 145.137 cv
233.322 145.547 230.431 145.739 227.114 145.798 cv
176.928 146.697 li
176.41 147.927 li
176.323 148.136 176.13 148.264 175.904 148.264 cv
172.911 148.264 li
172.661 148.264 172.45 148.105 172.383 147.865 cv
172.073 146.783 li
167.962 146.857 li
167.853 146.859 li
167.853 150.037 li
167.853 150.339 167.606 150.585 167.304 150.585 cv
166.635 150.585 li
166.332 150.585 166.085 150.339 166.085 150.037 cv
166.085 146.888 li
165.294 146.901 li
163.733 147.796 161.674 149.319 159.879 149.319 cv
157.077 149.319 li
155.088 149.319 154.258 148.349 152.973 147.105 cv
149.361 147.167 li
125.555 147.557 li
118.602 147.673 li
112.819 147.74 109.056 147.646 103.674 144.719 cv
103.503 144.627 103.371 144.497 103.281 144.341 cv
90.6704 143.366 91.0835 133.928 103.218 132.531 cv
103.262 132.418 103.329 132.314 103.417 132.218 cv
103.934 131.66 104.455 131.106 104.988 130.561 cv
106.505 129 108.11 127.494 109.942 126.068 cv
111.093 125.172 112.334 124.309 113.699 123.485 cv
113.856 123.39 113.994 123.29 114.121 123.176 cv
114.247 123.063 114.363 122.937 114.474 122.792 cv
116.086 120.685 117.485 118.714 119.184 117.2 cv
120.083 116.399 121.066 115.727 122.209 115.229 cv
123.55 114.645 125.112 114.302 127.018 114.277 cv
127.234 114.274 li
127.788 114.268 li
134.356 114.182 li
136.962 114.149 li
144.008 114.057 li
144.008 112.706 li
144.008 112.568 144.12 112.457 144.258 112.457 cv
144.443 112.457 li
144.58 112.457 144.692 112.568 144.692 112.706 cv
144.692 114.048 li
148.26 114.002 li
154.791 113.917 li
155.337 113.796 155.905 113.682 156.494 113.575 cv
156.651 113.546 156.81 113.518 156.97 113.49 cv
160.867 112.816 165.649 112.425 171.247 112.296 cv
171.303 112.294 171.359 112.293 171.415 112.292 cv
171.415 111.679 li
171.415 111.349 171.685 111.08 172.014 111.08 cv
175.954 111.08 li
176.079 111.08 176.187 111.114 176.29 111.184 cv
177.867 112.259 li
178.512 112.266 179.165 112.275 179.827 112.287 cv
cp
0 0 0 0 cmyk
ef
119.184 117.2 mo
117.485 118.714 116.086 120.685 114.474 122.792 cv
114.363 122.937 114.247 123.063 114.121 123.176 cv
115.199 123.517 116.334 123.831 117.519 124.121 cv
117.829 124.196 118.139 124.062 118.294 123.785 cv
121.078 118.836 li
121.183 118.65 121.199 118.448 121.123 118.248 cv
121.047 118.047 120.903 117.905 120.701 117.834 cv
120.147 117.64 119.639 117.43 119.184 117.2 cv
cp
.221286 .172763 .183902 0 cmyk
ef
121.859 118.742 mo
119.143 123.57 li
119.03 123.77 119.02 123.991 119.115 124.201 cv
119.21 124.41 119.382 124.548 119.607 124.596 cv
121.306 124.956 123.092 125.273 124.952 125.555 cv
125.158 125.586 125.347 125.533 125.506 125.399 cv
125.667 125.264 125.75 125.087 125.754 124.878 cv
125.857 119.664 li
125.864 119.317 125.622 119.022 125.282 118.962 cv
124.346 118.796 123.46 118.613 122.639 118.407 cv
122.328 118.329 122.016 118.463 121.859 118.742 cv
cp
ef
126.487 119.958 mo
126.385 125.141 li
126.377 125.498 126.635 125.799 126.99 125.847 cv
128.292 126.022 129.626 126.183 130.987 126.33 cv
131.411 126.376 131.792 126.253 132.108 125.969 cv
132.427 125.685 132.59 125.318 132.59 124.893 cv
132.59 121.209 li
132.59 120.466 132.034 119.849 131.295 119.771 cv
129.909 119.625 128.563 119.465 127.284 119.281 cv
127.079 119.251 126.89 119.306 126.733 119.44 cv
126.575 119.575 126.49 119.751 126.487 119.958 cv
cp
ef
127.018 114.277 mo
125.112 114.302 123.55 114.645 122.209 115.229 cv
122.63 116.257 123.917 117.148 126.339 117.86 cv
126.557 117.923 126.772 117.885 126.954 117.749 cv
127.137 117.613 127.234 117.417 127.234 117.189 cv
127.234 114.274 li
127.018 114.277 li
cp
ef
134.356 114.182 mo
127.788 114.268 li
127.788 114.982 li
127.788 115.368 128.102 115.681 128.486 115.681 cv
133.658 115.681 li
134.043 115.681 134.356 115.368 134.356 114.982 cv
134.356 114.182 li
cp
ef
133.658 116.326 mo
128.486 116.326 li
128.102 116.326 127.788 116.64 127.788 117.024 cv
127.788 117.669 li
127.788 118.004 128.018 118.286 128.345 118.353 cv
129.799 118.654 131.537 118.91 133.588 119.116 cv
134.002 119.158 134.356 118.837 134.356 118.421 cv
134.356 117.024 li
134.356 116.64 134.043 116.326 133.658 116.326 cv
cp
ef
104.707 152.463 mo
105.861 152.463 106.796 153.399 106.796 154.552 cv
106.796 155.706 105.861 156.642 104.707 156.642 cv
103.553 156.642 102.618 155.706 102.618 154.552 cv
102.618 153.399 103.553 152.463 104.707 152.463 cv
cp
ef
156.97 110.701 mo
156.97 113.49 li
157.777 113.356 li
157.777 110.701 li
157.777 110.563 157.665 110.451 157.528 110.451 cv
157.219 110.451 li
157.082 110.451 156.97 110.563 156.97 110.701 cv
cp
156.97 113.49 mo
157.235 113.444 157.504 113.4 157.777 113.356 cv
157.504 113.4 157.235 113.444 156.97 113.49 cv
156.97 113.49 li
cp
.619837 .538445 .529625 .256565 cmyk
ef
142.106 131.235 mo
141.352 131.235 140.735 131.853 140.735 132.607 cv
140.735 135.218 li
140.735 135.973 141.352 136.59 142.106 136.59 cv
142.687 136.59 li
143.442 136.59 144.058 135.973 144.058 135.218 cv
144.058 132.607 li
144.058 131.853 143.442 131.235 142.687 131.235 cv
142.106 131.235 li
cp
.221286 .172763 .183902 0 cmyk
ef
183.961 109.556 mo
183.961 110.21 li
183.961 110.43 184.14 110.61 184.361 110.61 cv
185.182 110.61 li
185.313 110.61 185.423 110.554 185.501 110.45 cv
185.988 109.8 li
185.144 109.749 184.457 109.67 183.961 109.556 cv
cp
ef
166.085 146.888 mo
166.085 150.037 li
166.085 150.339 166.332 150.585 166.635 150.585 cv
167.304 150.585 li
167.606 150.585 167.853 150.339 167.853 150.037 cv
167.853 146.859 li
166.085 146.888 li
cp
.619837 .538445 .529625 .256565 cmyk
ef
176.928 146.697 mo
172.073 146.783 li
172.383 147.865 li
172.45 148.105 172.661 148.264 172.911 148.264 cv
175.904 148.264 li
176.13 148.264 176.323 148.136 176.41 147.927 cv
176.928 146.697 li
cp
ef
211.475 131.213 mo
210.393 131.573 209.281 131.917 208.151 132.243 cv
208.151 134.019 li
208.151 134.773 208.769 135.39 209.523 135.39 cv
210.103 135.39 li
210.857 135.39 211.475 134.773 211.475 134.019 cv
211.475 131.213 li
cp
.221286 .172763 .183902 0 cmyk
ef
217.965 129.666 mo
217.21 129.666 216.593 130.283 216.593 131.037 cv
216.593 133.648 li
216.593 134.403 217.21 135.021 217.965 135.021 cv
218.544 135.021 li
219.299 135.021 219.917 134.403 219.917 133.648 cv
219.917 131.037 li
219.917 130.283 219.299 129.666 218.544 129.666 cv
217.965 129.666 li
cp
ef
200 134.291 mo
200 135.045 200.618 135.663 201.372 135.663 cv
201.952 135.663 li
202.605 135.663 203.156 135.199 203.292 134.585 cv
203.313 134.491 203.323 133.61 203.323 133.509 cv
200 134.291 li
cp
ef
191.93 135.61 mo
191.6 135.664 192.503 135.979 192.863 135.979 cv
193.442 135.979 li
193.999 135.979 194.481 135.643 194.696 135.164 cv
191.93 135.61 li
cp
ef
224.244 130.048 mo
224.157 130.048 224.086 130.119 224.086 130.207 cv
224.086 130.47 li
224.086 130.558 224.157 130.629 224.244 130.629 cv
225.695 130.629 li
227.278 130.629 li
227.365 130.629 227.437 130.558 227.437 130.47 cv
227.437 130.207 li
227.437 130.119 227.365 130.048 227.278 130.048 cv
225.695 130.048 li
224.244 130.048 li
cp
.619837 .538445 .529625 .256565 cmyk
ef
225.695 137.131 mo
224.244 137.131 li
224.157 137.131 224.086 137.203 224.086 137.29 cv
224.086 137.554 li
224.086 137.641 224.157 137.712 224.244 137.712 cv
225.695 137.712 li
227.278 137.712 li
227.365 137.712 227.437 137.641 227.437 137.554 cv
227.437 137.29 li
227.437 137.203 227.365 137.131 227.278 137.131 cv
225.695 137.131 li
cp
ef
198.561 151.658 mo
198.561 150.026 199.883 148.703 201.516 148.703 cv
203.147 148.703 204.47 150.026 204.47 151.658 cv
204.47 153.291 203.147 154.613 201.516 154.613 cv
199.883 154.613 198.561 153.291 198.561 151.658 cv
cp
.221286 .172763 .183902 0 cmyk
ef
147.574 116.474 mo
139.831 118.244 138.091 120.613 141.998 122.505 cv
143.266 123.119 145.129 123.683 147.574 124.16 cv
150.949 124.658 li
150.877 124.518 150.835 124.366 150.835 124.201 cv
150.835 120.014 li
150.835 115.827 li
149.918 115.985 149.06 116.151 148.26 116.322 cv
148.027 116.372 147.798 116.423 147.574 116.474 cv
cp
.619837 .538445 .529625 .256565 cmyk
ef
103.141 341.385 mo
116.854 333.391 140.178 331.167 175.238 331.079 cv
175.238 301.968 li
174.932 302.062 174.618 302.107 174.274 302.107 cv
172.415 302.107 li
160.033 302.107 li
158.967 302.125 157.765 302.088 156.592 301.963 cv
153.795 301.667 151.166 300.87 150.946 299.139 cv
148.003 299.139 li
147.72 299.139 147.467 299.006 147.303 298.8 cv
136.771 297.305 136.771 292.925 147.303 291.43 cv
147.467 291.224 147.72 291.092 148.003 291.092 cv
150.946 291.092 li
151.165 289.361 153.795 288.564 156.592 288.266 cv
157.765 288.141 158.967 288.105 160.033 288.124 cv
172.415 288.124 li
174.274 288.124 li
174.838 288.124 175.32 288.243 175.82 288.503 cv
176.014 285.892 li
183.324 187.663 li
183.34 187.453 183.36 187.25 183.387 187.051 cv
184.279 180.109 191.155 180.432 198.205 182.928 cv
198.772 183.13 199.341 183.345 199.908 183.572 cv
200.418 183.776 200.926 183.989 201.431 184.209 cv
202.874 184.838 204.026 185.819 204.815 187.051 cv
205.423 188.001 205.814 189.102 205.954 190.307 cv
208.378 211.171 li
209.804 223.446 li
211.553 238.5 li
217.494 289.634 li
217.645 290.926 li
223.167 291.866 li
229.294 292.909 229.685 296.713 223.578 297.809 cv
217.502 298.899 li
217.502 299.515 li
217.502 331.584 li
236.451 331.717 li
268.989 331.943 li
277.256 331.927 285.03 332.283 292.633 332.963 cv
302.057 333.806 311.219 335.147 320.74 336.895 cv
325.735 337.81 330.829 338.838 336.111 339.965 cv
340.827 296.087 li
340.854 295.834 340.907 295.59 340.983 295.358 cv
341.413 294.042 342.584 293.095 344.018 292.981 cv
349.852 292.514 355.686 293.147 361.52 293.721 cv
362.348 293.801 362.983 294.453 363.045 295.282 cv
366.915 346.85 li
366.987 347.819 368.017 348.068 368.017 348.883 cv
368.017 349.699 366.987 349.948 366.915 350.917 cv
363.045 402.485 li
362.983 403.315 362.348 403.963 361.52 404.045 cv
355.686 404.62 349.852 405.252 344.018 404.787 cv
342.583 404.671 341.413 403.724 340.983 402.409 cv
340.907 402.176 340.854 401.932 340.827 401.68 cv
336.111 357.8 li
330.829 358.927 325.735 359.955 320.74 360.872 cv
311.219 362.619 302.056 363.959 292.633 364.802 cv
285.03 365.483 277.256 365.838 268.989 365.823 cv
236.451 366.049 li
217.502 366.183 li
217.502 398.25 li
217.502 398.867 li
223.578 399.958 li
229.685 401.053 229.294 404.858 223.167 405.9 cv
217.645 406.839 li
217.494 408.131 li
211.553 459.266 li
209.804 474.32 li
208.378 486.594 li
205.954 507.459 li
205.814 508.665 205.422 509.765 204.814 510.715 cv
204.026 511.947 202.873 512.927 201.431 513.557 cv
200.927 513.777 200.418 513.991 199.909 514.194 cv
199.342 514.42 198.773 514.636 198.205 514.837 cv
191.156 517.334 184.281 517.657 183.387 510.715 cv
183.36 510.517 183.34 510.312 183.324 510.102 cv
176.014 411.875 li
175.82 409.262 li
175.32 409.524 174.838 409.643 174.274 409.643 cv
172.415 409.643 li
160.033 409.643 li
158.967 409.662 157.765 409.625 156.592 409.499 cv
153.795 409.202 151.165 408.405 150.946 406.674 cv
148.003 406.674 li
147.72 406.674 147.467 406.542 147.303 406.335 cv
136.771 404.841 136.771 400.461 147.303 398.967 cv
147.467 398.76 147.72 398.627 148.003 398.627 cv
150.946 398.627 li
151.166 396.897 153.796 396.1 156.592 395.803 cv
157.765 395.678 158.967 395.641 160.033 395.661 cv
172.415 395.661 li
174.274 395.661 li
174.618 395.661 174.932 395.704 175.238 395.797 cv
175.238 366.689 li
140.178 366.6 116.854 364.375 103.141 356.381 cv
103.045 356.325 102.954 356.264 102.869 356.2 cv
102.519 355.935 102.254 355.598 102.087 355.211 cv
88.5283 355.061 88.5283 342.707 102.087 342.555 cv
102.254 342.168 102.519 341.832 102.869 341.567 cv
102.954 341.501 103.045 341.441 103.141 341.385 cv
cp
0 0 0 0 cmyk
ef
130.565 334.084 mo
128.958 334.424 127.362 334.799 125.788 335.248 cv
125.549 335.315 125.391 335.526 125.39 335.774 cv
125.385 337.024 li
125.385 337.213 125.473 337.377 125.631 337.483 cv
125.789 337.586 125.975 337.604 126.149 337.53 cv
127.658 336.889 129.229 336.311 130.85 335.783 cv
131.079 335.708 131.228 335.502 131.228 335.26 cv
131.228 334.621 li
131.228 334.45 131.158 334.301 131.024 334.194 cv
130.892 334.086 130.733 334.048 130.565 334.084 cv
cp
.221286 .172763 .183902 0 cmyk
ef
123.688 335.897 mo
121.924 336.483 119.615 337.356 118.097 338.352 cv
117.963 338.44 117.881 338.569 117.857 338.726 cv
117.831 338.885 117.871 339.031 117.972 339.156 cv
119.234 340.725 li
119.423 340.959 119.77 340.998 120.005 340.809 cv
121.07 339.957 122.908 339.034 124.095 338.462 cv
124.289 338.37 124.405 338.186 124.406 337.969 cv
124.411 336.418 li
124.412 336.237 124.332 336.079 124.184 335.973 cv
124.036 335.866 123.862 335.838 123.688 335.897 cv
cp
ef
116.428 339.846 mo
114.697 341.934 114.132 344.819 113.908 347.5 cv
113.89 347.702 113.953 347.883 114.089 348.032 cv
114.227 348.18 114.401 348.257 114.603 348.257 cv
116.78 348.257 li
117.156 348.257 117.464 347.959 117.479 347.584 cv
117.543 345.819 117.879 343.797 118.769 342.266 cv
118.886 342.067 118.868 341.827 118.722 341.647 cv
117.278 339.852 li
117.171 339.719 117.024 339.649 116.854 339.647 cv
116.684 339.647 116.536 339.714 116.428 339.846 cv
cp
ef
130.344 337.01 mo
128.945 337.412 127.262 337.973 125.864 338.731 cv
125.681 338.829 125.751 339.106 125.959 339.106 cv
130.482 339.106 li
130.757 339.106 130.981 338.881 130.981 338.607 cv
130.981 337.489 li
130.981 337.156 130.665 336.917 130.344 337.01 cv
cp
ef
130.042 339.881 mo
127.436 339.881 li
126.982 339.881 126.611 340.252 126.611 340.706 cv
126.611 344.696 li
126.611 345.149 126.982 345.52 127.436 345.52 cv
130.042 345.52 li
130.495 345.52 130.865 345.149 130.865 344.696 cv
130.865 340.706 li
130.865 340.252 130.495 339.881 130.042 339.881 cv
cp
ef
124.208 339.61 mo
123.629 340.458 123.027 341.977 122.638 343.052 cv
122.507 343.413 122.771 343.789 123.153 343.789 cv
124.628 343.789 li
124.93 343.789 125.177 343.542 125.177 343.24 cv
125.177 340.109 li
125.177 339.567 124.694 338.899 124.208 339.61 cv
cp
ef
127.7 350.62 mo
127.246 350.62 126.875 350.991 126.875 351.444 cv
126.875 355.434 li
126.875 355.887 127.246 356.259 127.7 356.259 cv
130.305 356.259 li
130.758 356.259 131.13 355.887 131.13 355.434 cv
131.13 351.444 li
131.13 350.991 130.758 350.62 130.305 350.62 cv
127.7 350.62 li
cp
ef
124.628 353.979 mo
123.153 353.979 li
122.771 353.979 122.507 354.355 122.638 354.714 cv
123.027 355.789 123.629 357.309 124.208 358.157 cv
124.694 358.868 125.177 358.2 125.177 357.658 cv
125.177 354.528 li
125.177 354.225 124.93 353.979 124.628 353.979 cv
cp
ef
130.482 358.661 mo
125.959 358.661 li
125.751 358.661 125.681 358.938 125.864 359.036 cv
127.262 359.794 128.945 360.354 130.344 360.757 cv
130.665 360.85 130.981 360.612 130.981 360.278 cv
130.981 359.161 li
130.981 358.885 130.757 358.661 130.482 358.661 cv
cp
ef
130.85 361.985 mo
129.229 361.456 127.658 360.877 126.149 360.237 cv
125.975 360.163 125.789 360.18 125.631 360.285 cv
125.473 360.39 125.385 360.553 125.385 360.743 cv
125.39 361.993 li
125.391 362.241 125.549 362.452 125.788 362.52 cv
127.362 362.967 128.958 363.342 130.565 363.683 cv
130.733 363.719 130.892 363.68 131.024 363.573 cv
131.158 363.464 131.228 363.318 131.228 363.146 cv
131.228 362.506 li
131.228 362.265 131.079 362.059 130.85 361.985 cv
cp
ef
120.005 356.958 mo
119.77 356.768 119.423 356.807 119.234 357.042 cv
117.972 358.612 li
117.871 358.737 117.831 358.882 117.857 359.04 cv
117.881 359.199 117.963 359.327 118.097 359.414 cv
119.615 360.411 121.924 361.284 123.688 361.871 cv
123.862 361.928 124.036 361.902 124.184 361.794 cv
124.332 361.688 124.412 361.531 124.411 361.348 cv
124.406 359.797 li
124.405 359.582 124.289 359.397 124.095 359.304 cv
122.908 358.733 121.07 357.81 120.005 356.958 cv
cp
ef
114.089 349.736 mo
113.953 349.884 113.89 350.064 113.908 350.266 cv
114.132 352.948 114.697 355.833 116.428 357.921 cv
116.536 358.052 116.684 358.121 116.854 358.12 cv
117.024 358.119 117.171 358.047 117.278 357.915 cv
118.722 356.121 li
118.868 355.94 118.886 355.7 118.769 355.499 cv
117.879 353.97 117.543 351.948 117.479 350.182 cv
117.464 349.807 117.156 349.51 116.78 349.51 cv
114.603 349.51 li
114.401 349.51 114.227 349.586 114.089 349.736 cv
cp
ef
147.303 398.967 mo
136.771 400.461 136.771 404.841 147.303 406.335 cv
147.18 406.182 147.106 405.988 147.106 405.777 cv
147.106 399.526 li
147.106 399.315 147.18 399.121 147.303 398.967 cv
cp
.619837 .538445 .529625 .256565 cmyk
ef
147.303 291.43 mo
136.771 292.925 136.771 297.305 147.303 298.8 cv
147.18 298.646 147.106 298.452 147.106 298.241 cv
147.106 291.991 li
147.106 291.779 147.18 291.583 147.303 291.43 cv
cp
ef
507.126 147.833 mo
508.315 147.833 li
509.396 147.833 510.278 148.717 510.278 149.796 cv
510.278 156.494 li
510.278 157.574 509.396 158.458 508.315 158.458 cv
507.126 158.458 li
506.048 158.458 505.165 157.574 505.165 156.494 cv
505.165 149.796 li
505.165 148.717 506.048 147.833 507.126 147.833 cv
cp
ef
514.136 147.833 mo
515.325 147.833 li
516.405 147.833 517.288 148.717 517.288 149.796 cv
517.288 156.494 li
517.288 157.574 516.405 158.458 515.325 158.458 cv
514.136 158.458 li
513.058 158.458 512.173 157.574 512.173 156.494 cv
512.173 149.796 li
512.173 148.717 513.058 147.833 514.136 147.833 cv
cp
ef
620.97 147.833 mo
622.159 147.833 li
623.239 147.833 624.122 148.717 624.122 149.796 cv
624.122 156.494 li
624.122 157.574 623.239 158.458 622.159 158.458 cv
620.97 158.458 li
619.892 158.458 619.007 157.574 619.007 156.494 cv
619.007 149.796 li
619.007 148.717 619.892 147.833 620.97 147.833 cv
cp
ef
613.962 147.833 mo
615.151 147.833 li
616.229 147.833 617.112 148.717 617.112 149.796 cv
617.112 156.494 li
617.112 157.574 616.229 158.458 615.151 158.458 cv
613.962 158.458 li
612.882 158.458 611.999 157.574 611.999 156.494 cv
611.999 149.796 li
611.999 148.717 612.882 147.833 613.962 147.833 cv
cp
ef
566.921 149.813 mo
567.581 149.813 li
568.179 149.813 568.667 150.302 568.667 150.9 cv
568.667 156.506 li
568.667 157.105 568.179 157.595 567.581 157.595 cv
566.921 157.595 li
566.321 157.595 565.831 157.105 565.831 156.506 cv
565.831 155.715 li
563.454 155.715 li
563.454 156.506 li
563.454 157.105 562.966 157.595 562.366 157.595 cv
561.706 157.595 li
561.108 157.595 560.618 157.105 560.618 156.506 cv
560.618 150.9 li
560.618 150.302 561.108 149.813 561.706 149.813 cv
562.366 149.813 li
562.966 149.813 563.454 150.302 563.454 150.9 cv
563.454 151.527 li
565.831 151.527 li
565.831 150.9 li
565.831 150.302 566.321 149.813 566.921 149.813 cv
cp
ef
509.106 113.171 mo
509.106 112.758 509.442 112.422 509.854 112.422 cv
510.245 112.422 li
512.487 112.422 li
513.065 112.422 li
513.476 112.422 513.813 112.758 513.813 113.171 cv
513.813 114.136 li
551.481 114.136 li
554.063 111.042 557.103 108.404 562.065 107.688 cv
561.999 107.468 561.974 107.191 561.978 106.84 cv
562.825 62.7051 li
562.831 62.4272 562.853 62.1694 562.896 61.9312 cv
511.151 61.6611 li
510.591 61.6587 li
509.308 61.6514 507.423 59.75 509.897 59.7007 cv
511.151 59.6763 li
557.839 58.7549 li
562.61 58.6611 566.677 58.6611 571.448 58.7549 cv
618.136 59.6763 li
619.39 59.7007 li
621.862 59.75 619.979 61.6514 618.696 61.6587 cv
618.136 61.6611 li
566.396 61.9312 li
566.435 62.1694 566.458 62.4272 566.462 62.7051 cv
567.31 106.84 li
567.313 107.191 567.288 107.467 567.222 107.688 cv
572.185 108.404 575.224 111.042 577.806 114.136 cv
615.474 114.136 li
615.474 113.171 li
615.474 112.758 615.81 112.422 616.222 112.422 cv
616.8 112.422 li
619.042 112.422 li
619.431 112.422 li
619.845 112.422 620.181 112.758 620.181 113.171 cv
620.181 113.623 li
626.034 113.161 li
725.69 105.283 li
728.507 105.061 li
733.136 104.695 730.329 108.518 727.897 108.807 cv
726.091 109.019 li
726.091 111.389 li
726.091 111.526 725.979 111.639 725.841 111.639 cv
725.456 111.639 li
725.317 111.639 725.206 111.526 725.206 111.389 cv
725.206 109.127 li
707.126 111.272 li
707.126 113.642 li
707.126 113.78 707.015 113.892 706.876 113.892 cv
706.491 113.892 li
706.353 113.892 706.241 113.78 706.241 113.642 cv
706.241 111.381 li
679.108 114.602 li
679.108 116.971 li
679.108 117.109 678.997 117.221 678.858 117.221 cv
678.472 117.221 li
678.335 117.221 678.222 117.109 678.222 116.971 cv
678.222 114.709 li
654.185 117.563 li
654.185 119.933 li
654.185 120.07 654.073 120.183 653.935 120.183 cv
653.55 120.183 li
653.413 120.183 653.3 120.07 653.3 119.933 cv
653.3 117.671 li
631.692 120.236 li
631.692 122.606 li
631.692 122.743 631.579 122.855 631.442 122.855 cv
631.056 122.855 li
630.917 122.855 630.806 122.743 630.806 122.606 cv
630.806 120.344 li
626.942 120.803 li
625.282 121 li
625.282 122.052 li
625.282 131.812 li
625.282 135.19 li
625.282 139.977 610.61 139.932 610.61 135.167 cv
610.61 131.812 li
610.61 122.052 li
610.61 121.861 li
606.837 121.861 li
606.837 124.123 li
606.837 124.26 606.724 124.372 606.587 124.372 cv
606.2 124.372 li
606.063 124.372 605.95 124.26 605.95 124.123 cv
605.95 121.861 li
581.714 121.861 li
581.831 122.302 581.892 122.766 581.892 123.246 cv
581.892 129.636 li
581.892 142.134 li
581.892 146.088 578.726 147.6 574.929 148.129 cv
571.452 148.613 557.577 148.612 554.153 148.099 cv
550.448 147.544 547.396 146.017 547.396 142.134 cv
547.396 129.636 li
547.396 123.246 li
547.396 122.766 547.456 122.301 547.573 121.861 cv
523.337 121.861 li
523.337 124.123 li
523.337 124.26 523.224 124.372 523.085 124.372 cv
522.7 124.372 li
522.562 124.372 522.45 124.26 522.45 124.123 cv
522.45 121.861 li
518.677 121.861 li
518.677 122.052 li
518.677 131.812 li
518.677 135.167 li
518.677 139.932 504.005 139.977 504.005 135.19 cv
504.005 131.812 li
504.005 122.052 li
504.005 121 li
502.345 120.803 li
498.479 120.344 li
498.479 122.606 li
498.479 122.743 498.368 122.855 498.231 122.855 cv
497.845 122.855 li
497.706 122.855 497.595 122.743 497.595 122.606 cv
497.595 120.236 li
475.987 117.671 li
475.987 119.933 li
475.987 120.07 475.874 120.183 475.737 120.183 cv
475.351 120.183 li
475.214 120.183 475.103 120.07 475.103 119.933 cv
475.103 117.563 li
451.063 114.709 li
451.063 116.971 li
451.063 117.109 450.952 117.221 450.813 117.221 cv
450.429 117.221 li
450.29 117.221 450.179 117.109 450.179 116.971 cv
450.179 114.602 li
423.046 111.381 li
423.046 113.642 li
423.046 113.78 422.935 113.892 422.796 113.892 cv
422.411 113.892 li
422.272 113.892 422.159 113.78 422.159 113.642 cv
422.159 111.272 li
404.081 109.127 li
404.081 111.389 li
404.081 111.526 403.969 111.639 403.831 111.639 cv
403.446 111.639 li
403.308 111.639 403.196 111.526 403.196 111.389 cv
403.196 109.019 li
401.388 108.807 li
398.958 108.518 396.151 104.695 400.779 105.061 cv
403.596 105.283 li
503.253 113.161 li
509.106 113.623 li
509.106 113.171 li
cp
0 0 0 0 cmyk
ef
511.339 127.28 mo
509.563 127.28 508.126 128.718 508.126 130.493 cv
508.126 132.268 509.563 133.708 511.339 133.708 cv
513.114 133.708 514.554 132.268 514.554 130.493 cv
514.554 128.718 513.114 127.28 511.339 127.28 cv
cp
511.339 116.182 mo
508.681 116.182 506.526 118.338 506.526 120.996 cv
506.526 121.359 506.565 121.712 506.642 122.052 cv
507.122 124.204 509.044 125.811 511.339 125.811 cv
513.636 125.811 515.556 124.204 516.038 122.052 cv
516.114 121.712 516.153 121.359 516.153 120.996 cv
516.153 118.338 513.999 116.182 511.339 116.182 cv
511.339 116.182 li
cp
.619837 .538445 .529625 .256565 cmyk
ef
617.946 127.28 mo
616.173 127.28 614.733 128.718 614.733 130.493 cv
614.733 132.268 616.173 133.708 617.946 133.708 cv
619.724 133.708 621.161 132.268 621.161 130.493 cv
621.161 128.718 619.724 127.28 617.946 127.28 cv
cp
617.946 116.182 mo
615.29 116.182 613.134 118.338 613.134 120.996 cv
613.134 121.359 613.175 121.712 613.249 122.052 cv
613.731 124.204 615.651 125.811 617.946 125.811 cv
620.245 125.811 622.165 124.204 622.646 122.052 cv
622.722 121.712 622.763 121.359 622.763 120.996 cv
622.763 118.338 620.606 116.182 617.946 116.182 cv
617.946 116.182 li
cp
ef
555.329 118.762 mo
554.78 119.225 554.667 119.309 554.368 119.656 cv
554.325 119.705 554.319 119.773 554.353 119.83 cv
554.384 119.886 554.446 119.914 554.511 119.901 cv
554.972 119.796 li
556.724 119.357 li
557.13 119.255 557.058 118.54 556.603 118.585 cv
556.196 118.626 555.8 118.674 555.405 118.728 cv
555.376 118.732 555.353 118.743 555.329 118.762 cv
cp
.221286 .172763 .183902 0 cmyk
ef
557.048 116.923 mo
555.501 117.403 553.991 118.025 552.743 118.831 cv
554.034 118.568 555.36 118.352 556.737 118.201 cv
556.915 118.182 557.048 118.033 557.048 117.854 cv
557.048 116.923 li
cp
ef
552.003 119.356 mo
551.708 119.585 551.435 119.828 551.187 120.083 cv
551.892 120.083 552.628 120.109 553.331 120.061 cv
553.374 120.058 553.407 120.041 553.435 120.011 cv
553.772 119.628 553.921 119.467 554.21 119.193 cv
554.259 119.147 554.271 119.077 554.241 119.017 cv
554.21 118.957 554.147 118.925 554.081 118.937 cv
553.382 119.06 552.696 119.201 552.003 119.356 cv
cp
ef
551.521 121.216 mo
551.126 122.721 550.915 124.227 550.81 125.732 cv
550.798 125.875 550.845 126.002 550.94 126.108 cv
551.04 126.213 551.163 126.267 551.306 126.267 cv
551.806 126.267 li
552.036 126.267 552.231 126.115 552.29 125.892 cv
552.688 124.338 553.124 122.786 553.604 121.237 cv
553.657 121.063 553.618 120.887 553.495 120.752 cv
553.372 120.618 553.198 120.563 553.021 120.602 cv
551.89 120.856 li
551.706 120.899 551.569 121.032 551.521 121.216 cv
cp
ef
554.603 120.546 mo
554.091 122.239 553.595 123.935 553.118 125.633 cv
553.073 125.788 553.103 125.94 553.2 126.069 cv
553.298 126.198 553.437 126.267 553.599 126.267 cv
554.716 126.267 li
554.931 126.267 555.116 126.135 555.187 125.931 cv
555.806 124.141 556.476 122.358 557.208 120.584 cv
557.278 120.413 557.253 120.229 557.138 120.083 cv
557.021 119.938 556.849 119.871 556.665 119.902 cv
554.987 120.201 li
554.8 120.236 554.657 120.364 554.603 120.546 cv
cp
ef
558.272 119.911 mo
557.671 121.426 557.085 122.945 556.513 124.466 cv
556.351 124.897 556.812 125.3 557.218 125.08 cv
558.675 124.294 560.755 123.801 563.62 123.678 cv
563.888 123.667 564.097 123.447 564.097 123.18 cv
564.097 119.634 li
564.097 119.347 563.86 119.121 563.571 119.136 cv
561.931 119.223 560.296 119.38 558.669 119.6 cv
558.485 119.625 558.341 119.738 558.272 119.911 cv
cp
ef
565.188 119.634 mo
565.188 123.18 li
565.188 123.447 565.399 123.667 565.667 123.678 cv
568.532 123.801 570.612 124.294 572.069 125.08 cv
572.476 125.3 572.937 124.897 572.772 124.466 cv
572.202 122.945 571.616 121.426 571.015 119.911 cv
570.946 119.738 570.802 119.625 570.618 119.6 cv
568.989 119.38 567.356 119.223 565.714 119.136 cv
565.427 119.121 565.188 119.347 565.188 119.634 cv
cp
ef
572.079 120.584 mo
572.812 122.358 573.481 124.141 574.101 125.931 cv
574.171 126.135 574.354 126.267 574.571 126.267 cv
575.688 126.267 li
575.849 126.267 575.987 126.198 576.085 126.069 cv
576.183 125.94 576.212 125.788 576.169 125.633 cv
575.692 123.935 575.196 122.239 574.685 120.546 cv
574.628 120.364 574.485 120.236 574.298 120.201 cv
572.622 119.902 li
572.438 119.871 572.265 119.938 572.149 120.083 cv
572.034 120.229 572.007 120.413 572.079 120.584 cv
cp
ef
575.683 121.237 mo
576.163 122.786 576.599 124.338 576.997 125.892 cv
577.054 126.115 577.251 126.267 577.481 126.267 cv
577.981 126.267 li
578.124 126.267 578.247 126.213 578.347 126.108 cv
578.442 126.002 578.487 125.875 578.478 125.732 cv
578.372 124.227 578.161 122.721 577.767 121.216 cv
577.718 121.032 577.581 120.899 577.396 120.856 cv
576.265 120.602 li
576.087 120.563 575.915 120.618 575.792 120.752 cv
575.667 120.887 575.63 121.063 575.683 121.237 cv
cp
ef
572.683 118.585 mo
572.229 118.54 572.155 119.255 572.563 119.357 cv
574.315 119.796 li
574.776 119.901 li
574.841 119.914 574.903 119.886 574.935 119.83 cv
574.968 119.773 574.962 119.705 574.919 119.656 cv
574.62 119.309 574.505 119.225 573.958 118.762 cv
573.935 118.743 573.909 118.732 573.88 118.728 cv
573.487 118.674 573.089 118.626 572.683 118.585 cv
cp
ef
575.077 119.193 mo
575.366 119.467 575.513 119.628 575.853 120.011 cv
575.878 120.041 575.913 120.058 575.954 120.061 cv
576.657 120.109 577.396 120.083 578.101 120.083 cv
577.851 119.828 577.579 119.585 577.284 119.356 cv
576.591 119.201 575.903 119.06 575.206 118.937 cv
575.14 118.925 575.075 118.957 575.046 119.017 cv
575.015 119.077 575.026 119.147 575.077 119.193 cv
cp
ef
572.239 117.854 mo
572.239 118.033 572.372 118.182 572.55 118.201 cv
573.925 118.352 575.251 118.568 576.544 118.831 cv
575.294 118.025 573.784 117.403 572.239 116.923 cv
572.239 117.854 li
cp
ef
.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
344.056 104.437 mo
341.402 116.174 li
290.139 106.423 mo
292.539 125.605 li
226.249 120.381 mo
234.099 120.381 li
235.52 120.381 236.731 120.309 238.143 120.14 cv
322.83 110.01 li
359.907 55.7505 mo
359.907 57.2529 li
339.18 56.9175 mo
357.126 56.9175 li
340.587 72.7739 mo
345.863 72.7739 li
346.001 72.7739 346.115 72.6616 346.115 72.5234 cv
346.115 72.1279 li
346.115 71.9897 346.001 71.877 345.863 71.877 cv
340.587 71.877 li
340.449 71.877 340.337 71.9897 340.337 72.1279 cv
340.337 72.5234 li
340.337 72.6616 340.449 72.7739 340.587 72.7739 cv
340.587 72.7739 li
cp
356.481 63.3955 mo
357.885 63.3955 li
358.066 63.3955 358.214 63.2471 358.214 63.0654 cv
358.214 62.8018 li
358.214 62.6201 358.066 62.4722 357.885 62.4722 cv
356.505 62.4722 li
354.483 80.5698 mo
356.713 80.5698 li
356.895 80.5698 357.043 80.4214 357.043 80.2397 cv
357.043 79.9761 li
357.043 79.7944 356.895 79.6465 356.713 79.6465 cv
354.585 79.6465 li
357.17 56.5195 mo
352.338 99.7593 li
352.293 100.164 352.595 100.517 353.001 100.535 cv
354.859 100.616 li
355.232 100.633 355.526 100.94 355.526 101.314 cv
355.526 104.437 li
352.636 56.896 mo
345.344 104.437 li
339.432 56.0986 mo
319.732 120.068 li
355.357 56.0376 mo
363.681 58.2495 li
364.278 58.4082 364.681 58.9316 364.681 59.5508 cv
364.681 104.437 li
335.055 55.0596 mo
317.659 101.381 li
316.931 103.319 315.22 104.528 313.153 104.632 cv
345.714 54.2124 mo
337.467 54.2124 335.055 54.5918 335.055 55.0596 cv
335.055 55.5278 337.467 56.3057 345.714 56.3057 cv
353.96 56.3057 364.919 55.5278 364.919 55.0596 cv
364.919 54.5918 353.96 54.2124 345.714 54.2124 cv
345.714 54.2124 li
cp
201.516 156.723 mo
204.313 156.723 206.58 154.456 206.58 151.658 cv
206.58 148.86 204.313 146.593 201.516 146.593 cv
198.718 146.593 196.451 148.86 196.451 151.658 cv
196.451 154.456 198.718 156.723 201.516 156.723 cv
201.516 156.723 li
cp
152.974 147.105 mo
154.259 148.349 155.088 149.319 157.077 149.319 cv
159.879 149.319 li
161.674 149.319 163.733 147.796 165.295 146.901 cv
172.073 146.783 mo
172.383 147.865 li
172.451 148.105 172.662 148.264 172.911 148.264 cv
175.904 148.264 li
176.13 148.264 176.323 148.136 176.41 147.927 cv
176.928 146.697 li
166.085 146.888 mo
166.085 150.037 li
166.085 150.339 166.332 150.585 166.635 150.585 cv
167.305 150.585 li
167.606 150.585 167.854 150.339 167.854 150.037 cv
167.854 146.859 li
192.866 135.489 mo
197.646 134 202.355 132.382 206.609 129.955 cv
207.009 129.727 207.504 130.014 207.504 130.475 cv
207.504 132.397 li
191.984 135.613 mo
192.225 135.819 192.537 135.944 192.876 135.944 cv
193.457 135.944 li
194 135.944 194.472 135.625 194.694 135.165 cv
200 134.291 mo
200 135.045 200.617 135.663 201.372 135.663 cv
201.952 135.663 li
202.706 135.663 203.324 135.045 203.324 134.291 cv
203.324 133.486 li
208.151 132.243 mo
208.151 134.019 li
208.151 134.773 208.769 135.39 209.523 135.39 cv
210.103 135.39 li
210.857 135.39 211.475 134.773 211.475 134.019 cv
211.475 131.213 li
217.965 135.021 mo
218.545 135.021 li
219.299 135.021 219.917 134.403 219.917 133.648 cv
219.917 131.037 li
219.917 130.283 219.299 129.666 218.545 129.666 cv
217.965 129.666 li
217.21 129.666 216.593 130.283 216.593 131.037 cv
216.593 133.648 li
216.593 134.403 217.21 135.021 217.965 135.021 cv
217.965 135.021 li
cp
152.438 134.978 mo
152.438 135.732 153.039 136.59 153.793 136.59 cv
154.374 136.59 li
154.704 136.59 155.085 136.432 155.323 136.235 cv
142.106 136.59 mo
142.688 136.59 li
143.442 136.59 144.059 135.973 144.059 135.218 cv
144.059 132.607 li
144.059 131.853 143.442 131.235 142.688 131.235 cv
142.106 131.235 li
141.352 131.235 140.735 131.853 140.735 132.607 cv
140.735 135.218 li
140.735 135.973 141.352 136.59 142.106 136.59 cv
142.106 136.59 li
cp
149.361 137.047 mo
149.361 147.167 li
171.416 112.292 mo
171.416 111.679 li
171.416 111.349 171.685 111.08 172.014 111.08 cv
175.954 111.08 li
176.08 111.08 176.187 111.114 176.291 111.184 cv
177.867 112.259 li
219.456 127.912 mo
219.456 123.884 li
219.456 123.154 219.967 122.542 220.685 122.412 cv
226.152 121.421 li
225.695 128.902 mo
217.436 128.902 li
181.059 136.706 mo
195.938 136.453 210.816 136.075 225.695 135.598 cv
136.963 137.065 mo
149.481 137.081 161.999 136.99 174.517 136.809 cv
224.244 130.629 mo
227.278 130.629 li
227.366 130.629 227.437 130.558 227.437 130.47 cv
227.437 130.207 li
227.437 130.119 227.366 130.048 227.278 130.048 cv
224.244 130.048 li
224.157 130.048 224.086 130.119 224.086 130.207 cv
224.086 130.47 li
224.086 130.558 224.157 130.629 224.244 130.629 cv
224.244 130.629 li
cp
224.244 137.712 mo
227.278 137.712 li
227.366 137.712 227.437 137.641 227.437 137.554 cv
227.437 137.29 li
227.437 137.203 227.366 137.131 227.278 137.131 cv
224.244 137.131 li
224.157 137.131 224.086 137.203 224.086 137.29 cv
224.086 137.554 li
224.086 137.641 224.157 137.712 224.244 137.712 cv
224.244 137.712 li
cp
225.695 130.629 mo
225.695 137.131 li
225.695 137.712 mo
225.695 141.701 li
225.695 142.003 225.942 142.25 226.244 142.25 cv
234.221 142.25 li
234.524 142.25 234.77 142.003 234.77 141.701 cv
234.77 128.902 li
234.77 126.978 234.148 122.991 231.737 122.991 cv
229.442 122.991 li
226.885 122.991 225.695 126.797 225.695 128.902 cv
225.695 130.048 li
137.056 144.669 mo
167.961 144.158 li
227.113 143.099 li
234.937 142.959 240.136 142.081 247.702 139.352 cv
268.385 131.894 295.387 124.991 315.86 119.006 cv
316.492 118.821 318.955 118.542 320.188 118.586 cv
104.707 158.457 mo
106.864 158.457 108.611 156.708 108.611 154.552 cv
108.611 152.396 106.864 150.648 104.707 150.648 cv
102.551 150.648 100.803 152.396 100.803 154.552 cv
100.803 156.708 102.551 158.457 104.707 158.457 cv
104.707 158.457 li
cp
115.975 130.148 mo
117.156 130.148 li
117.32 130.148 117.455 130.013 117.455 129.848 cv
117.455 129.432 li
117.455 129.267 117.32 129.132 117.156 129.132 cv
115.975 129.132 li
115.81 129.132 115.674 129.267 115.674 129.432 cv
115.674 129.848 li
115.674 130.013 115.81 130.148 115.975 130.148 cv
115.975 130.148 li
cp
107.839 134.326 mo
107.839 133.145 li
107.839 132.98 107.705 132.845 107.54 132.845 cv
107.125 132.845 li
106.959 132.845 106.824 132.98 106.824 133.145 cv
106.824 134.326 li
106.824 134.491 106.959 134.626 107.125 134.626 cv
107.54 134.626 li
107.705 134.626 107.839 134.491 107.839 134.326 cv
107.839 134.326 li
cp
100.691 138.741 mo
102.458 138.741 li
102.646 138.741 102.801 138.587 102.801 138.398 cv
102.801 137.924 li
102.801 137.735 102.646 137.581 102.458 137.581 cv
100.691 137.581 li
100.502 137.581 100.348 137.735 100.348 137.924 cv
100.348 138.398 li
100.348 138.587 100.502 138.741 100.691 138.741 cv
100.691 138.741 li
cp
103.218 132.531 mo
91.0835 133.928 90.6704 143.366 103.281 144.341 cv
109.942 126.068 mo
110.879 128.468 li
111.087 129.004 110.85 129.607 110.331 129.856 cv
109.185 130.407 107.707 130.986 106.561 131.411 cv
105.84 131.677 105.413 131.563 105.413 130.795 cv
105.413 130.134 li
118.962 142.329 mo
124.208 142.329 li
124.259 142.329 124.302 142.287 124.302 142.234 cv
124.302 141.922 li
124.302 141.871 124.259 141.828 124.208 141.828 cv
118.962 141.828 li
118.91 141.828 118.867 141.871 118.867 141.922 cv
118.867 142.234 li
118.867 142.287 118.91 142.329 118.962 142.329 cv
118.962 142.329 li
cp
115.19 144.255 mo
116.268 144.255 li
116.319 144.255 116.361 144.212 116.361 144.16 cv
116.361 143.848 li
116.361 143.796 116.319 143.754 116.268 143.754 cv
115.19 143.754 li
115.138 143.754 115.095 143.796 115.095 143.848 cv
115.095 144.16 li
115.095 144.212 115.138 144.255 115.19 144.255 cv
115.19 144.255 li
cp
114.634 145.402 mo
116.823 145.402 li
117.114 145.402 117.35 145.166 117.35 144.875 cv
117.35 143.134 li
117.35 142.844 117.114 142.606 116.823 142.606 cv
114.634 142.606 li
114.343 142.606 114.106 142.844 114.106 143.134 cv
114.106 144.875 li
114.106 145.166 114.343 145.402 114.634 145.402 cv
114.634 145.402 li
cp
108.25 140.958 mo
108.25 146.672 li
125.555 140.958 mo
125.555 147.557 li
104.967 140.958 mo
136.963 140.958 li
104.988 130.561 mo
104.988 140.563 li
104.988 141.221 104.83 141.784 104.49 142.346 cv
103.281 144.341 li
127.788 114.268 mo
127.788 114.982 li
127.788 115.368 128.102 115.681 128.487 115.681 cv
133.658 115.681 li
134.043 115.681 134.356 115.368 134.356 114.982 cv
134.356 114.182 li
128.345 118.353 mo
129.8 118.654 131.537 118.91 133.588 119.116 cv
134.002 119.158 134.356 118.837 134.356 118.421 cv
134.356 117.024 li
134.356 116.64 134.043 116.326 133.658 116.326 cv
128.487 116.326 li
128.102 116.326 127.788 116.64 127.788 117.024 cv
127.788 117.669 li
127.788 118.004 128.018 118.286 128.345 118.353 cv
128.345 118.353 li
cp
122.209 115.229 mo
122.63 116.257 123.917 117.148 126.339 117.86 cv
126.557 117.923 126.772 117.885 126.954 117.749 cv
127.137 117.612 127.234 117.417 127.234 117.189 cv
127.234 114.274 li
114.121 123.176 mo
115.199 123.517 116.334 123.831 117.519 124.121 cv
117.829 124.196 118.139 124.062 118.294 123.785 cv
121.078 118.836 li
121.183 118.65 121.199 118.448 121.123 118.248 cv
121.048 118.047 120.903 117.905 120.701 117.834 cv
120.147 117.64 119.639 117.43 119.184 117.2 cv
125.282 118.962 mo
124.346 118.796 123.46 118.613 122.639 118.407 cv
122.328 118.329 122.016 118.463 121.859 118.742 cv
119.143 123.57 li
119.031 123.77 119.021 123.991 119.115 124.201 cv
119.21 124.41 119.382 124.548 119.607 124.596 cv
121.306 124.956 123.092 125.273 124.952 125.555 cv
125.158 125.586 125.347 125.533 125.506 125.399 cv
125.667 125.264 125.75 125.087 125.754 124.878 cv
125.858 119.664 li
125.864 119.317 125.622 119.022 125.282 118.962 cv
125.282 118.962 li
cp
131.295 119.771 mo
129.909 119.625 128.563 119.465 127.284 119.281 cv
127.079 119.251 126.891 119.306 126.733 119.44 cv
126.575 119.575 126.49 119.751 126.487 119.958 cv
126.385 125.141 li
126.377 125.498 126.635 125.799 126.99 125.847 cv
128.292 126.022 129.626 126.183 130.987 126.33 cv
131.411 126.376 131.792 126.253 132.109 125.969 cv
132.427 125.685 132.59 125.318 132.59 124.893 cv
132.59 121.209 li
132.59 120.466 132.034 119.849 131.295 119.771 cv
131.295 119.771 li
cp
148.261 124.288 mo
148.261 130.876 li
148.261 114.002 mo
148.261 116.322 li
141.998 122.505 mo
136.963 122.505 li
150.923 130.876 mo
136.963 130.876 li
147.574 116.474 mo
147.574 124.177 li
150.835 115.827 mo
136.134 118.361 136.604 122.741 150.835 124.694 cv
144.008 114.057 mo
144.008 112.706 li
144.008 112.568 144.12 112.457 144.258 112.457 cv
144.443 112.457 li
144.581 112.457 144.692 112.568 144.692 112.706 cv
144.692 114.048 li
156.97 113.49 mo
156.97 110.701 li
156.97 110.563 157.082 110.451 157.219 110.451 cv
157.528 110.451 li
157.666 110.451 157.777 110.563 157.777 110.701 cv
157.777 113.346 li
136.963 114.149 mo
136.963 147.361 li
236.127 112.357 mo
236.127 145.137 li
154.791 113.917 mo
127.018 114.277 li
120.42 114.363 117.94 118.261 114.474 122.792 cv
114.251 123.083 114.013 123.295 113.699 123.485 cv
109.4 126.08 106.336 129.065 103.417 132.218 cv
103.24 132.41 103.152 132.634 103.152 132.896 cv
103.152 143.843 li
103.152 144.218 103.344 144.541 103.674 144.719 cv
109.056 147.646 112.819 147.74 118.602 147.673 cv
167.962 146.857 li
227.114 145.798 li
234.938 145.658 240.386 144.78 247.952 142.051 cv
268.635 134.592 298.158 124.824 318.736 120.263 cv
319.38 120.121 320.03 120.01 320.735 119.922 cv
341.437 117.349 356.309 112.633 365.635 105.881 cv
366.26 105.428 365.938 104.437 365.166 104.437 cv
320.707 104.437 li
300.805 104.437 261.94 109.695 237.667 112.234 cv
236.59 112.346 235.667 112.396 234.584 112.398 cv
210.019 112.45 li
161.806 135.381 mo
163.018 135.381 li
163.198 135.381 163.345 135.234 163.345 135.054 cv
163.345 134.593 li
163.345 134.414 163.198 134.267 163.018 134.267 cv
161.806 134.267 li
161.625 134.267 161.479 134.414 161.479 134.593 cv
161.479 135.054 li
161.479 135.234 161.625 135.381 161.806 135.381 cv
161.806 135.381 li
cp
162.501 130.844 mo
162.911 130.844 li
163.069 130.844 163.201 130.713 163.201 130.553 cv
163.201 129.538 li
163.201 129.378 163.069 129.248 162.911 129.248 cv
162.501 129.248 li
162.341 129.248 162.211 129.378 162.211 129.538 cv
162.211 130.553 li
162.211 130.713 162.341 130.844 162.501 130.844 cv
162.501 130.844 li
cp
150.835 120.014 mo
152.024 120.014 li
153.722 120.014 153.184 121.901 154.882 121.901 cv
156.494 121.901 li
156.494 114.936 mo
160.737 114.275 165.597 113.953 171.247 114.065 cv
174.519 136.247 mo
174.519 138.485 li
174.519 138.65 174.652 138.785 174.817 138.785 cv
180.708 138.785 li
180.873 138.785 181.008 138.65 181.008 138.485 cv
181.008 136.247 li
169.085 133.166 mo
183.057 133.166 li
183.222 133.166 183.355 133.3 183.355 133.465 cv
183.355 136.257 li
169.085 128.524 mo
169.085 136.247 li
156.494 128.839 mo
170.955 128.477 li
171.117 128.473 171.247 128.34 171.247 128.177 cv
171.247 112.296 li
156.494 134.401 mo
156.494 113.565 li
152.194 133.482 mo
154.206 134.105 156.336 134.53 158.731 134.515 cv
158.813 134.515 158.885 134.544 158.944 134.602 cv
159.002 134.661 159.033 134.732 159.033 134.814 cv
159.033 136.247 li
152.194 126.062 mo
152.194 134.852 li
179.828 112.287 mo
167.096 112.055 157.497 112.829 151.587 114.786 cv
151.13 114.937 150.835 115.346 150.835 115.827 cv
150.835 124.201 li
150.835 124.864 151.514 125.307 152.086 125.689 cv
152.168 125.744 152.215 125.827 152.219 125.925 cv
152.224 126.023 152.186 126.109 152.108 126.171 cv
151.494 126.668 150.923 127.134 150.923 128.039 cv
150.923 131.511 li
150.923 134.12 153.051 136.247 155.66 136.247 cv
182.703 136.247 li
194.766 136.564 226.56 129.784 226.249 120.381 cv
226.16 117.696 221.531 115.471 212.867 114.837 cv
204.652 114.168 mo
207.92 113.918 209.6 113.901 211.147 113.396 cv
206.521 117.011 mo
207.766 118.902 li
204.235 113.535 mo
205.753 115.842 li
201.539 109.434 mo
203.341 112.175 li
204.752 117.265 mo
205.735 118.937 li
202.598 113.598 mo
203.917 115.844 li
200.191 109.502 mo
201.781 112.208 li
205.861 118.903 mo
209.258 118.901 li
209.498 118.901 209.6 119.207 209.409 119.351 cv
208.175 120.275 li
208.13 120.309 208.082 120.325 208.025 120.325 cv
206.29 120.325 li
206.19 120.325 206.104 120.271 206.063 120.18 cv
205.635 119.258 li
205.558 119.092 205.679 118.903 205.861 118.903 cv
205.861 118.903 li
cp
203.936 115.843 mo
207.333 115.841 li
207.572 115.841 207.674 116.146 207.482 116.291 cv
206.25 117.215 li
206.205 117.249 206.156 117.265 206.1 117.265 cv
204.363 117.265 li
204.264 117.265 204.179 117.211 204.137 117.121 cv
203.709 116.198 li
203.632 116.032 203.752 115.843 203.936 115.843 cv
203.936 115.843 li
cp
201.905 112.176 mo
205.301 112.174 li
205.541 112.174 205.643 112.479 205.451 112.624 cv
204.218 113.548 li
204.173 113.582 204.125 113.598 204.068 113.598 cv
202.333 113.598 li
202.232 113.598 202.147 113.544 202.106 113.454 cv
201.678 112.531 li
201.601 112.365 201.721 112.176 201.905 112.176 cv
201.905 112.176 li
cp
198.741 109.572 mo
204.729 120.243 li
198.136 109.601 mo
199.106 109.125 199.587 108.445 199.221 107.408 cv
183.961 109.556 mo
183.961 110.21 li
183.961 110.43 184.14 110.61 184.361 110.61 cv
185.182 110.61 li
185.313 110.61 185.423 110.554 185.501 110.45 cv
185.989 109.8 li
186.968 109.844 mo
181.696 120.375 li
183.759 109.505 mo
175.042 119.145 li
183.148 109.208 mo
184.226 110.359 194.955 109.782 205.587 109.223 cv
206.037 120.125 mo
192.623 121.383 182.801 120.976 175.524 119.39 cv
174.727 119.216 174.425 118.245 174.983 117.65 cv
176.878 115.63 181.121 110.518 183.148 109.208 cv
188.442 105.787 202.762 106.367 207.839 110.623 cv
216.852 118.179 li
217.118 118.401 216.994 118.833 216.65 118.88 cv
213.888 119.263 211.252 119.586 208.737 119.854 cv
.697627 .675227 .638575 .739559 cmyk
@
133.038 350.254 mo
133.038 356.014 li
133.038 356.498 132.642 356.893 132.159 356.893 cv
126.619 356.893 li
126.135 356.893 125.74 356.498 125.74 356.014 cv
125.74 350.254 li
125.74 349.77 126.135 349.375 126.619 349.375 cv
132.159 349.375 li
132.642 349.375 133.038 349.77 133.038 350.254 cv
cp
324.469 352.301 mo
328.133 352.694 331.832 352.768 335.554 352.633 cv
324.651 351.444 mo
323.954 354.78 323.196 358.006 320.74 360.872 cv
322.81 357.917 mo
304.763 361.06 288.467 362.53 269.166 362.493 cv
208.092 363.197 li
217.502 398.867 mo
223.578 399.958 li
229.685 401.053 229.294 404.858 223.167 405.9 cv
217.645 406.839 li
217.502 366.183 mo
217.502 399.719 li
209.633 366.239 mo
209.633 396.545 li
336.111 357.8 mo
312.64 362.807 292.879 365.87 268.989 365.823 cv
208.529 366.246 li
208.028 366.249 207.631 366.655 207.638 367.157 cv
208.068 395.527 li
208.074 395.963 208.386 396.308 208.813 396.399 cv
217.502 398.25 li
364.854 349.347 mo
367.888 349.347 li
344.692 402.409 mo
347.318 399.213 li
347.701 398.75 348.219 398.504 348.82 398.504 cv
355.903 398.504 li
340.982 402.409 mo
363.045 402.409 li
156.617 358.844 mo
156.617 359.329 li
156.617 359.474 156.736 359.592 156.881 359.592 cv
158.376 359.592 li
158.521 359.592 158.64 359.474 158.64 359.329 cv
158.64 358.844 li
158.64 358.7 158.521 358.581 158.376 358.581 cv
156.881 358.581 li
156.736 358.581 156.617 358.7 156.617 358.844 cv
156.617 358.844 li
cp
136.224 362.362 mo
148.267 364.034 157.112 363.643 176.758 363.458 cv
200.69 439.092 mo
204.746 439.092 li
206.858 415.104 mo
203.338 415.104 li
202.975 415.104 202.673 415.381 202.643 415.745 cv
198.803 461.677 li
198.768 462.087 199.087 462.434 199.499 462.434 cv
202.777 462.434 li
203.444 510.715 mo
206.335 487.382 li
206.391 486.93 206.771 486.594 207.226 486.594 cv
208.43 486.594 li
209.834 474.32 mo
208.97 474.32 li
208.703 474.32 208.473 474.215 208.297 474.016 cv
208.12 473.817 208.045 473.577 208.079 473.311 cv
209.82 459.266 li
204.859 459.266 mo
211.553 459.266 li
209.606 406.596 mo
199.909 514.194 li
207.59 406.668 mo
198.205 514.837 li
176.014 411.875 mo
217.494 408.131 li
184.214 406.836 mo
188.077 510.715 li
183.387 510.715 mo
204.9 510.715 li
175.821 409.262 mo
183.324 510.102 li
183.972 518.799 193.2 517.153 201.431 513.557 cv
203.985 512.442 205.633 510.227 205.954 507.459 cv
217.744 405.983 li
184.208 360.406 mo
182.209 361.356 180.115 362.246 177.875 362.915 cv
176.286 363.387 175.238 364.792 175.238 366.45 cv
175.238 395.752 li
201.817 399.471 mo
201.817 406.199 li
201.817 406.504 202.063 406.75 202.369 406.748 cv
235.865 406.665 234.676 399.009 202.369 398.922 cv
202.063 398.92 201.817 399.167 201.817 399.471 cv
201.817 399.471 li
cp
150.932 402.651 mo
156.592 402.651 li
156.592 408.051 mo
172.415 408.051 li
156.592 397.251 mo
172.415 397.251 li
156.592 395.803 mo
156.592 409.499 li
183.966 401.678 mo
183.966 401.485 183.809 401.329 183.617 401.329 cv
182.272 401.329 li
182.079 401.329 181.922 401.485 181.922 401.678 cv
181.922 403.625 li
181.922 403.817 182.079 403.973 182.272 403.973 cv
183.617 403.973 li
183.809 403.973 183.966 403.817 183.966 403.625 cv
183.966 401.678 li
183.966 401.678 li
cp
172.415 400.524 mo
176.586 400.524 li
179.34 400.524 179.34 404.778 176.586 404.778 cv
172.415 404.778 li
172.415 395.661 mo
172.415 409.643 li
147.303 398.967 mo
136.771 400.461 136.771 404.841 147.303 406.335 cv
190.767 399.492 mo
190.767 399.196 190.531 398.952 190.234 398.943 cv
184.509 398.765 179.508 397.965 175.821 396.04 cv
175.321 395.778 174.838 395.661 174.274 395.661 cv
160.033 395.661 li
156.313 395.594 150.932 396.208 150.932 398.865 cv
150.932 406.438 li
150.932 409.094 156.313 409.708 160.033 409.643 cv
174.274 409.643 li
174.838 409.643 175.321 409.524 175.821 409.262 cv
179.508 407.336 184.509 406.538 190.234 406.36 cv
190.531 406.35 190.767 406.107 190.767 405.811 cv
190.767 399.492 li
190.767 399.492 li
cp
150.998 398.627 mo
148.004 398.627 li
147.509 398.627 147.106 399.032 147.106 399.526 cv
147.106 405.777 li
147.106 406.272 147.509 406.674 148.004 406.674 cv
150.998 406.674 li
130.344 360.757 mo
128.945 360.354 127.262 359.794 125.864 359.036 cv
125.682 358.938 125.751 358.661 125.959 358.661 cv
130.482 358.661 li
130.757 358.661 130.981 358.885 130.981 359.161 cv
130.981 360.278 li
130.981 360.612 130.665 360.85 130.344 360.757 cv
130.344 360.757 li
cp
124.209 358.157 mo
123.63 357.309 123.027 355.789 122.638 354.714 cv
122.507 354.355 122.771 353.979 123.153 353.979 cv
124.628 353.979 li
124.93 353.979 125.177 354.225 125.177 354.528 cv
125.177 357.658 li
125.177 358.2 124.694 358.868 124.209 358.157 cv
124.209 358.157 li
cp
131.13 351.444 mo
131.13 355.434 li
131.13 355.887 130.758 356.259 130.305 356.259 cv
127.7 356.259 li
127.246 356.259 126.875 355.887 126.875 355.434 cv
126.875 351.444 li
126.875 350.991 127.246 350.62 127.7 350.62 cv
130.305 350.62 li
130.758 350.62 131.13 350.991 131.13 351.444 cv
131.13 351.444 li
cp
126.15 360.237 mo
127.658 360.877 129.23 361.456 130.85 361.985 cv
131.079 362.059 131.228 362.265 131.228 362.506 cv
131.228 363.146 li
131.228 363.318 131.158 363.464 131.025 363.573 cv
130.892 363.68 130.733 363.719 130.565 363.683 cv
128.958 363.342 127.362 362.967 125.788 362.52 cv
125.55 362.452 125.391 362.241 125.39 361.993 cv
125.385 360.743 li
125.385 360.553 125.473 360.39 125.631 360.285 cv
125.789 360.18 125.975 360.163 126.15 360.237 cv
126.15 360.237 li
cp
120.005 356.958 mo
121.071 357.81 122.908 358.733 124.095 359.304 cv
124.29 359.397 124.405 359.582 124.406 359.797 cv
124.411 361.348 li
124.412 361.531 124.332 361.688 124.184 361.794 cv
124.036 361.902 123.862 361.928 123.688 361.871 cv
121.924 361.284 119.615 360.411 118.097 359.414 cv
117.963 359.327 117.882 359.199 117.857 359.04 cv
117.831 358.882 117.871 358.737 117.972 358.612 cv
119.234 357.042 li
119.423 356.807 119.77 356.768 120.005 356.958 cv
120.005 356.958 li
cp
117.479 350.182 mo
117.544 351.948 117.879 353.97 118.769 355.499 cv
118.887 355.7 118.868 355.94 118.722 356.121 cv
117.278 357.915 li
117.171 358.047 117.024 358.119 116.854 358.12 cv
116.684 358.121 116.536 358.052 116.428 357.921 cv
114.697 355.833 114.132 352.948 113.908 350.266 cv
113.89 350.064 113.953 349.884 114.089 349.736 cv
114.227 349.586 114.401 349.51 114.604 349.51 cv
116.78 349.51 li
117.157 349.51 117.465 349.807 117.479 350.182 cv
117.479 350.182 li
cp
236.452 331.717 mo
236.452 366.049 li
292.633 332.963 mo
289.215 341.489 289.215 356.278 292.633 364.803 cv
324.469 345.465 mo
328.133 345.073 331.832 344.999 335.554 345.133 cv
324.651 346.323 mo
323.954 342.987 323.196 339.761 320.74 336.895 cv
335.433 346.258 mo
309.808 345.124 309.808 352.643 335.433 351.508 cv
322.81 339.85 mo
304.763 336.708 288.467 335.237 269.166 335.274 cv
208.092 334.571 li
217.502 331.584 mo
202.906 336.215 li
202.252 336.423 201.828 337.004 201.828 337.69 cv
201.828 360.077 li
201.828 360.762 202.252 361.344 202.906 361.551 cv
217.502 366.183 li
217.502 298.899 mo
223.578 297.809 li
229.685 296.713 229.294 292.909 223.167 291.866 cv
217.645 290.926 li
217.502 331.584 mo
217.502 298.047 li
209.633 331.529 mo
209.633 301.221 li
336.111 339.965 mo
312.64 334.958 292.879 331.897 268.989 331.943 cv
208.529 331.522 li
208.028 331.518 207.631 331.112 207.638 330.61 cv
208.068 302.239 li
208.074 301.803 208.386 301.459 208.813 301.368 cv
217.502 299.515 li
364.854 348.419 mo
367.888 348.419 li
363.52 301.812 mo
361.416 301.812 li
361.242 301.812 361.093 301.878 360.974 302.006 cv
360.857 302.135 360.804 302.291 360.819 302.463 cv
364.781 347.58 li
364.861 348.493 364.861 349.275 364.781 350.187 cv
360.819 395.303 li
360.804 395.477 360.857 395.631 360.974 395.76 cv
361.093 395.887 361.242 395.954 361.416 395.954 cv
363.52 395.954 li
352.87 299.262 mo
350.957 327.301 li
350.946 327.476 351.082 327.622 351.256 327.622 cv
355.033 327.622 li
355.43 327.622 355.43 328.238 355.033 328.238 cv
353.763 328.238 li
353.598 328.238 353.464 328.372 353.464 328.538 cv
353.464 369.23 li
353.464 369.395 353.598 369.53 353.763 369.53 cv
355.033 369.53 li
355.43 369.53 355.43 370.145 355.033 370.145 cv
351.256 370.145 li
351.082 370.145 350.946 370.292 350.957 370.465 cv
352.87 398.504 li
344.692 295.358 mo
347.318 298.552 li
347.701 299.018 348.219 299.262 348.82 299.262 cv
355.903 299.262 li
343.592 295.358 mo
339.667 348.454 li
339.645 348.754 339.645 349.012 339.667 349.313 cv
343.592 402.409 li
340.982 295.358 mo
363.045 295.358 li
368.017 348.883 mo
368.017 348.068 366.987 347.819 366.915 346.85 cv
363.045 295.282 li
362.983 294.453 362.348 293.801 361.521 293.721 cv
355.687 293.147 349.853 292.514 344.019 292.981 cv
342.331 293.116 341.008 294.403 340.826 296.087 cv
335.168 348.717 li
335.156 348.833 335.156 348.934 335.168 349.048 cv
340.826 401.68 li
341.008 403.364 342.331 404.651 344.019 404.787 cv
349.853 405.252 355.687 404.62 361.521 404.045 cv
362.348 403.963 362.983 403.315 363.045 402.485 cv
366.915 350.917 li
366.987 349.948 368.017 349.699 368.017 348.883 cv
368.017 348.883 li
cp
156.617 338.921 mo
156.617 338.438 li
156.617 338.293 156.736 338.174 156.881 338.174 cv
158.376 338.174 li
158.521 338.174 158.64 338.293 158.64 338.438 cv
158.64 338.921 li
158.64 339.067 158.521 339.186 158.376 339.186 cv
156.881 339.186 li
156.736 339.186 156.617 339.067 156.617 338.921 cv
156.617 338.921 li
cp
136.224 335.405 mo
148.267 333.733 157.112 334.125 176.758 334.309 cv
200.69 258.674 mo
204.746 258.674 li
206.858 282.662 mo
203.338 282.662 li
202.975 282.662 202.673 282.385 202.643 282.021 cv
198.803 236.088 li
198.768 235.678 199.087 235.332 199.499 235.332 cv
202.777 235.332 li
203.444 187.051 mo
206.335 210.384 li
206.391 210.835 206.771 211.171 207.226 211.171 cv
208.43 211.171 li
209.834 223.446 mo
208.97 223.446 li
208.703 223.446 208.473 223.55 208.297 223.75 cv
208.12 223.949 208.045 224.19 208.079 224.455 cv
209.82 238.5 li
204.859 238.5 mo
211.553 238.5 li
209.606 291.17 mo
199.909 183.571 li
207.59 291.098 mo
198.205 182.928 li
176.014 285.892 mo
217.494 289.634 li
184.214 290.929 mo
188.077 187.051 li
183.387 187.051 mo
204.9 187.051 li
175.821 288.503 mo
183.324 187.663 li
183.972 178.967 193.2 180.613 201.431 184.209 cv
203.985 185.324 205.633 187.539 205.954 190.307 cv
217.744 291.784 li
184.208 337.362 mo
182.209 336.412 180.115 335.52 177.875 334.853 cv
176.286 334.38 175.238 332.974 175.238 331.317 cv
175.238 302.015 li
184.208 299.511 mo
184.208 398.255 li
201.817 298.294 mo
201.817 291.567 li
201.817 291.262 202.063 291.016 202.369 291.018 cv
235.865 291.102 234.676 298.758 202.369 298.843 cv
202.063 298.845 201.817 298.6 201.817 298.294 cv
201.817 298.294 li
cp
150.932 295.116 mo
156.592 295.116 li
156.592 289.715 mo
172.415 289.715 li
156.592 300.516 mo
172.415 300.516 li
156.592 301.963 mo
156.592 288.266 li
183.966 296.088 mo
183.966 296.281 183.809 296.438 183.617 296.438 cv
182.272 296.438 li
182.079 296.438 181.922 296.281 181.922 296.088 cv
181.922 294.143 li
181.922 293.95 182.079 293.793 182.272 293.793 cv
183.617 293.793 li
183.809 293.793 183.966 293.95 183.966 294.143 cv
183.966 296.088 li
183.966 296.088 li
cp
172.415 297.243 mo
176.586 297.243 li
179.34 297.243 179.34 292.989 176.586 292.989 cv
172.415 292.989 li
172.415 302.107 mo
172.415 288.124 li
147.303 298.8 mo
136.771 297.305 136.771 292.925 147.303 291.43 cv
190.767 298.276 mo
190.767 298.572 190.531 298.814 190.234 298.825 cv
184.509 299.002 179.508 299.801 175.821 301.727 cv
175.321 301.987 174.838 302.107 174.274 302.107 cv
160.033 302.107 li
156.313 302.172 150.932 301.559 150.932 298.902 cv
150.932 291.329 li
150.932 288.671 156.313 288.058 160.033 288.124 cv
174.274 288.124 li
174.838 288.124 175.321 288.243 175.821 288.503 cv
179.508 290.428 184.509 291.229 190.234 291.407 cv
190.531 291.416 190.767 291.659 190.767 291.956 cv
190.767 298.276 li
190.767 298.276 li
cp
150.998 299.139 mo
148.004 299.139 li
147.509 299.139 147.106 298.735 147.106 298.241 cv
147.106 291.991 li
147.106 291.495 147.509 291.092 148.004 291.092 cv
150.998 291.092 li
149.085 331.735 mo
149.085 366.032 li
136.224 332.722 mo
136.224 365.045 li
130.344 337.01 mo
128.945 337.412 127.262 337.973 125.864 338.731 cv
125.682 338.829 125.751 339.106 125.959 339.106 cv
130.482 339.106 li
130.757 339.106 130.981 338.881 130.981 338.607 cv
130.981 337.489 li
130.981 337.156 130.665 336.917 130.344 337.01 cv
130.344 337.01 li
cp
124.209 339.61 mo
123.63 340.458 123.027 341.977 122.638 343.052 cv
122.507 343.413 122.771 343.789 123.153 343.789 cv
124.628 343.789 li
124.93 343.789 125.177 343.542 125.177 343.24 cv
125.177 340.109 li
125.177 339.567 124.694 338.899 124.209 339.61 cv
124.209 339.61 li
cp
130.865 344.696 mo
130.865 340.706 li
130.865 340.252 130.495 339.881 130.042 339.881 cv
127.436 339.881 li
126.982 339.881 126.611 340.252 126.611 340.706 cv
126.611 344.696 li
126.611 345.149 126.982 345.52 127.436 345.52 cv
130.042 345.52 li
130.495 345.52 130.865 345.149 130.865 344.696 cv
130.865 344.696 li
cp
126.15 337.53 mo
127.658 336.889 129.23 336.311 130.85 335.783 cv
131.079 335.708 131.228 335.502 131.228 335.26 cv
131.228 334.621 li
131.228 334.45 131.158 334.301 131.025 334.194 cv
130.892 334.086 130.733 334.048 130.565 334.084 cv
128.958 334.424 127.362 334.799 125.788 335.248 cv
125.55 335.315 125.391 335.526 125.39 335.774 cv
125.385 337.024 li
125.385 337.213 125.473 337.377 125.631 337.483 cv
125.789 337.586 125.975 337.604 126.15 337.53 cv
126.15 337.53 li
cp
120.005 340.809 mo
121.071 339.957 122.908 339.034 124.095 338.462 cv
124.29 338.37 124.405 338.186 124.406 337.969 cv
124.411 336.418 li
124.412 336.237 124.332 336.079 124.184 335.973 cv
124.036 335.866 123.862 335.838 123.688 335.897 cv
121.924 336.483 119.615 337.356 118.097 338.352 cv
117.963 338.44 117.882 338.569 117.857 338.726 cv
117.831 338.885 117.871 339.031 117.972 339.156 cv
119.234 340.725 li
119.423 340.959 119.77 340.998 120.005 340.809 cv
120.005 340.809 li
cp
117.479 347.584 mo
117.544 345.819 117.879 343.797 118.769 342.266 cv
118.887 342.067 118.868 341.827 118.722 341.647 cv
117.278 339.852 li
117.171 339.719 117.024 339.649 116.854 339.647 cv
116.684 339.647 116.536 339.714 116.428 339.846 cv
114.697 341.934 114.132 344.819 113.908 347.5 cv
113.89 347.702 113.953 347.883 114.089 348.032 cv
114.227 348.18 114.401 348.257 114.604 348.257 cv
116.78 348.257 li
117.157 348.257 117.465 347.959 117.479 347.584 cv
117.479 347.584 li
cp
102.869 343.508 mo
104.949 342.145 107.13 341.186 109.405 340.603 cv
109.873 340.483 110.283 340.936 110.116 341.389 cv
108.563 345.625 108.563 352.141 110.116 356.377 cv
110.283 356.831 109.873 357.284 109.405 357.163 cv
107.13 356.581 104.949 355.622 102.869 354.258 cv
102.869 341.538 mo
102.869 356.229 li
102.087 342.555 mo
88.5283 342.707 88.5283 355.061 102.087 355.211 cv
175.238 331.079 mo
140.178 331.167 116.854 333.391 103.141 341.385 cv
102.338 341.854 101.879 342.653 101.879 343.583 cv
101.879 354.184 li
101.879 355.115 102.338 355.913 103.141 356.381 cv
116.854 364.375 140.178 366.6 175.238 366.689 cv
@
563.646 60.2773 mo
511.152 60.6685 li
511.152 59.6763 mo
511.152 61.6611 li
560.022 114.136 mo
560.022 111.856 li
560.022 111.636 559.842 111.457 559.622 111.457 cv
559.466 111.457 li
559.245 111.457 559.065 111.636 559.065 111.856 cv
559.065 114.136 li
559.544 114.136 mo
559.544 115.737 li
562.065 107.688 mo
557.104 108.404 554.063 111.042 551.481 114.136 cv
523.337 121.861 mo
523.337 124.123 li
523.337 124.26 523.224 124.372 523.086 124.372 cv
522.7 124.372 li
522.562 124.372 522.45 124.26 522.45 124.123 cv
522.45 121.861 li
551.675 117.993 mo
518.193 118.176 li
547.931 120.911 mo
518.677 120.975 li
547.574 121.861 mo
518.677 121.861 li
504.04 120.097 mo
403.646 108.414 li
498.48 120.344 mo
498.48 122.606 li
498.48 122.743 498.368 122.855 498.231 122.855 cv
497.845 122.855 li
497.707 122.855 497.595 122.743 497.595 122.606 cv
497.595 120.236 li
475.987 117.671 mo
475.987 119.933 li
475.987 120.07 475.875 120.183 475.737 120.183 cv
475.352 120.183 li
475.214 120.183 475.103 120.07 475.103 119.933 cv
475.103 117.563 li
451.063 114.709 mo
451.063 116.971 li
451.063 117.109 450.952 117.221 450.813 117.221 cv
450.429 117.221 li
450.291 117.221 450.179 117.109 450.179 116.971 cv
450.179 114.602 li
423.046 111.381 mo
423.046 113.642 li
423.046 113.78 422.935 113.892 422.796 113.892 cv
422.411 113.892 li
422.273 113.892 422.16 113.78 422.16 113.642 cv
422.16 111.272 li
503.254 113.161 mo
501.005 115.605 501.249 118.182 502.345 120.803 cv
504.831 117.391 mo
400.896 106.964 li
404.081 109.127 mo
404.081 111.389 li
404.081 111.526 403.969 111.639 403.832 111.639 cv
403.445 111.639 li
403.308 111.639 403.195 111.526 403.195 111.389 cv
403.195 109.019 li
403.597 105.283 mo
403.657 109.077 li
509.107 113.623 mo
400.779 105.061 li
396.151 104.695 398.958 108.518 401.388 108.807 cv
504.005 121 li
508.316 147.833 mo
507.127 147.833 li
506.048 147.833 505.165 148.717 505.165 149.796 cv
505.165 156.494 li
505.165 157.574 506.048 158.457 507.127 158.457 cv
508.316 158.457 li
509.396 158.457 510.279 157.574 510.279 156.494 cv
510.279 149.796 li
510.279 148.717 509.396 147.833 508.316 147.833 cv
508.316 147.833 li
cp
515.326 147.833 mo
514.137 147.833 li
513.058 147.833 512.174 148.717 512.174 149.796 cv
512.174 156.494 li
512.174 157.574 513.058 158.457 514.137 158.457 cv
515.326 158.457 li
516.405 158.457 517.288 157.574 517.288 156.494 cv
517.288 149.796 li
517.288 148.717 516.405 147.833 515.326 147.833 cv
515.326 147.833 li
cp
510.245 112.422 mo
510.245 113.835 li
512.487 112.422 mo
512.487 113.839 li
513.813 114.136 mo
513.813 113.17 li
513.813 112.758 513.476 112.422 513.065 112.422 cv
509.855 112.422 li
509.443 112.422 509.107 112.758 509.107 113.17 cv
509.107 114.076 li
505.913 131.812 mo
504.005 131.812 li
518.677 131.812 mo
516.765 131.812 li
512.396 136.709 mo
510.285 136.709 li
510.067 136.709 509.89 136.531 509.89 136.314 cv
509.89 135.522 li
509.89 135.305 510.067 135.126 510.285 135.126 cv
512.396 135.126 li
512.613 135.126 512.792 135.305 512.792 135.522 cv
512.792 136.314 li
512.792 136.531 512.613 136.709 512.396 136.709 cv
512.396 136.709 li
cp
509.89 136.06 mo
507.737 135.824 505.913 135.032 505.913 133.675 cv
505.913 122.051 li
516.765 122.051 mo
516.765 133.654 li
516.765 134.997 514.942 135.799 512.792 136.049 cv
506.642 122.052 mo
504.005 122.052 li
518.677 122.052 mo
516.038 122.052 li
504.005 121 mo
503.884 111.476 518.677 111.237 518.677 120.996 cv
518.677 121 li
518.677 135.167 li
518.677 139.932 504.005 139.977 504.005 135.19 cv
504.005 121 li
504.005 121 li
cp
511.339 133.708 mo
509.564 133.708 508.126 132.268 508.126 130.493 cv
508.126 128.718 509.564 127.279 511.339 127.279 cv
513.115 127.279 514.554 128.718 514.554 130.493 cv
514.554 132.268 513.115 133.708 511.339 133.708 cv
511.339 133.708 li
cp
511.339 121.968 mo
510.804 121.968 510.368 121.533 510.368 120.996 cv
510.368 120.46 510.804 120.025 511.339 120.025 cv
511.878 120.025 512.313 120.46 512.313 120.996 cv
512.313 121.533 511.878 121.968 511.339 121.968 cv
511.339 121.968 li
cp
511.339 125.811 mo
508.682 125.811 506.526 123.655 506.526 120.996 cv
506.526 118.337 508.682 116.182 511.339 116.182 cv
513.999 116.182 516.154 118.337 516.154 120.996 cv
516.154 123.655 513.999 125.811 511.339 125.811 cv
511.339 125.811 li
cp
549.622 129.636 mo
547.396 129.636 li
557.048 116.923 mo
557.048 117.854 li
557.048 118.033 556.915 118.182 556.737 118.201 cv
555.361 118.352 554.035 118.568 552.743 118.831 cv
552.003 119.356 mo
552.696 119.201 553.383 119.06 554.081 118.937 cv
554.147 118.925 554.21 118.957 554.241 119.017 cv
554.271 119.077 554.259 119.147 554.21 119.193 cv
553.921 119.467 553.773 119.628 553.435 120.011 cv
553.407 120.041 553.374 120.058 553.332 120.061 cv
552.628 120.109 551.892 120.083 551.187 120.083 cv
554.368 119.656 mo
554.667 119.309 554.781 119.225 555.33 118.762 cv
555.353 118.743 555.377 118.731 555.406 118.728 cv
555.8 118.674 556.197 118.626 556.603 118.585 cv
557.058 118.54 557.131 119.255 556.724 119.357 cv
554.972 119.796 li
554.816 119.835 554.664 119.87 554.512 119.901 cv
554.447 119.914 554.385 119.886 554.353 119.83 cv
554.319 119.773 554.325 119.705 554.368 119.656 cv
554.368 119.656 li
cp
558.669 119.6 mo
560.296 119.38 561.931 119.223 563.571 119.136 cv
563.86 119.121 564.098 119.347 564.098 119.634 cv
564.098 123.18 li
564.098 123.447 563.888 123.667 563.62 123.678 cv
560.755 123.801 558.675 124.294 557.218 125.08 cv
556.812 125.3 556.351 124.897 556.513 124.466 cv
557.085 122.945 557.671 121.426 558.272 119.911 cv
558.341 119.738 558.485 119.625 558.669 119.6 cv
558.669 119.6 li
cp
554.987 120.201 mo
555.547 120.094 556.104 119.995 556.665 119.902 cv
556.849 119.871 557.021 119.938 557.138 120.083 cv
557.253 120.229 557.278 120.413 557.208 120.584 cv
556.476 122.358 555.806 124.141 555.187 125.931 cv
555.116 126.135 554.932 126.267 554.716 126.267 cv
553.599 126.267 li
553.438 126.267 553.298 126.198 553.201 126.069 cv
553.104 125.94 553.074 125.788 553.118 125.633 cv
553.596 123.935 554.091 122.239 554.604 120.546 cv
554.658 120.364 554.801 120.236 554.987 120.201 cv
554.987 120.201 li
cp
551.89 120.856 mo
552.267 120.769 552.645 120.684 553.021 120.602 cv
553.199 120.563 553.372 120.618 553.495 120.752 cv
553.618 120.887 553.658 121.063 553.604 121.237 cv
553.124 122.786 552.688 124.338 552.29 125.892 cv
552.231 126.115 552.037 126.267 551.806 126.267 cv
551.307 126.267 li
551.163 126.267 551.04 126.213 550.941 126.108 cv
550.845 126.002 550.798 125.875 550.81 125.732 cv
550.915 124.227 551.127 122.721 551.521 121.216 cv
551.569 121.032 551.706 120.899 551.89 120.856 cv
551.89 120.856 li
cp
557.893 139.092 mo
549.622 139.092 li
562.119 146.597 mo
562.119 147.892 li
562.366 149.813 mo
561.707 149.813 li
561.108 149.813 560.618 150.302 560.618 150.9 cv
560.618 156.506 li
560.618 157.105 561.108 157.595 561.707 157.595 cv
562.366 157.595 li
562.966 157.595 563.454 157.105 563.454 156.506 cv
563.454 150.9 li
563.454 150.302 562.966 149.813 562.366 149.813 cv
562.366 149.813 li
cp
565.641 60.2773 mo
618.136 60.6685 li
618.136 59.6763 mo
618.136 61.6611 li
566.39 61.9312 mo
618.696 61.6587 li
619.979 61.6514 621.863 59.75 619.39 59.7007 cv
571.448 58.7549 li
566.677 58.6611 562.61 58.6611 557.839 58.7549 cv
509.898 59.7007 li
507.423 59.75 509.308 61.6514 510.591 61.6587 cv
562.896 61.9312 li
565.192 114.136 mo
565.192 112.448 li
565.192 112.365 565.124 112.286 565.042 112.298 cv
564.245 112.298 li
564.163 112.286 564.095 112.365 564.095 112.448 cv
564.095 114.136 li
564.644 61.2588 mo
564.644 112.298 li
569.266 114.136 mo
569.266 111.856 li
569.266 111.636 569.444 111.457 569.664 111.457 cv
569.821 111.457 li
570.042 111.457 570.222 111.636 570.222 111.856 cv
570.222 114.136 li
569.743 114.136 mo
569.743 115.737 li
567.223 107.688 mo
572.185 108.404 575.224 111.042 577.807 114.136 cv
565.44 108.695 mo
566.887 108.441 567.325 108.207 567.31 106.84 cv
566.463 62.7051 li
566.39 58.8789 562.897 58.8789 562.825 62.7051 cv
561.978 106.84 li
561.962 108.207 562.401 108.441 563.847 108.695 cv
605.95 121.861 mo
605.95 124.123 li
605.95 124.26 606.063 124.372 606.2 124.372 cv
606.587 124.372 li
606.725 124.372 606.837 124.26 606.837 124.123 cv
606.837 121.861 li
577.612 117.993 mo
611.095 118.176 li
581.355 120.911 mo
610.611 120.975 li
581.714 121.861 mo
610.611 121.861 li
625.248 120.097 mo
725.641 108.414 li
630.806 120.344 mo
630.806 122.606 li
630.806 122.743 630.918 122.855 631.056 122.855 cv
631.442 122.855 li
631.579 122.855 631.692 122.743 631.692 122.606 cv
631.692 120.236 li
653.3 117.671 mo
653.3 119.933 li
653.3 120.07 653.413 120.183 653.55 120.183 cv
653.936 120.183 li
654.073 120.183 654.186 120.07 654.186 119.933 cv
654.186 117.563 li
678.223 114.709 mo
678.223 116.971 li
678.223 117.109 678.335 117.221 678.473 117.221 cv
678.858 117.221 li
678.997 117.221 679.108 117.109 679.108 116.971 cv
679.108 114.602 li
706.241 111.381 mo
706.241 113.642 li
706.241 113.78 706.354 113.892 706.491 113.892 cv
706.876 113.892 li
707.015 113.892 707.126 113.78 707.126 113.642 cv
707.126 111.272 li
626.034 113.161 mo
628.282 115.605 628.037 118.182 626.942 120.803 cv
624.457 117.391 mo
728.392 106.964 li
725.206 109.127 mo
725.206 111.389 li
725.206 111.526 725.318 111.639 725.456 111.639 cv
725.841 111.639 li
725.979 111.639 726.091 111.526 726.091 111.389 cv
726.091 109.019 li
725.69 105.283 mo
725.63 109.077 li
620.181 113.623 mo
728.508 105.061 li
733.136 104.695 730.329 108.518 727.897 108.807 cv
625.282 121 li
615.475 114.136 mo
513.813 114.136 li
620.97 147.833 mo
622.159 147.833 li
623.239 147.833 624.122 148.717 624.122 149.796 cv
624.122 156.494 li
624.122 157.574 623.239 158.457 622.159 158.457 cv
620.97 158.457 li
619.892 158.457 619.008 157.574 619.008 156.494 cv
619.008 149.796 li
619.008 148.717 619.892 147.833 620.97 147.833 cv
620.97 147.833 li
cp
613.962 147.833 mo
615.151 147.833 li
616.229 147.833 617.112 148.717 617.112 149.796 cv
617.112 156.494 li
617.112 157.574 616.229 158.457 615.151 158.457 cv
613.962 158.457 li
612.882 158.457 611.999 157.574 611.999 156.494 cv
611.999 149.796 li
611.999 148.717 612.882 147.833 613.962 147.833 cv
613.962 147.833 li
cp
619.042 112.422 mo
619.042 113.835 li
616.8 112.422 mo
616.8 113.839 li
615.475 114.136 mo
615.475 113.17 li
615.475 112.758 615.811 112.422 616.223 112.422 cv
619.431 112.422 li
619.845 112.422 620.181 112.758 620.181 113.17 cv
620.181 114.076 li
623.373 131.812 mo
625.282 131.812 li
610.611 131.812 mo
612.521 131.812 li
616.892 136.709 mo
619.001 136.709 li
619.22 136.709 619.397 136.531 619.397 136.314 cv
619.397 135.522 li
619.397 135.305 619.22 135.126 619.001 135.126 cv
616.892 135.126 li
616.675 135.126 616.496 135.305 616.496 135.522 cv
616.496 136.314 li
616.496 136.531 616.675 136.709 616.892 136.709 cv
616.892 136.709 li
cp
619.397 136.06 mo
621.55 135.824 623.373 135.032 623.373 133.675 cv
623.373 122.051 li
612.521 122.051 mo
612.521 133.654 li
612.521 134.997 614.345 135.799 616.496 136.049 cv
622.646 122.052 mo
625.282 122.052 li
610.611 122.052 mo
613.249 122.052 li
625.282 121 mo
625.403 111.476 610.611 111.237 610.611 120.996 cv
610.611 121 li
610.611 135.167 li
610.611 139.932 625.282 139.977 625.282 135.19 cv
625.282 121 li
625.282 121 li
cp
617.947 133.708 mo
619.722 133.708 621.161 132.268 621.161 130.493 cv
621.161 128.718 619.722 127.279 617.947 127.279 cv
616.173 127.279 614.733 128.718 614.733 130.493 cv
614.733 132.268 616.173 133.708 617.947 133.708 cv
617.947 133.708 li
cp
617.947 121.968 mo
618.483 121.968 618.919 121.533 618.919 120.996 cv
618.919 120.46 618.483 120.025 617.947 120.025 cv
617.41 120.025 616.976 120.46 616.976 120.996 cv
616.976 121.533 617.41 121.968 617.947 121.968 cv
617.947 121.968 li
cp
617.947 125.811 mo
620.606 125.811 622.762 123.655 622.762 120.996 cv
622.762 118.337 620.606 116.182 617.947 116.182 cv
615.288 116.182 613.132 118.337 613.132 120.996 cv
613.132 123.655 615.288 125.811 617.947 125.811 cv
617.947 125.811 li
cp
579.666 129.636 mo
581.892 129.636 li
572.239 116.923 mo
572.239 117.854 li
572.239 118.033 572.372 118.182 572.55 118.201 cv
573.925 118.352 575.251 118.568 576.544 118.831 cv
577.285 119.356 mo
576.591 119.201 575.903 119.06 575.206 118.937 cv
575.14 118.925 575.076 118.957 575.046 119.017 cv
575.016 119.077 575.027 119.147 575.077 119.193 cv
575.366 119.467 575.514 119.628 575.853 120.011 cv
575.879 120.041 575.914 120.058 575.954 120.061 cv
576.658 120.109 577.396 120.083 578.101 120.083 cv
574.919 119.656 mo
574.62 119.309 574.505 119.225 573.958 118.762 cv
573.935 118.743 573.909 118.731 573.88 118.728 cv
573.487 118.674 573.09 118.626 572.684 118.585 cv
572.229 118.54 572.155 119.255 572.563 119.357 cv
574.315 119.796 li
574.472 119.835 574.624 119.87 574.776 119.901 cv
574.841 119.914 574.903 119.886 574.936 119.83 cv
574.969 119.773 574.962 119.705 574.919 119.656 cv
574.919 119.656 li
cp
570.618 119.6 mo
568.99 119.38 567.356 119.223 565.715 119.136 cv
565.428 119.121 565.188 119.347 565.188 119.634 cv
565.188 123.18 li
565.188 123.447 565.399 123.667 565.667 123.678 cv
568.533 123.801 570.612 124.294 572.07 125.08 cv
572.476 125.3 572.937 124.897 572.773 124.466 cv
572.202 122.945 571.616 121.426 571.015 119.911 cv
570.946 119.738 570.802 119.625 570.618 119.6 cv
570.618 119.6 li
cp
574.299 120.201 mo
573.741 120.094 573.182 119.995 572.622 119.902 cv
572.438 119.871 572.266 119.938 572.15 120.083 cv
572.034 120.229 572.008 120.413 572.079 120.584 cv
572.812 122.358 573.481 124.141 574.101 125.931 cv
574.171 126.135 574.354 126.267 574.572 126.267 cv
575.688 126.267 li
575.85 126.267 575.988 126.198 576.085 126.069 cv
576.184 125.94 576.212 125.788 576.169 125.633 cv
575.692 123.935 575.196 122.239 574.685 120.546 cv
574.628 120.364 574.485 120.236 574.299 120.201 cv
574.299 120.201 li
cp
577.396 120.856 mo
577.021 120.769 576.643 120.684 576.266 120.602 cv
576.087 120.563 575.916 120.618 575.792 120.752 cv
575.668 120.887 575.63 121.063 575.683 121.237 cv
576.163 122.786 576.599 124.338 576.997 125.892 cv
577.055 126.115 577.251 126.267 577.481 126.267 cv
577.981 126.267 li
578.124 126.267 578.247 126.213 578.347 126.108 cv
578.443 126.002 578.488 125.875 578.478 125.732 cv
578.372 124.227 578.161 122.721 577.767 121.216 cv
577.718 121.032 577.581 120.899 577.396 120.856 cv
577.396 120.856 li
cp
569.905 130.119 mo
570.171 130.227 570.473 130.115 570.603 129.859 cv
572.014 127.086 li
572.16 126.798 572.03 126.452 571.731 126.33 cv
567.306 124.523 561.98 124.523 557.555 126.33 cv
557.256 126.452 557.127 126.798 557.274 127.086 cv
558.685 129.859 li
558.813 130.115 559.116 130.227 559.382 130.119 cv
562.208 128.962 567.079 128.962 569.905 130.119 cv
569.905 130.119 li
cp
571.396 139.092 mo
579.666 139.092 li
569.384 131.074 mo
570.905 132.398 571.866 134.348 571.866 136.522 cv
571.866 140.511 568.632 143.745 564.644 143.745 cv
560.655 143.745 557.422 140.511 557.422 136.522 cv
557.422 134.348 558.383 132.398 559.903 131.074 cv
564.644 142.377 mo
567.877 142.377 570.499 139.756 570.499 136.522 cv
570.499 133.289 567.877 130.667 564.644 130.667 cv
561.409 130.667 558.788 133.289 558.788 136.522 cv
558.788 139.756 561.409 142.377 564.644 142.377 cv
564.644 142.377 li
cp
566.129 146.597 mo
566.129 145.415 li
566.129 145.112 565.883 144.866 565.58 144.866 cv
563.706 144.866 li
563.405 144.866 563.157 145.112 563.157 145.415 cv
563.157 146.597 li
567.167 146.597 mo
567.167 147.917 li
569.444 147.833 mo
569.444 146.996 li
569.444 146.776 569.264 146.597 569.044 146.597 cv
560.243 146.597 li
560.023 146.597 559.844 146.776 559.844 146.996 cv
559.844 147.833 li
569.658 147.819 mo
574.468 147.553 579.666 146.355 579.666 140.903 cv
579.666 123.731 li
579.666 119.483 574.539 117.368 570.016 116.329 cv
565.509 115.293 563.54 115.315 559.028 116.386 cv
554.565 117.444 549.622 119.559 549.622 123.731 cv
549.622 140.903 li
549.622 146.358 554.823 147.554 559.635 147.819 cv
562.768 147.993 566.525 147.993 569.658 147.819 cv
569.658 147.819 li
cp
574.929 148.129 mo
578.726 147.6 581.892 146.088 581.892 142.134 cv
581.892 123.246 li
581.892 121.162 580.741 119.379 578.842 118.521 cv
576.526 117.476 573.763 116.519 570.286 115.836 cv
565.778 114.953 563.448 114.958 558.94 115.849 cv
555.491 116.529 552.745 117.481 550.446 118.521 cv
548.546 119.379 547.396 121.162 547.396 123.246 cv
547.396 142.134 li
547.396 146.017 550.448 147.544 554.153 148.099 cv
557.577 148.612 571.452 148.613 574.929 148.129 cv
574.929 148.129 li
cp
565.832 151.527 mo
563.454 151.527 li
565.832 155.715 mo
563.454 155.715 li
566.921 149.813 mo
567.581 149.813 li
568.179 149.813 568.668 150.302 568.668 150.9 cv
568.668 156.506 li
568.668 157.105 568.179 157.595 567.581 157.595 cv
566.921 157.595 li
566.321 157.595 565.832 157.105 565.832 156.506 cv
565.832 150.9 li
565.832 150.302 566.321 149.813 566.921 149.813 cv
566.921 149.813 li
cp
@
511.339 145.202 mo
497.972 145.202 487.135 134.364 487.135 120.996 cv
487.135 107.628 497.972 96.791 511.339 96.791 cv
524.708 96.791 535.545 107.628 535.545 120.996 cv
535.545 134.364 524.708 145.202 511.339 145.202 cv
cp
617.947 145.202 mo
631.315 145.202 642.152 134.364 642.152 120.996 cv
642.152 107.628 631.315 96.791 617.947 96.791 cv
604.579 96.791 593.741 107.628 593.741 120.996 cv
593.741 134.364 604.579 145.202 617.947 145.202 cv
617.947 145.202 li
cp
@
402.5 166.488 mo
728.261 166.488 li
@
403.397 166.488 mo
404.493 164.687 li
404.431 164.646 li
401.494 165.813 li
400.47 166.038 399.447 166.263 398.423 166.488 cv
399.447 166.713 400.47 166.938 401.494 167.164 cv
404.431 168.33 li
404.493 168.3 li
403.397 166.488 li
cp
f
727.363 166.488 mo
726.268 164.687 li
726.329 164.646 li
729.267 165.813 li
730.29 166.038 731.313 166.263 732.337 166.488 cv
731.313 166.713 730.29 166.938 729.267 167.164 cv
726.329 168.33 li
726.268 168.3 li
727.363 166.488 li
cp
f
97.0645 161.504 mo
362.309 161.504 li
@
97.9619 161.504 mo
99.0576 159.703 li
98.9961 159.662 li
96.0586 160.829 li
95.0352 161.054 94.0117 161.279 92.9883 161.504 cv
94.0117 161.73 95.0352 161.955 96.0586 162.18 cv
98.9961 163.347 li
99.0576 163.316 li
97.9619 161.504 li
cp
f
361.411 161.504 mo
360.315 159.703 li
360.377 159.662 li
363.314 160.829 li
364.338 161.054 365.361 161.279 366.385 161.504 cv
365.361 161.73 364.338 161.955 363.314 162.18 cv
360.377 163.347 li
360.315 163.316 li
361.411 161.504 li
cp
f
.75021 .679683 .670222 .90164 cmyk
%%IncludeResource: font ArialMT
/GGLZPG+ArialMT /ArialMT findfont ct_VMDictPut
/GGLZPG+ArialMT*1 
[48{/.notdef}rp /zero /.notdef /two /.notdef /four 3{/.notdef}rp /eight 
199{/.notdef}rp]
GGLZPG+ArialMT nf
GGLZPG+ArialMT*1 [11 0 0 -11 0 0 ]msf
217.846 174.184 mo
(2408)sh
%%IncludeResource: font ArialMT
/GGLZPG+ArialMT*1 
[48{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 
/.notdef /eight /nine 198{/.notdef}rp]
GGLZPG+ArialMT nf
GGLZPG+ArialMT*1 [11 0 0 -11 0 0 ]msf
550.665 176.245 mo
(2926)
[6.11719 6.11719 6.11719 0 ]xsh
595.095 569.469 mo
595.025 569.504 594.908 569.57 594.744 569.665 cv
594.579 569.76 594.371 569.851 594.12 569.938 cv
593.869 570.025 593.587 570.103 593.275 570.171 cv
592.963 570.241 592.625 570.276 592.261 570.276 cv
591.897 570.276 591.555 570.223 591.234 570.12 cv
590.913 570.016 590.632 569.86 590.389 569.652 cv
590.146 569.444 589.956 569.193 589.817 568.898 cv
589.678 568.603 589.609 568.256 589.609 567.858 cv
589.609 557.666 li
587.711 557.666 li
587.711 556.6 li
589.609 556.6 li
589.609 551.971 li
590.909 551.971 li
590.909 556.6 li
594.055 556.6 li
594.055 557.666 li
590.909 557.666 li
590.909 567.545 li
590.909 568.048 591.082 568.425 591.429 568.676 cv
591.775 568.928 592.166 569.053 592.6 569.053 cv
593.136 569.053 593.601 568.962 593.99 568.781 cv
594.38 568.598 594.618 568.482 594.705 568.429 cv
595.095 569.469 li
cp
f
608.433 570.12 mo
607.133 570.12 li
607.133 562.58 li
607.133 559.235 606.015 557.562 603.778 557.562 cv
603.224 557.562 602.682 557.666 602.153 557.874 cv
601.625 558.082 601.131 558.376 600.672 558.757 cv
600.212 559.139 599.809 559.585 599.463 560.096 cv
599.115 560.608 598.855 561.159 598.683 561.748 cv
598.683 570.12 li
597.383 570.12 li
597.383 551.139 li
598.683 551.139 li
598.683 559.824 li
599.237 558.766 600.004 557.925 600.983 557.301 cv
601.963 556.677 603.016 556.366 604.143 556.366 cv
604.888 556.366 605.529 556.504 606.066 556.782 cv
606.604 557.059 607.05 557.458 607.405 557.978 cv
607.761 558.498 608.021 559.126 608.186 559.863 cv
608.35 560.599 608.433 561.427 608.433 562.345 cv
608.433 570.12 li
cp
f
623.408 562.839 mo
623.356 562.042 623.178 561.315 622.875 560.656 cv
622.571 559.998 622.182 559.429 621.705 558.953 cv
621.229 558.476 620.678 558.104 620.054 557.834 cv
619.43 557.566 618.763 557.431 618.052 557.431 cv
617.341 557.431 616.674 557.566 616.05 557.834 cv
615.426 558.104 614.876 558.476 614.399 558.953 cv
613.922 559.429 613.541 560.001 613.255 560.668 cv
612.969 561.336 612.8 562.06 612.748 562.839 cv
623.408 562.839 li
cp
618.104 570.379 mo
617.15 570.379 616.267 570.193 615.452 569.821 cv
614.637 569.448 613.931 568.937 613.333 568.287 cv
612.735 567.636 612.267 566.887 611.929 566.038 cv
611.591 565.189 611.422 564.279 611.422 563.308 cv
611.422 562.355 611.591 561.458 611.929 560.617 cv
612.267 559.776 612.73 559.04 613.32 558.407 cv
613.909 557.774 614.607 557.276 615.413 556.912 cv
616.219 556.547 617.09 556.366 618.026 556.366 cv
618.979 556.366 619.863 556.552 620.678 556.924 cv
621.492 557.297 622.194 557.8 622.784 558.433 cv
623.373 559.066 623.833 559.802 624.162 560.643 cv
624.491 561.484 624.656 562.372 624.656 563.308 cv
624.656 563.395 624.656 563.502 624.656 563.632 cv
624.656 563.762 624.647 563.845 624.63 563.879 cv
612.774 563.879 li
612.826 564.66 613.008 565.383 613.32 566.05 cv
613.632 566.718 614.026 567.294 614.503 567.78 cv
614.979 568.265 615.53 568.647 616.154 568.923 cv
616.778 569.201 617.445 569.339 618.156 569.339 cv
618.624 569.339 619.083 569.275 619.534 569.145 cv
619.984 569.014 620.405 568.837 620.795 568.612 cv
621.186 568.386 621.531 568.114 621.835 567.792 cv
622.138 567.472 622.377 567.122 622.55 566.74 cv
623.694 567.051 li
623.503 567.537 623.222 567.984 622.849 568.391 cv
622.477 568.798 622.043 569.149 621.549 569.444 cv
621.055 569.739 620.513 569.968 619.924 570.132 cv
619.335 570.297 618.729 570.379 618.104 570.379 cv
cp
f
627.23 563.646 mo
627.23 562.45 li
634.719 562.45 li
634.719 563.646 li
627.23 563.646 li
cp
f
644.546 569.209 mo
645.343 569.209 646.071 569.045 646.729 568.715 cv
647.389 568.386 647.956 567.949 648.433 567.403 cv
648.909 566.857 649.282 566.237 649.551 565.543 cv
649.819 564.85 649.954 564.139 649.954 563.412 cv
649.954 562.649 649.828 561.917 649.577 561.214 cv
649.325 560.512 648.97 559.888 648.511 559.342 cv
648.052 558.796 647.506 558.359 646.873 558.03 cv
646.24 557.701 645.543 557.536 644.78 557.536 cv
644.208 557.536 643.671 557.635 643.168 557.834 cv
642.665 558.034 642.201 558.298 641.777 558.627 cv
641.352 558.958 640.971 559.338 640.633 559.772 cv
640.295 560.206 640.013 560.656 639.788 561.124 cv
639.788 565.595 li
639.84 566.098 640.03 566.571 640.36 567.012 cv
640.689 567.455 641.083 567.836 641.543 568.157 cv
642.002 568.478 642.501 568.733 643.038 568.923 cv
643.575 569.115 644.078 569.209 644.546 569.209 cv
cp
644.806 570.379 mo
643.748 570.379 642.761 570.103 641.842 569.547 cv
640.923 568.993 640.204 568.283 639.684 567.416 cv
639.684 570.12 li
638.488 570.12 li
638.488 551.139 li
639.788 551.139 li
639.788 559.538 li
640.429 558.602 641.188 557.839 642.063 557.25 cv
642.938 556.661 643.948 556.366 645.092 556.366 cv
646.045 556.366 646.907 556.57 647.679 556.977 cv
648.45 557.384 649.1 557.921 649.629 558.588 cv
650.157 559.256 650.565 560.01 650.851 560.851 cv
651.137 561.692 651.28 562.545 651.28 563.412 cv
651.28 564.347 651.115 565.236 650.786 566.077 cv
650.456 566.917 650.002 567.654 649.421 568.287 cv
648.84 568.919 648.155 569.426 647.367 569.808 cv
646.578 570.189 645.725 570.379 644.806 570.379 cv
cp
f
654.504 551.139 mo
655.83 551.139 li
655.83 567.442 li
655.83 567.945 655.973 568.343 656.259 568.637 cv
656.545 568.932 656.939 569.08 657.442 569.08 cv
657.633 569.08 657.862 569.058 658.131 569.014 cv
658.399 568.971 658.646 568.907 658.872 568.82 cv
659.132 569.86 li
658.837 569.981 658.473 570.081 658.04 570.159 cv
657.606 570.237 657.234 570.276 656.922 570.276 cv
656.194 570.276 655.609 570.054 655.167 569.613 cv
654.725 569.17 654.504 568.577 654.504 567.832 cv
654.504 551.139 li
cp
f
665.319 570.379 mo
662.442 570.379 661.004 568.386 661.004 564.4 cv
661.004 556.6 li
662.304 556.6 li
662.304 564.217 li
662.304 567.545 663.438 569.209 665.709 569.209 cv
666.281 569.209 666.836 569.11 667.373 568.911 cv
667.91 568.711 668.413 568.434 668.882 568.079 cv
669.35 567.723 669.761 567.294 670.116 566.792 cv
670.472 566.29 670.754 565.735 670.962 565.127 cv
670.962 556.6 li
672.262 556.6 li
672.262 568.299 li
672.262 568.733 672.443 568.95 672.808 568.95 cv
672.808 570.12 li
672.721 570.136 672.643 570.146 672.573 570.146 cv
672.504 570.146 672.452 570.146 672.417 570.146 cv
672.07 570.146 671.763 570.038 671.494 569.821 cv
671.226 569.604 671.092 569.314 671.092 568.95 cv
671.092 566.921 li
670.502 568.013 669.691 568.863 668.66 569.469 cv
667.629 570.077 666.516 570.379 665.319 570.379 cv
cp
f
687.445 562.839 mo
687.394 562.042 687.215 561.315 686.912 560.656 cv
686.608 559.998 686.219 559.429 685.742 558.953 cv
685.266 558.476 684.715 558.104 684.091 557.834 cv
683.467 557.566 682.8 557.431 682.089 557.431 cv
681.378 557.431 680.711 557.566 680.087 557.834 cv
679.463 558.104 678.913 558.476 678.437 558.953 cv
677.959 559.429 677.578 560.001 677.292 560.668 cv
677.006 561.336 676.837 562.06 676.785 562.839 cv
687.445 562.839 li
cp
682.142 570.379 mo
681.188 570.379 680.304 570.193 679.489 569.821 cv
678.674 569.448 677.968 568.937 677.37 568.287 cv
676.772 567.636 676.304 566.887 675.966 566.038 cv
675.628 565.189 675.459 564.279 675.459 563.308 cv
675.459 562.355 675.628 561.458 675.966 560.617 cv
676.304 559.776 676.768 559.04 677.357 558.407 cv
677.946 557.774 678.645 557.276 679.45 556.912 cv
680.256 556.547 681.127 556.366 682.063 556.366 cv
683.017 556.366 683.9 556.552 684.715 556.924 cv
685.529 557.297 686.231 557.8 686.821 558.433 cv
687.41 559.066 687.87 559.802 688.199 560.643 cv
688.528 561.484 688.693 562.372 688.693 563.308 cv
688.693 563.395 688.693 563.502 688.693 563.632 cv
688.693 563.762 688.685 563.845 688.667 563.879 cv
676.812 563.879 li
676.863 564.66 677.045 565.383 677.357 566.05 cv
677.669 566.718 678.063 567.294 678.54 567.78 cv
679.017 568.265 679.567 568.647 680.191 568.923 cv
680.815 569.201 681.482 569.339 682.193 569.339 cv
682.661 569.339 683.12 569.275 683.571 569.145 cv
684.021 569.014 684.442 568.837 684.832 568.612 cv
685.223 568.386 685.568 568.114 685.872 567.792 cv
686.175 567.472 686.414 567.122 686.587 566.74 cv
687.731 567.051 li
687.54 567.537 687.259 567.984 686.886 568.391 cv
686.514 568.798 686.08 569.149 685.586 569.444 cv
685.092 569.739 684.55 569.968 683.961 570.132 cv
683.372 570.297 682.766 570.379 682.142 570.379 cv
cp
f
697.846 569.209 mo
698.625 569.209 699.336 569.045 699.978 568.715 cv
700.618 568.386 701.164 567.949 701.615 567.403 cv
702.066 566.857 702.412 566.233 702.655 565.531 cv
702.897 564.829 703.02 564.114 703.02 563.385 cv
703.02 562.606 702.881 561.865 702.604 561.163 cv
702.326 560.46 701.94 559.841 701.446 559.303 cv
700.952 558.766 700.376 558.337 699.718 558.017 cv
699.059 557.696 698.356 557.536 697.611 557.536 cv
697.144 557.536 696.645 557.635 696.116 557.834 cv
695.588 558.034 695.09 558.302 694.621 558.641 cv
694.153 558.979 693.755 559.365 693.426 559.797 cv
693.096 560.231 692.905 560.691 692.854 561.175 cv
692.854 565.622 li
693.078 566.125 693.364 566.592 693.711 567.026 cv
694.058 567.459 694.448 567.84 694.882 568.169 cv
695.314 568.5 695.782 568.754 696.285 568.937 cv
696.788 569.119 697.308 569.209 697.846 569.209 cv
cp
698.157 570.379 mo
696.996 570.379 695.96 570.072 695.051 569.457 cv
694.141 568.841 693.408 568.091 692.854 567.208 cv
692.854 575.658 li
691.554 575.658 li
691.554 556.6 li
692.749 556.6 li
692.749 559.303 li
693.304 558.437 694.036 557.731 694.946 557.185 cv
695.856 556.638 696.831 556.366 697.871 556.366 cv
698.808 556.366 699.674 556.565 700.472 556.963 cv
701.269 557.363 701.953 557.886 702.525 558.537 cv
703.098 559.187 703.543 559.937 703.864 560.786 cv
704.185 561.635 704.346 562.501 704.346 563.385 cv
704.346 564.322 704.198 565.214 703.903 566.064 cv
703.608 566.914 703.188 567.659 702.643 568.299 cv
702.097 568.941 701.442 569.448 700.68 569.821 cv
699.916 570.193 699.076 570.379 698.157 570.379 cv
cp
f
713.861 557.77 mo
712.648 557.804 711.587 558.165 710.677 558.848 cv
709.767 559.534 709.13 560.473 708.766 561.669 cv
708.766 570.12 li
707.466 570.12 li
707.466 556.6 li
708.714 556.6 li
708.714 559.927 li
709.182 558.974 709.801 558.199 710.572 557.601 cv
711.344 557.002 712.172 556.661 713.056 556.574 cv
713.229 556.556 713.385 556.547 713.523 556.547 cv
713.662 556.547 713.774 556.547 713.861 556.547 cv
713.861 557.77 li
cp
f
716.331 570.12 mo
716.331 556.6 li
717.631 556.6 li
717.631 570.12 li
716.331 570.12 li
cp
716.331 553.532 mo
716.331 551.139 li
717.631 551.139 li
717.631 553.532 li
716.331 553.532 li
cp
f
732.763 570.12 mo
731.463 570.12 li
731.463 562.58 li
731.463 560.829 731.216 559.555 730.722 558.757 cv
730.228 557.96 729.443 557.562 728.368 557.562 cv
727.797 557.562 727.229 557.666 726.666 557.874 cv
726.103 558.082 725.577 558.376 725.093 558.757 cv
724.607 559.139 724.183 559.585 723.818 560.096 cv
723.454 560.608 723.186 561.159 723.013 561.748 cv
723.013 570.12 li
721.713 570.12 li
721.713 556.6 li
722.935 556.6 li
722.935 559.824 li
723.212 559.303 723.554 558.832 723.962 558.407 cv
724.368 557.982 724.828 557.618 725.34 557.315 cv
725.851 557.011 726.393 556.778 726.965 556.613 cv
727.536 556.448 728.126 556.366 728.732 556.366 cv
730.206 556.366 731.246 556.881 731.853 557.913 cv
732.459 558.944 732.763 560.421 732.763 562.345 cv
732.763 570.12 li
cp
f
742.59 569.469 mo
742.521 569.504 742.403 569.57 742.239 569.665 cv
742.074 569.76 741.866 569.851 741.615 569.938 cv
741.364 570.025 741.082 570.103 740.771 570.171 cv
740.458 570.241 740.12 570.276 739.756 570.276 cv
739.393 570.276 739.05 570.223 738.729 570.12 cv
738.408 570.016 738.127 569.86 737.884 569.652 cv
737.642 569.444 737.451 569.193 737.313 568.898 cv
737.173 568.603 737.104 568.256 737.104 567.858 cv
737.104 557.666 li
735.206 557.666 li
735.206 556.6 li
737.104 556.6 li
737.104 551.971 li
738.404 551.971 li
738.404 556.6 li
741.55 556.6 li
741.55 557.666 li
738.404 557.666 li
738.404 567.545 li
738.404 568.048 738.577 568.425 738.924 568.676 cv
739.271 568.928 739.661 569.053 740.095 569.053 cv
740.631 569.053 741.096 568.962 741.485 568.781 cv
741.875 568.598 742.113 568.482 742.2 568.429 cv
742.59 569.469 li
cp
f
749.168 570.379 mo
748.128 570.379 747.131 570.207 746.178 569.86 cv
745.225 569.513 744.393 568.993 743.682 568.299 cv
744.332 567.416 li
745.06 568.075 745.813 568.56 746.594 568.872 cv
747.374 569.184 748.231 569.339 749.168 569.339 cv
750.346 569.339 751.295 569.092 752.015 568.598 cv
752.733 568.105 753.094 567.416 753.094 566.532 cv
753.094 566.116 753.003 565.764 752.82 565.479 cv
752.639 565.193 752.365 564.95 752.002 564.75 cv
751.638 564.551 751.187 564.374 750.649 564.217 cv
750.112 564.062 749.488 563.897 748.777 563.723 cv
748.015 563.55 747.352 563.377 746.789 563.204 cv
746.226 563.031 745.762 562.823 745.397 562.58 cv
745.033 562.337 744.761 562.042 744.578 561.696 cv
744.396 561.349 744.306 560.907 744.306 560.37 cv
744.306 559.694 744.436 559.105 744.695 558.602 cv
744.956 558.099 745.315 557.683 745.774 557.354 cv
746.233 557.025 746.763 556.778 747.36 556.613 cv
747.959 556.448 748.596 556.366 749.271 556.366 cv
750.329 556.366 751.265 556.543 752.08 556.899 cv
752.895 557.254 753.526 557.709 753.978 558.263 cv
753.25 558.965 li
752.799 558.446 752.214 558.055 751.494 557.795 cv
750.775 557.536 750.008 557.406 749.193 557.406 cv
748.69 557.406 748.219 557.458 747.776 557.562 cv
747.335 557.666 746.948 557.831 746.619 558.055 cv
746.29 558.281 746.03 558.572 745.84 558.926 cv
745.648 559.282 745.554 559.703 745.554 560.188 cv
745.554 560.586 745.618 560.907 745.749 561.15 cv
745.879 561.392 746.087 561.6 746.373 561.774 cv
746.658 561.947 747.026 562.098 747.478 562.229 cv
747.928 562.359 748.466 562.501 749.09 562.658 cv
749.938 562.866 750.692 563.065 751.352 563.255 cv
752.01 563.447 752.561 563.68 753.003 563.958 cv
753.444 564.235 753.782 564.565 754.017 564.946 cv
754.251 565.327 754.367 565.813 754.367 566.402 cv
754.367 567.615 753.896 568.582 752.95 569.3 cv
752.006 570.02 750.745 570.379 749.168 570.379 cv
cp
f
757.098 570.12 mo
757.098 567.91 li
758.241 567.91 li
758.241 570.12 li
757.098 570.12 li
cp
f
761.049 563.308 mo
761.049 562.355 761.214 561.453 761.543 560.604 cv
761.872 559.754 762.332 559.018 762.921 558.394 cv
763.51 557.77 764.212 557.276 765.027 556.912 cv
765.842 556.547 766.734 556.366 767.705 556.366 cv
768.936 556.366 770.019 556.643 770.955 557.198 cv
771.891 557.752 772.593 558.524 773.061 559.511 cv
771.787 559.927 li
771.388 559.182 770.82 558.597 770.084 558.172 cv
769.347 557.749 768.537 557.536 767.653 557.536 cv
766.907 557.536 766.214 557.683 765.573 557.978 cv
764.932 558.273 764.373 558.679 763.896 559.2 cv
763.419 559.719 763.042 560.331 762.765 561.033 cv
762.487 561.735 762.349 562.493 762.349 563.308 cv
762.349 564.123 762.492 564.889 762.778 565.609 cv
763.064 566.328 763.445 566.952 763.922 567.481 cv
764.398 568.009 764.962 568.429 765.612 568.742 cv
766.262 569.053 766.951 569.209 767.679 569.209 cv
768.147 569.209 768.61 569.14 769.07 569.001 cv
769.529 568.863 769.954 568.681 770.344 568.456 cv
770.734 568.231 771.072 567.966 771.358 567.663 cv
771.644 567.36 771.839 567.043 771.943 566.713 cv
773.217 567.078 li
773.044 567.545 772.779 567.984 772.424 568.391 cv
772.068 568.798 771.648 569.149 771.163 569.444 cv
770.678 569.739 770.14 569.968 769.551 570.132 cv
768.962 570.297 768.355 570.379 767.731 570.379 cv
766.777 570.379 765.894 570.193 765.079 569.821 cv
764.264 569.448 763.558 568.937 762.96 568.287 cv
762.362 567.636 761.894 566.887 761.556 566.038 cv
761.218 565.189 761.049 564.279 761.049 563.308 cv
cp
f
776.389 563.438 mo
776.389 564.235 776.527 564.985 776.805 565.687 cv
777.082 566.388 777.459 567 777.937 567.52 cv
778.413 568.04 778.972 568.452 779.613 568.754 cv
780.254 569.058 780.939 569.209 781.667 569.209 cv
782.396 569.209 783.08 569.058 783.721 568.754 cv
784.362 568.452 784.926 568.031 785.411 567.494 cv
785.896 566.957 786.277 566.336 786.555 565.634 cv
786.832 564.933 786.971 564.174 786.971 563.36 cv
786.971 562.563 786.832 561.813 786.555 561.111 cv
786.277 560.409 785.896 559.793 785.411 559.264 cv
784.926 558.736 784.366 558.316 783.734 558.003 cv
783.102 557.692 782.421 557.536 781.693 557.536 cv
780.965 557.536 780.28 557.692 779.639 558.003 cv
778.998 558.316 778.438 558.741 777.962 559.278 cv
777.485 559.815 777.104 560.444 776.818 561.163 cv
776.532 561.882 776.389 562.64 776.389 563.438 cv
cp
781.693 570.379 mo
780.739 570.379 779.86 570.193 779.054 569.821 cv
778.248 569.448 777.55 568.941 776.961 568.299 cv
776.372 567.659 775.912 566.914 775.583 566.064 cv
775.254 565.214 775.089 564.322 775.089 563.385 cv
775.089 562.432 775.258 561.531 775.596 560.681 cv
775.934 559.833 776.397 559.087 776.987 558.446 cv
777.576 557.804 778.274 557.297 779.08 556.924 cv
779.886 556.552 780.757 556.366 781.693 556.366 cv
782.629 556.366 783.495 556.552 784.293 556.924 cv
785.09 557.297 785.788 557.804 786.386 558.446 cv
786.984 559.087 787.452 559.833 787.79 560.681 cv
788.128 561.531 788.297 562.432 788.297 563.385 cv
788.297 564.322 788.128 565.214 787.79 566.064 cv
787.452 566.914 786.988 567.659 786.399 568.299 cv
785.81 568.941 785.112 569.448 784.306 569.821 cv
783.5 570.193 782.629 570.379 781.693 570.379 cv
cp
f
811.28 570.12 mo
809.98 570.12 li
809.98 562.58 li
809.98 560.864 809.716 559.598 809.188 558.784 cv
808.659 557.969 807.849 557.562 806.757 557.562 cv
806.202 557.562 805.673 557.666 805.171 557.874 cv
804.668 558.082 804.209 558.373 803.793 558.745 cv
803.377 559.118 803.017 559.559 802.714 560.071 cv
802.41 560.583 802.172 561.15 801.999 561.774 cv
801.999 570.12 li
800.698 570.12 li
800.698 562.58 li
800.698 560.846 800.438 559.577 799.919 558.771 cv
799.398 557.964 798.593 557.562 797.501 557.562 cv
796.945 557.562 796.422 557.662 795.928 557.861 cv
795.434 558.06 794.979 558.346 794.563 558.718 cv
794.146 559.091 793.778 559.534 793.458 560.044 cv
793.137 560.556 792.89 561.124 792.717 561.748 cv
792.717 570.12 li
791.417 570.12 li
791.417 556.6 li
792.639 556.6 li
792.639 559.824 li
793.193 558.732 793.921 557.882 794.822 557.276 cv
795.724 556.669 796.721 556.366 797.813 556.366 cv
798.957 556.366 799.884 556.704 800.595 557.379 cv
801.306 558.055 801.729 558.94 801.869 560.032 cv
803.151 557.587 804.919 556.366 807.173 556.366 cv
808.646 556.366 809.699 556.89 810.332 557.939 cv
810.964 558.988 811.28 560.457 811.28 562.345 cv
811.28 570.12 li
cp
f
gsave
534.329 573.504 mo
534.329 557.913 li
534.329 554.021 li
534.329 554.021 li
534.329 547.242 li
534.329 547.152 534.337 547.067 534.353 546.986 cv
534.353 546.979 534.356 546.973 534.357 546.966 cv
534.373 546.892 534.392 546.821 534.42 546.753 cv
534.463 546.646 534.528 546.545 534.605 546.448 cv
534.634 546.413 534.658 546.376 534.69 546.342 cv
534.721 546.313 534.753 546.286 534.786 546.26 cv
534.788 546.258 534.79 546.256 534.791 546.255 cv
534.793 546.253 534.794 546.252 534.796 546.251 cv
534.896 546.172 535.002 546.11 535.11 546.065 cv
535.255 546.005 535.417 545.975 535.596 545.975 cv
546.891 545.975 li
548.112 545.975 549.24 546.188 550.274 546.616 cv
551.052 546.936 551.78 547.378 552.462 547.942 cv
552.689 548.13 552.911 548.332 553.129 548.546 cv
553.988 549.412 554.632 550.364 555.06 551.399 cv
555.111 551.526 555.16 551.653 555.206 551.783 cv
555.221 551.824 555.233 551.866 555.247 551.907 cv
555.277 551.996 555.307 552.084 555.334 552.174 cv
555.349 552.223 555.361 552.273 555.375 552.322 cv
555.398 552.406 555.422 552.49 555.442 552.575 cv
555.455 552.63 555.467 552.685 555.479 552.742 cv
555.492 552.797 555.506 552.853 555.518 552.909 cv
555.517 552.903 555.515 552.896 555.515 552.89 cv
555.522 552.936 li
555.522 552.936 li
555.522 552.936 li
555.522 552.937 555.522 552.937 555.521 552.937 cv
555.522 552.94 555.522 552.944 555.524 552.948 cv
555.55 553.08 555.573 553.213 555.594 553.348 cv
555.596 553.363 555.599 553.377 555.601 553.392 cv
555.62 553.524 555.636 553.657 555.649 553.791 cv
555.65 553.81 555.653 553.829 555.656 553.849 cv
555.668 553.977 555.678 554.106 555.684 554.235 cv
555.686 554.262 555.688 554.289 555.688 554.315 cv
555.696 554.47 555.7 554.625 555.7 554.784 cv
555.7 555.193 555.67 555.6 555.611 556.004 cv
555.553 556.412 555.462 556.823 555.345 557.241 cv
555.292 557.423 li
555.261 557.532 li
555.267 557.539 li
555.1 558.039 554.887 558.532 554.641 558.998 cv
554.431 559.395 554.197 559.771 553.95 560.109 cv
553.336 560.775 li
552.464 561.718 551.493 562.424 550.424 562.892 cv
549.356 563.36 548.178 563.593 546.891 563.593 cv
545.025 563.593 li
544.406 563.593 li
544.406 564.212 li
544.406 567.894 li
541.874 567.894 li
541.874 562.336 li
541.871 562.327 li
541.869 562.236 li
541.871 562.236 li
541.871 559.015 li
541.871 554.617 li
541.869 553.518 li
541.934 553.516 li
546.891 553.516 li
547.045 553.516 547.182 553.542 547.308 553.583 cv
547.333 553.592 547.362 553.596 547.387 553.606 cv
547.494 553.651 547.598 553.714 547.695 553.794 cv
547.728 553.82 547.759 553.849 547.791 553.879 cv
547.841 553.932 547.884 553.985 547.924 554.041 cv
547.929 554.048 547.936 554.056 547.941 554.064 cv
547.977 554.117 548.009 554.172 548.035 554.227 cv
548.038 554.232 548.041 554.237 548.044 554.242 cv
548.067 554.295 li
548.128 554.443 548.157 554.606 548.157 554.784 cv
548.157 554.966 548.128 555.132 548.068 555.277 cv
548.066 555.277 li
548.006 555.425 547.913 555.564 547.79 555.689 cv
547.668 555.811 547.533 555.902 547.388 555.96 cv
547.241 556.019 547.075 556.05 546.891 556.05 cv
545.025 556.05 li
544.406 556.05 li
544.406 556.669 li
544.406 559.063 li
544.406 560.44 li
544.406 561.06 li
545.025 561.06 li
546.891 561.06 li
547.756 561.06 548.562 560.905 549.305 560.595 cv
550.046 560.288 550.721 559.827 551.327 559.212 cv
551.633 558.908 551.901 558.587 552.131 558.25 cv
552.131 558.25 li
552.358 557.914 552.55 557.561 552.703 557.193 cv
553.012 556.45 553.166 555.646 553.166 554.784 cv
553.166 554.623 553.159 554.463 553.146 554.305 cv
553.145 554.272 553.143 554.239 553.141 554.206 cv
553.127 554.055 553.109 553.907 553.086 553.759 cv
553.08 553.727 553.074 553.695 553.067 553.662 cv
553.047 553.544 553.021 553.429 552.994 553.314 cv
552.983 553.263 552.972 553.213 552.959 553.164 cv
552.919 553.012 552.874 552.863 552.822 552.714 cv
552.822 552.712 552.822 552.712 552.821 552.71 cv
552.801 552.651 552.774 552.592 552.751 552.533 cv
552.526 551.949 552.212 551.395 551.803 550.875 cv
551.801 550.874 li
551.799 550.871 li
551.535 550.542 551.249 550.25 550.943 549.99 cv
550.781 549.852 550.614 549.724 550.44 549.605 cv
550.38 549.564 550.322 549.519 550.26 549.479 cv
550.235 549.464 550.209 549.452 550.185 549.436 cv
549.841 549.224 549.473 549.048 549.083 548.907 cv
548.847 548.821 548.606 548.743 548.354 548.683 cv
548.354 548.681 li
548.238 548.653 548.119 548.629 547.995 548.607 cv
547.991 548.607 547.988 548.606 547.984 548.605 cv
547.916 548.593 547.846 548.585 547.775 548.576 cv
547.717 548.568 547.658 548.558 547.598 548.55 cv
547.573 548.548 547.549 548.548 547.524 548.545 cv
547.278 548.521 547.028 548.508 546.775 548.508 cv
537.481 548.508 li
537.481 548.508 li
537.481 548.508 li
536.862 548.508 li
536.862 549.126 li
536.862 554.302 li
536.862 558.458 li
536.862 571.754 li
536.862 572.373 li
537.481 572.373 li
546.891 572.373 li
548.012 572.373 549.056 572.173 550.022 571.773 cv
550.989 571.375 551.868 570.778 552.661 569.985 cv
553.455 569.194 554.053 568.313 554.451 567.348 cv
554.852 566.38 555.052 565.333 555.052 564.212 cv
555.052 563.651 554.994 563.096 554.877 562.547 cv
554.816 562.257 554.738 561.971 554.644 561.686 cv
555.144 561.13 555.608 560.451 555.998 559.712 cv
556.104 559.512 556.205 559.307 556.299 559.098 cv
556.604 559.654 556.856 560.227 557.053 560.817 cv
557.408 561.884 557.586 563.017 557.586 564.212 cv
557.586 567.169 556.539 569.694 554.448 571.767 cv
554.446 571.77 li
553.404 572.816 552.256 573.602 550.998 574.125 cv
549.744 574.646 548.374 574.906 546.891 574.906 cv
535.596 574.906 li
534.333 574.906 li
534.329 573.504 li
cp
clp
554.403 572.524 mo
553.372 573.305 li
552.216 573.993 li
550.653 574.555 li
549.153 575.055 li
547.091 575.18 li
544.505 575.243 li
544.505 572.149 li
547.919 572.008 li
550.06 571.524 li
551.685 570.555 li
553.341 568.993 li
554.216 567.243 li
554.747 564.774 li
554.637 562.326 li
556.744 559.241 li
557.278 560.274 li
557.685 561.493 li
557.954 563.305 li
557.954 565.993 li
556.997 569.18 li
555.966 570.743 li
554.403 572.524 li
cp
.921141 .654505 .144839 .0133059 cmyk
f
548.41 556.049 mo
544.406 556.077 li
544.406 568.188 li
.671168 .27628 0 0 cmyk
f
544.486 548.743 mo
544.406 545.805 li
535.091 545.805 li
534.466 546.055 li
534.06 546.68 li
534.06 561.06 li
537.122 561.073 li
537.122 548.743 li
544.486 548.743 li
cp
f
548.466 555.524 mo
548.56 554.805 li
548.528 554.18 li
548.028 553.524 li
547.028 553.192 li
541.653 553.192 li
541.653 563.489 li
544.942 563.501 li
544.942 556.368 li
547.028 556.352 li
547.903 556.024 li
548.466 555.524 li
cp
.0650034 .277104 1 0 cmyk
f
541.774 561.07 mo
534.122 561.07 li
534.122 575.149 li
544.505 575.149 li
544.505 563.556 li
541.757 563.556 li
541.774 561.07 li
cp
.163455 .0174258 .987793 0 cmyk
f
553.903 561.055 mo
551.747 563.024 li
548.683 563.857 li
544.416 563.961 li
544.416 563.595 li
541.771 563.6 li
541.812 561.058 li
544.416 561.06 li
544.416 556.18 li
547.497 556.178 li
548.278 555.555 li
548.457 554.96 li
548.028 553.868 li
547.436 553.447 li
544.416 553.461 li
544.416 545.734 li
549.029 545.746 li
551.841 546.774 li
553.685 548.399 li
555.028 550.305 li
556.028 552.211 li
556.247 554.024 li
555.841 557.055 li
555.053 559.15 li
553.903 561.055 li
cp
.0869764 .992676 .984405 .0117189 cmyk
f
grestore
113.636 569.871 mo
.25 569.871 li
.25 555.698 li
113.636 555.698 li
113.636 569.871 li
cp
.697627 .675227 .638575 .739559 cmyk
@
56.9756 569.889 mo
.282227 569.889 li
.282227 555.716 li
56.9756 555.716 li
56.9756 569.889 li
cp
.75021 .679683 .670222 .90164 cmyk
f
113.588 569.889 mo
107.919 569.889 li
107.919 555.716 li
113.588 555.716 li
113.588 569.889 li
cp
.697627 .675227 .638575 .739559 cmyk
@
4.52051 572.159 mo
109.216 572.159 li
@
108.225 573.593 mo
113.646 572.141 li
108.225 570.688 li
108.225 573.593 li
cp
f
5.51123 570.724 mo
.0908203 572.176 li
5.51123 573.629 li
5.51123 570.724 li
cp
f
%%IncludeResource: font ArialMT
/GGLZPG+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight /nine 51{/.notdef}rp /m 146{/.notdef}rp]
GGLZPG+ArialMT nf
GGLZPG+ArialMT*1 [9 0 0 -9 0 0 ]msf
50.2705 579.159 mo
(10.0m)sh
61.2705 553.159 mo
109.216 553.159 li
@
108.225 554.593 mo
113.646 553.141 li
108.225 551.688 li
108.225 554.593 li
cp
f
62.2612 551.724 mo
56.8408 553.176 li
62.2612 554.629 li
62.2612 551.724 li
cp
f
%%IncludeResource: font ArialMT
/GGLZPG+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/five /six /.notdef /eight /nine 51{/.notdef}rp /m 146{/.notdef}rp]
GGLZPG+ArialMT nf
GGLZPG+ArialMT*1 [9 0 0 -9 0 0 ]msf
76.0205 551.034 mo
(5.0m)sh
107.776 569.889 mo
102.107 569.889 li
102.107 555.716 li
107.776 555.716 li
107.776 569.889 li
cp
f
102.276 569.889 mo
96.6069 569.889 li
96.6069 555.716 li
102.276 555.716 li
102.276 569.889 li
cp
@
96.4634 569.889 mo
90.7944 569.889 li
90.7944 555.716 li
96.4634 555.716 li
96.4634 569.889 li
cp
f
90.7759 569.889 mo
85.1069 569.889 li
85.1069 555.716 li
90.7759 555.716 li
90.7759 569.889 li
cp
@
GGLZPG+ArialMT*1 [0 -3.32761 -3.32761 0 0 0 ]msf
88.7578 567.064 mo
(0.5m)
[-1.85059 -.924316 -1.85059 0 ]ysh
87.2964 554.471 mo
88.6616 554.471 li
@
88.1343 555.235 mo
91.0205 554.461 li
88.1343 553.688 li
88.1343 555.235 li
cp
f
87.8242 553.708 mo
84.9375 554.481 li
87.8242 555.254 li
87.8242 553.708 li
cp
f
0 0 0 0 cmyk
%%IncludeResource: font ArialMT
/GGLZPG+ArialMT*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/.notdef /four /five /six /.notdef /eight /nine /colon 
24{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 
6{/.notdef}rp /l /m 146{/.notdef}rp]
GGLZPG+ArialMT nf
GGLZPG+ArialMT*1 [9 0 0 -9 0 0 ]msf
4.47656 565.78 mo
(Sca)sh
19.9844 565.78 mo
(le: 1:250)
[2 5.00586 2.5 2.5 5.00586 2.5 5.00586 5.00586 0 ]xsh
.75021 .679683 .670222 .90164 cmyk
%%IncludeResource: font ArialMT
/GGLZPG+ArialMT*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/.notdef /four /five /six /.notdef /eight /nine /colon 
6{/.notdef}rp /A 17{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n 
3{/.notdef}rp /r /s /t /u 138{/.notdef}rp]
GGLZPG+ArialMT nf
GGLZPG+ArialMT*1 [9 0 0 -9 0 0 ]msf
125.646 569.786 mo
(All measurements in centimeters.)sh
%%IncludeResource: font ArialMT
/GGLZPG+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef 
/zero /one /two /.notdef /four /five /six /.notdef 
/eight /nine /colon 6{/.notdef}rp /A /B /C /D 
3{/.notdef}rp /H 10{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c 
/d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n /o 2{/.notdef}rp /r /s /t /u /v 
137{/.notdef}rp]
GGLZPG+ArialMT nf
GGLZPG+ArialMT*1 [18 0 0 -18 0 0 ]msf
.421875 15.4468 mo
(de Havilland Canada DHC5 Buf)sh
253.239 15.4468 mo
(falo \(1964\))sh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/GGLZPG+ArialMT*1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.3
%%For: (Onno) ()
%%Title: (05874.eps)
%%CreationDate: 9/13/2017 6:01 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4fPdPcD8pN>R^31U?WQo.HN/OC)/JV:rJ8KdV<C]b.gLi'^bqnr6sVsZ$+9?W]rp[73mqWt\phOE0,23pk2W_uF"F_cDM
%3bW^BL[2iB<[qMn=2HYmjLMGW4Lt1/X]pjuY<(_.7+FE@,G_E@/3n5U%C9;:T"(eCTTO5(fK/DD#*Tju@B21*f8%&uBY76Bs(i/p
%c^KX]9=+3'e*@HmYH7JeX^aTAeo3=:['`c?fmC0js73hOBm89DI]mUhY?TghB59Kl2^]>G%2b&=Ej`*k<$,,"c]"c/\,-<qFs[mf
%'pXI5\*D;r5HUQ<-c8-G,da#[Bq@fd+\ndXNTifp#)YVJTunm,05Ai-G+NVQZ7(S[om%7X:^Q3tC?#2`VXEWo,a^B`@@GEp(ARO]
%-E&&]**&Ql3fEf$JB@p3KMYS^[F<7%?JCS0fbRhamGk7m@<XgO2(.5=i%sPsD/1<IDWdfE57iZb`9G#sqQ[?R3G>#X-;mj?84=UJ
%o+e6Nk6/knF(soNaT!-@Qu?Eq!;kYOM#S43c@3XnW"N/EWTV6Y%Fbt]!Zb5Q76a9h6[5I0+EQ=/nAS_3J'r+-3m?!/pfCIYJCl3*
%bMR,Vi[mnD#AH'B8R@7hnk)n;RLKCu8t%,-'r](3.+l<+>IX5$9'(&jg$Xe-YLZ1,h<r%6-aP)"Af4<%e/G/1]DDBh[+?2/*d#6\
%+_/%kc*Lije$Bl-[+/qI$[_j7^F$p+F*-'&cm0\+:,+M'B4-49IbJ]sIs*M!_nad-F4(rm%Gu,oA"):09lOR4.^_"2P&,qR6:@]J
%@MD[::4bb&-Ss8LE"mt7C^k@u7o:8(0o1/A"jOfQ;>7:V=J70Dc-e_X/4G]@P`*d3I5L5tM`FE$0U"`V]kZ^.5I^YOSKO@p-Co^a
%;]'qb5P&K6:jod17ViRgojJr[1re-iRLoXjJ%ag7q6g"7^JPT@-eEhCGjUhW?iG%+S92bM@]r_Pp%%(?q-/U[P:^^ENeWfQ%_NMQ
%c#IClJ;16h&@B,((^\"Gagb!o0=RF+LRjS'LONTJF[sA;#JJD)b9rk.jCid!D@YCD]<14/3*8@,mIn'V?KY_%]X(`I'.%2lT^qk6
%;>=haWoTuLMu9r39'Bfr1MA_f8'@Ges"ip5g7;f<%IHp*3?lk`4J&QP1(QIimGXj2ii63+EObq\h<g0"a5b>5pnZReEp.&EFZLF`
%#-FNi75++jL<#k$IZl*FW3^')I^q<uq.[tk[1>=sm[uY7ltNh#o^B5W]tnZnI.[$kW&%NsZ/D@8mH&f'Kk:p"BonWVHDb8qGrf9'
%r&u*m'%+;.dIQ@3eEOJ]c.;-TZeRda1:GD/]1(c+V6rAODQhZfP(nT5#;rI;*4J[ignH@;O$?C/,KbY"8'TnAe7$.4--W.G)Y4%G
%<Ke>:hItJn^,=O>)EP*-gK^nN-7j(Up>o#o9VlQOff*3ND+V,e<G["r[U#?HajK[#Y)nOoOUO=7@E6Qq,Al.Sq>)B#]-k:ab<+`*
%GiH-uctgc$g<9EJja&REmMua,`%<!5N<dC:j5m.;gpI#oHF]MCFjh)RA9'Lgb:QAINb%TLl('"S("I="\rs'DWOcCN?'hEUj;:FA
%6V0JKD&R^<L*hc#fC&Xh"X(`CQ)pl]dqPdEV_6:kq0BiqphA]&^[,fpLf@0amYtqG=K+D17PY>V$_#=+CC#W0V=N.b3JFd1ES4gE
%p,A-4HQTD1#pcurrlX*]['TMuUgmpj(]K\7HU/pKn>pna_S9Yh?h@+Xa%)o`l,iYW@!M(*\QX?ihl49QZmI'.rmb^aG4r]"QhecD
%X%u\S%HHB.^:Q5PB(oj8Ooe37O#e$OQ1FKIqY(!i?6qgM+f+68"UM\"poW!aSp1E#KQs`l[Q-CZ9&VFLbs?DMi?)=XN@p(](JQ)V
%;0me!WE>;k-U]6*`+c*K\0-@se!6qJ:6%lA-Aap0V9@Ji`X@$V,'SP1pP6HM\F0ds&bl*YXWn]DfGR498#PCBb2.*i.gR:)bYQ2#
%O!^%QDc;Kc4KAP[naB\,]h)B48[+DRDJN;K1OaN_SWie?>h!5_c`48JPH4%dNk\LUQAK9<-K00o[(\6=mdJCll\NL&reT.<c6[ND
%_gB`NO;1XG4mc!*`HVjh-a:rJ]1:*Z^du#tV(Bbh=<7;C?tnlRV'-9.8"&Q(rb+]#HTZd0W78!K&ld`dIdNJ#;WoU<'7@3rf=R[M
%p4PVX-g^S";L)==pc5:[.Gqa=f7$jp<>L`47A`JMnt<#(q!%t4iAB=<_`C<q\1$DXfILK_(.g#`iQi_t2fL4pU(t`bB1Z.>4Xi<7
%>A+B#7:A:Q6Y$RWb-PlHTDiA6MBuJ!Kb9bH/PNN,jV".R=X\Lt"3]2l.=E21R&lb<Z*nmDVS%om:Qd]:!2Mq\Sk,Dt*_-X%OVC8k
%s&r<NT/OccXAUZN=*5/?9">8>)WkI;8oRL*Gt_d\8^S:;,4I]?e#m=4>,DSA#M4EM9l0NgPaTW_[fmGQ3Vll]!Chnq;+,nIKG:Lb
%k,[TF*R]8&P>V&b,_BeUN6Oc6GC/.HLZUC,l\D\dT6>\/<u-oNW[r);!q)uCr8V<IRQs(mBrLNDRf2>9KB@WdoB;Fg^TgA-c5,Mg
%;nN2#iQno=Ek!1I]sZ=Gk+J8=s5ojLGOjhc)gi0[T4G<kY535or-cB<5k)><?qB9rq0B=(61^Fe]D[q"a8KmXh"TmBC]9_>O-K+e
%<3YRa7%DCTBlj&'X!t7is%^g1'(pH`Nm@RRe6#"Y8XAb<Ygr,LBg]'"&J\Q5,Qc<8KJI6WB4oti1gA"M520(P>AoP6X\r0g%pYVR
%i\/!9O\(LPI)/**),=L\>%G++ahe/!#n:Suk77h$pXG!%1*Sgh'cN/oY:Q:)pF9FYN7Nn6BkF^J`N&VX[(*UV>XGt/d8dd928(Et
%r0C^FNV[V@-@Omd/sJ0l74a"prf8I_!XceQN`Pa"$kr>pX$d,uWmEesA9#n4rAY9DO>'ES-*D`_i$WrpI%J/<iACGA`paPLjlZ6G
%Zh[g<Yg[Lif/(s,:S6R2qkMVLYPK!0FoIH/r^U/l,H_!Y[+8q.lAYIDF_#Y*X&5Gl/?h#1_u#m*9G0Gd7n3M'U]1E6*WCJ?o`'rY
%IDmupVjWikd"%#76_(,TEC<3t']pF:8$"a?U!en(T(K1/hY`!8J(Elks!k#HVo7EkYh](Neu\m:r;84lgFMsfIsTtK_;AnZrhE]r
%f.8!C([+nN<^@jJD.sh4-F>,/Z9<?94Wo/'q+&!l8%JKjL%O7n\,&Tcs48s`rrk_Me8`@b3!`ILaH;"udPR"f<bH->ZHW>Vo^I>u
%ofo2Ih\F\h5GIur;>lQSr\sK6%)*BGkWI;a+\Rt`KQif<d%rNeau%<+4:0uW$l(u),I.92f`-uMrb,'gI/\>!'E/6mIBu6[_Xg,7
%3'_%rd.Y=T/rt(!dHl!&#i8&40D<e]b76^-6`5u00j3B3$fmgA(\OLK1l;C,Zq26KOXZ"B/BF5UH(9S!8=.YE8Z@1^G-?;C9?N39
%(s/JW/>1S"'colN`DP/XKrCrMFc7P(kX^XuR6":/eM23t9IdRs4j'\DUsNW8"&l,@9VIfCMaNhQQ@U_>8n*LgkpQr4fctPog2G<c
%Tro3t"Wt8%rc<Wc%3!O?4?:T$P2n9QO$lkFc^@&%!^3^kdqF)GCnj")E`eh8,U0B:Seu_HXRU\jm[Wn?]uo+PrSE&;/2\f=;0W%^
%ihG(kCSObus(F-:;(Z+cekrp.*d%Zc0n/h/r0\8HG]U>!j0-3T8)nqA.nSX8$&MR6hjV5WQP_rGcUg)=6#/jc.Q6DJIhSgT]6rZu
%]F(KkUq<2>F/I%oaQ4dVr*+9/N1TX0?Ku3BfK/H-YLH.5oWMe_s-sYZ`ItbT=Eb>gH_m-MQ-oP;+8e>V'NT[p\l_5O^B]stT.N7a
%r\kC<s._-V12]GW`>V@#k3AK5Iq%:(;>It.HiCXSo(_/;^B&ias$2a.EE(r4B'_l*kN6U%"b$B`gR]BjC!]Ss^P1ku4"Z8hED2\K
%AK<nui"Z-TH>&NA/\6be62K$drGf7@qR>]&=hIaNe6LS.T3(=0cbE&d6L.`9[m0c-$)nf%cG;p:ppa5rc=Zq-BG<!IGDE)k<ep-1
%qKo.T[*nn)g<o@_RVgK\rdr/Ns)DOd[#Mua8j):5?CX$D@OIC8RVcic3R<#d3Bj%+']YD9A3+#&f<m0!g<%l/kuJ7Z(oT=YNJb0p
%[O^j]<F.P&gI_-HZOSF=(#+;^nUN19iT[.Y.&VtV9%t?sEViUE+22F&_I5KJ?9)_kF@MO8[t!+A?g*_j5a'6f3>eAFja*92;7B9A
%s4*Os.jSqk-Mt^CW*O+oH]\u?.#G6N'3-5kSK$-QdiON1NeoA_4E?1e<[q/5-Op#4>aj5^_ki3J2N['a`@e._pXPachjWT]&j<q%
%HnjoF4/:[oQ+bHb'0]aZh!asJPFofjg*<V+`VC)@!i&A_3B0.?"Wf=O-]V.'ie,C)>bFInE+1=9rmhsX^h5Yk>D8\X`9b)-)d`nL
%fl-SQK@\`O40)XkXpjaSUuJq@S8&:<53n/ggpE.^aGLA.AnBUTSXe'N\3,ZoJbFE>*)*pYR_hdCr\nnpH^Ag3\FEWO?^lO=$Aidh
%g/lY98r81A#(`X/?U$B@_7jC,0lJGo(=.\+25g_N9K]IpDk6TJFpQr$gMl')A9=CgS6B]P42&\Z$"\#`>Kn3YC<QurYKSWl2XXc&
%hC,5nJ)>lQMQ/>oAujNHTt(:^s,RM)KGo.`g9SJ+2q=0LH[:CAC(PaAbWO_<Ya#%[XOHU/p-!Tp4C@+.W'Z[D'&N<V$=Y"a<<GT'
%ZIb^u>[e^:XIC9F.eW:)g)W!5];7e(c:bTIYYj\VA`km*8!`7+T?;IoqM%p_GG[gGjhqKVRkJsb"LX?f13,sS=/;0.^78TmFQZIo
%&m^W1VSm2;L&Rf.(`%/#dN(#s&''(Na-Bc;T_3?!/2)JpmT31Ti6u^p38LepktlN/f=N<]ppb[V:E;SN82i?\W'fAYGL4:U,tVf^
%KMli&WL-FnQdS+I)k4lhj-XBlKRP]3`uQZF:[VIWk\*G>XaZO-lZA[WT@GD`A=(eHs5ui3o26&G8!fBW^H:[=Ol;gQcqf.3fKZO%
%T^B+A#7"6`]WC+5DL,Ok3'NOT<ZfN(T8kuYf[oZ$O:tsI_Q7_]06DF=4NT:XWpuldD+e"oerEG1b=-H8c8,SU8:/eQPL7_r>eLk"
%m7U(e078n&erZJnN(gg@#Yg.L]ls0A1=$k(9'CW/deqm2-+?^<<R3>&Md,,>\5^nPcDo"*BdZ9KDQ5h0[,dA$O>K\4kp>ReHoX\:
%7ZtAhg&G4.(m2ru3eu7IIkX7;/@"4lrQ\2=,2WQXdEEGO/l-[JSaNSH5Vfdd/eJZ^cFA3\Qt=IcPa_Khd;`T_S8rl$m<,RpYW3IB
%FfC0MO2op+pI8.Vb=e#*L'&@f#n6B_qLPG[dG;iKe/'DP[B%2B(Y;`TL$[$J#GdP'%7gH(9Rfem?K*UMfi%?KojSCfM<pgD(n@(3
%9Nle`Q$-lYh_+0X\9658rObBp8YXdDHm(.AU.Mgqnjo;"9,b$@oAg8>0F9Dt!3]HE^?=`IOc3g\(V+`2"*640h;6)[+>%U2UcU$&
%:c2/60#An$To`$kU'k#[b7_3P_ir9l5^2RXJok/,OV^'&Bta"glo.GpM[$De89cZ0'iIj*IU/8l?YZa:!I69-6L(9k=%M\eAC`k(
%(egsshBgTG&tOskL1f="e*4lMqef0KZUS_(h>OHsO[26(p:F.d0,jJ&FjN-b_YJ1k.[W=C>Ub(U%j<)J4bHC"l\-ajkrLe.c;DIK
%&aj<#>XU0>l:g,g(f:):HH[pY.Tnf*pA],1/c3SuH*`ZncKOqp3[a1N//)Dl6F/e#5,DCl>9joDdNqJ!_7MZ1S8$6R/UpOmL*s*]
%,S$^h?Sq\NU4%>Fho&L69/I3c50$`,0f[k&l(E/2ZUc;#&TJ48]4IM@3>f7XL's/MC-@Z0l,f'uf@A\lj_\YF;BM&>hQD6pgO6^*
%imW;:\*,q)%2PtIrKYXmRS?pFa.]C<&+GMF+._8HcKLqMRT:!&m_W"rdoSY2O%-W[S?h)`BQ4tecON_rfN\lqHuR7]Ej:8q9WiDA
%inF4WPtAEbeE6-D9MsfF3H2:WU[;sj\'?e?_S&m;Edh9UgR.lJh<UX&69ZAhr[LP]rI(rUp!rJ8G]dEkJdSY>:Lk-6lbr:/JS9sf
%2B3-08#'M-ZSDB++@0AtdVc(8#R/;`!.<5m:^oB%]m)9uFe(9L;f_np4caYF_"I/URO9K%7aM<EXd`=Q`pt=U`[5>:bPGe!RSmm0
%_rE6`rMj\pSj1ja8%1/&*/bl$6F^?"#gZ6BWcRqD$I]`QmZ"f+5OI7_&b033=3sa'3Yg[<WJo*f+I1iF3ePSbq&:0a3N.I$k;f0*
%%q(PmF,V3c*R>[/DJ-@\Gs1;Al0haFPm[LN4KY+bG>s<L8k6C_Rj!J,iXf=<+SdMD"Bhg&`NF^l%7"J[6p[qMV9=nYAu4+DHp=k@
%9Pd-K/Gi]4e(,*L]KOnT%mX!Ze84EFnNNdM%hFO%FiTcr_(grh<R7*3QBA0-eu3q9q6WdS[;cFX@JI9EB$m'#LLdR3S9r/3F:aqk
%3T@5IDPPST0+obH','@OD@<$8gc!N:nZuQc]2-%k/($cGcCVNBm[Nb0k1_1V^Vc+J]`MhOAbq:b'_>sU<YWRL1)1$TI@nNuH-D\W
%TDgaq3EGYA]RJVG`*dVmL8608B(+rj^HZCTHZ"hR7-kPgAo=`sl3PX`VV.R0`/)oS4Fm1&]WM0k1U*OBb&Qt"60X:2dUTQja[OIC
%RH[U85XMSu218jn7qpdBLWl*$MdM/sc`HkBR&Nctfi.R6c<\.5IhDKhWA\(R1E?csZE_StM_^L)nG@0Hr9?'+`jn*XOf-KeOB7@\
%piH*D,!<CKO_0ZuT.p)<A1RU244@81C8V41bL<=90P6g>k=j2XKM*rA%2'ACq-BTGrp[B]UPRN*UZ$ZC,4Do;4!K-c:"-(gcuj\R
%Ir;>\C2+HRUMeBh8ltEI(#qd/nI8beIcqt)BB0:;.H>,6GH('qQa8<AeeDb&Q!BG*#><,)6&UuS1C_'[--Lot/';U-edDS_mT&DJ
%A=8R&B5lR-?DuhG!Y4ms4@;+LWUjZ1DdTI8@ntIZ*!bLOo2aQ+or^0@CV09,m7_AYiS<Q?pU?<@41@F,XM2Atk?dc9ifj02cI2RC
%kY_@nj`#2;ak$.(\NBJ%ZT>h"?U*Ds2ceL95C2fMH+;;tFQ_?2kd6UmD+;jW>@E]M#_MTdpPm)0i9&b,0@d[MX,A@c[IM^ZRAsE%
%f=4#MWLcf7%j/Q&XK<h?h0ShpK@WN"HKXck?&eQ)W\E8]]![]MGVn+Krcp[&Yd@Nu%iaQ_p?q!TiIS^_]![[UI(TBkG6dS9C`ERR
%p1K\71X-HY2_RCEWpS?;DpGQ::Ufn?D=r/>o@h?sg0`K7]QLeCpS`L*eM+\F^6(h:3;ED0?14oghQ7d!+&2#jl%cK2O`.]f>%-I3
%g?QR;Dl"RkoXOn^nB6nWh>X[ah;5l[^6F&\=kd5n0p"l;CUR$<Rf*'<6>Np(?I%)^P-=U\CU`<X$gZ+T^FcP;n%@MWG>@TjGk:"9
%dCiS]H&PPTL!>7iO]3>*bKY.Y^%lNAqrLCr]m&f$SYa`NVpegZp\#,>@".M"P9W1nWUIOr]N,uYmdq=`5J+Cpp-7C%VWm[H+Kg]-
%gYp$>9'D.KD*/]N+j-X*3pGBYBWlODb=ro9nCdcNV8^`+07D675.kgh>,uSFhKZZCQn)F"Yd+.(hft76LL1fthm>VN7/Jo,F1Dec
%\#;q1o\CH'QB1mEIQ7D-*ipI0lQsHADq^0nr-[PX`c?.np=Anj%jP&Kn\Z.qKp,=j_>^Xm$%H*&YdJ40XhNV=.d?8WS):$Kk^Bg4
%*;hEkGjo*^1"pksGi'5-pAX?jp@m`WGVi]aWP"dEAZMM(lVCb!4r6p!kO-)OW_UEu]"YoKQ,u`=j2497d,/'8]oDIg)[FP^Ir%$4
%GAaSLrRW^o(Ur87Y3j`j?Yg_KG(6Ulpq21p4P,ekHXDK"+*@Ctk1=S2c$Jr`[^3C3rU&3_pUabGGL4*I\5bc')\NT%HqVpim9rk#
%[elj"['nGnqfHU`^AV$0@qdMn!%]faWP2V^pnmjS](A7#c*_nFP@&*P:F;uP4#]T5NtQUihMn\mU3:5TmF6,S_<-OHXi'AWlGJTh
%ldK%]I'EHaF_cVSjR2$EqCqq)4^M^ZqL`Pg6eLS\dJ/sjK\lL"HI@%;qt_RK^0+`$\bBrVmbhfe(9HqPLurW)=d>;;.ABUFjdiNa
%gF)Uc,Q6nPF.lIe.eo:k_>>A`S))=I(j1gM=8t1$m`'YQn7Zm5hJ9fR<D,PEDl:Y7`T,gE;W5ASg0@h:cY!\[Ib]3PVeTsnce8aP
%C`_XVl](YZZeESo]l]=lV[#&(2PVC@PWV%N5*Hdeo.PFa[PlWjB]6e&Dn*uakSj,pFg/9aU!e(s[.B#`:GmOtAs$lb=T3JaGQ%E7
%h-]U[h@+1H8+1=n),D&R!@O@p_roFumA9GbmFB&#*Qn*Op:=RD*#[-a^N"5UZ)74)O$k72^3TJ*8p%)ll0#a)C[LWj437;;)uIb)
%gY1stX`6AWmFnVSO1jn,DeYK5>HofRRNfT;8[,dT4Eo60>(%+1H(t;UX1M)u/@;j1U,reW:H.J)s*.bL4B'"HU$!ce+Z6L1HR;&P
%D;j@FpjhFLl\8RR:O=1!]AK40c*)E[gY1rQHBjY@HUI@sEI0kHE;HuNHb,OX^N*f)1d_%SUXmS)))?]90#(bA\5OKFl-ndSi5t'?
%>4?X:^I`q/lbV&S?'A&[hVZZDe%5j<2:m4,4C%%hW5_We1c_2R*S,)Qn+:<XIj(4RG$BS5,c.&J;7_OdkgT888R`=)Qtfk.Oif>5
%X6FOrQf0gZj`kh$hD!3:2PG7u$8mF9Oe-TUB\*+XY$e+`mMArWm*epSNLm;\Z"g4)j[jAS54l-FRI%"QWn.dGcc;JM9s0!6bF0a<
%l:[0D6IHBgT%d/We-b30Rdt.:*oB1D(fMYV<"iPeAEcNW2<d=hYbWaG7+)fWKkZp&;"`L2SCa72$k)eq51q.)YGJG\%3D![f]*%i
%pi*q*pT*5=Zh36!\=-RmP3t([/4I3X,OnI=14shb2Dct@2ViAqA1D\4Pag^X<pB+o#GkU$T%*W)J]sTmaN?k#j?o&mSqo+:b*\TR
%CmYGkX)_M'c.F/TT-a6.9Z'hZ-_9igc&I178`o&ArSM'R*Z!45+WA[@e3:'[lmM363[0!co;Sf)hQ?1YGrjS]]@5FX45_7Pf8mR&
%T[iY<Z1[M;qj";LGH4isK$O?fAi5+8S#"AH*3[&hnbTKHrUP)JZZZ3+[]F>;NhIdQc8Trp?"DnGRldk*aqbLHFlRFTrh8P/0=L%.
%'oQD?*Xcke]t#qcf8i[6IFrf@oZ+Q#V=h$_g8i'0cJ%]Qd6<fLhHE,p=0o]>`QIeFpN:WCgX^??fB$B&5E_`:k%(g+\@9,R(S`;&
%ZjbR\%lZOn2]ihc(Fr<X:@j&q7Q^L3m<I3QY??tc$3N9VD%."DD*(\3]7dIA%@<^#qG]i"TKnVlY<Mk3`lf)J(KR4.6f[88QA\`J
%*MY6\F(/7</EAJ)Ka!\5Wh[UH*+%M`2JU^Q-gRkm(8NF;qQD\;f\X%PfAfXG:Y57[WaU@+rT2bR]B_+gI@d[C*'AK\VDCd)RjuY\
%&+n?9`qK/6=\oT_#Dd#ITJh%b^?INKC-/Vk'&1kl'cnr1Eh:N!,^l?Y>rN98XnVJH8%&l*R_h0HgXONo`hVQu*L^Uo=5j-ldAOt*
%UQ]'Zo6fM'o"84FiuB"Moo9VBO(u;?[0=^%p`jUgHFOWj]tU'WF*@"iLZilN>iH`Z4riIY++:`767r35e[!!R.Wr6..Bn:!Ck3"[
%(C,ed-nDM@^8rDHpTGAt31^X]gAP?.TmBVBV"OT8lK5"E.ja$Jo(h^5Xj+[2VIt!$mq9LEM`6teAne=9AGtVJ[276gqu1ZceC40$
%C+l4J^4AjnIsCiR2Imlc%asCdr>.c[UtU/PhW]urWj^AtWqO3=C9#9nk187"FS%UsH1pqTf5NBfGjcR[^j9s]f=/H1G>?^2Y:$76
%6+H]9I(_?H+2?=rHV^!`%suEZC:>P@g?.DKkgq2C\*hNp-7$1ZOo_rB*mes#C2</$r:M<,2-sMCs"[]'qf:Zhb0e(DQWD$%40uOH
%X3\::*\V@m);Y7'3:/9S>i0oO8_m&mQ$0QL*9l0o?4tq(F4j6I$U<ale(AFBVD253_h38Zgstb?=SbQ\`TE6X<0:8O#'f7D]M=Bq
%S]5[EW;a0E8QN^pqK#2Yq=cNh[AWK2[Z'>HVpF*:m=)c_=`Ee11?T_`)th61A8tck?@PcdLOj^)hVM<aSStu!L/a4@/?efJY<j^\
%GJLcq<?lWMJ";#Er;,O+7r&%^osGn-?fp,VG3$/oA?`dnMhmL6@gtKSggC'-/Sd6q^H]#\DjKn4+V^mImB`#4np2o[e(&]LZh\0F
%s!qe7pE4emju6KP_5CHlQbOeCpbifa^sjI`=Bg4KqY%pP^\`"V]m3\]]tF7%YkDgM@12\het^RUqJk./q$N'30_^nm[Qc\<63DMP
%8Oumcm`oQr[WhW2mafu/\)2*D&BWLMg!.Kq-Zem#XR[''JCTRq>K=Z"q60N&DXJRjW&:8[p!n;.iN>B6f/nrCak-2=CN")c-EcV<
%%J/P$4_\`K-sTi#eYU]4GHM2*+!7VR1>J&9IbeYo%h;XOG@!HX?#R!V[IO7dh-$:!V,Ib$c+VH@O.S$sp#^/g]QJ.*.`oBLQhb.b
%]<+1[][ttE*.A/b9WG>*X0t2Vl;-j)6+ZM[fUUos)e3&USfNZ6o2*2K<.A5(o5KRQbhgD(qF=G_J%VM<?Mi]\NM`YI8ec`4)ch7a
%AB$T.BqdfAqYo',a/^/mL+3mJ1QYs]>i.NnrALa$J%_h;^QY5Bi5,,+(*iA%JG45AXcr\9_/`Z4=kS26G&R>t=3F=m<p/%'9DL"^
%oNEjFgjZtWOFLKkr6UkeSg%nJI<9+_FFc+6CVup<]-(:FAXjOT?U#:MVe/*Ip/pFmI3$YnP5Mhu\Q;Gq=0,2Hh)KX>`Zd!4_mK1.
%NNINooAN_umI8ZdS+jhf>/#AhS"6?up\W[6^$Xt5lGgbX%a!fO^TO]Om2W9?-_mm3b+)>RAi,"(a,>3,`R.]_.f*M_Pgr:;BDmMh
%l(c:$Dgm)DpYLm19N#qQ$lAq:ifW]=fA7M6SU,uScqdCqWit,LCFd`G++'G<rRoZ7D@PlClc.3(+12AY&aOjK%nf9/Vmh''q=;dn
%]9E"(H+\40nbC:P]Wnu][CJ>Jo@@^:aS.pMq`>><=f-K?.kPDS+'=**(XA/i95]k%\$s"iYW!bQ0KA9C;fR0^q:hZK>M#LMNGa-3
%C`EjReJWb(dlMe7O3OAB>P3W(EA<HSI05HPL&4nMYH=;_^3>3#*?T,\H>ooPH:P-WF5)$4@I2.M[l(YNIL?8M';WUZNR$f*(_W_S
%KoP<)M;l-go9gNQHV;N0U[PU]E'5O`r8I2"l@Y9>rhQpT&UeCIH\;gIM]_SDf?%W!/NnLgOV,m;L/W(j^MH>c1Dd#t[i0nDQ5WTM
%9@`hUoX[soGFra"34s`<)qGM]cDcPss"lg@N&ae9K#<jd$SeccHag1cC!)aOhi,g*'>XG2K*b98]g46+*cAY:f(p.u[bd(p`nKI:
%+#`ZK&;m%pDL1r(XiK1W<omGns5_'2O$L&\I9uB=CH'qp0H6`)3tpl7;i$H8.n^,J,M-#S=7PYII'DJnSU?p4o0#k?QLb"!rF#;Y
%YMYfn[JWke2*9I>\:MnrT_<-QQu">Ar+K:<lM/jd]<pF627GMK^Zs-Ul!,<ID.]sm:MV(;*kuHo3IU@hJ,;-,pYU+e,0eIASrrs-
%XR^n:RL9ghHZ(hZG4$mm%DOH"PjZ@DRZC6_;Uo"%=]JBXY4f>?X1bW\?U:;:D>3r7Lq3GYrd6O%`XC#-KCO`0&<m`skgfXBQh0ZS
%_)u)mhH3o<\unc8osM918RUi?>5IZ+Z^*`m:U#tqZo.SgktO<gh&kP?XPE5BY@#QO<Bp9+BD%E6oYX_-/36RBg&B*e[mI=orU@,g
%R$>BpE:;_l1R])t_n-l2?4OHbba\bga,_q3-"VIJCMW=!R!n^NYC/DMCUT1i'!N"?&J)R784cs4<ngnbUTlhl4"++H4M'3,rUjqX
%>H7Z0<DcOH)6H\ec?aNdDX06b5JP=gL\8^\UQ=eL@=nHh[e_cYZLRSOlE>*_Grco:[&rKXc*_nj?^!sJ^0Cr<`?-ZEqB(`3)*U$Z
%^$;T+-'?u1[l0h-pZoiJ-S]W@NV/K<da\O&]_ITVI6AUdD7=keIXgBSl!IL.:Hs!pK-,:ra\9;C@r$4fAXLof.OV*pGVV$kCi#+J
%[hnJ9V8$ne0ESZCF$8>r%p,I)TA9@M<-Uf4g?mJJ9%:NN@_K5bmQGmjiSB%(B!Pb<s!5_X0DhYOh`dYR+bJ_a)c'+Z`P$p0_]SAu
%YJcb>3ETU69;DN5Xu=os*'6/^.e66^k>fofgF/?aL@j1QVaSGs[n+HN4=u">SG'D"pH%+\aHn!PI;_sFqeo,F:/LfA>?\@.JoNAE
%I=C09;OLkWG?4GrmWOq$X,HG=Y1KtuD3T7VMr*s)FaDJ]e@,Nj<52/UZ.<-eSYqORms=aMP__qKHMK(n'qLE[RW!u=@H&nXI_W:u
%R1Hp!?eug:-J>`tIRa0PqXr.Smmbqd[Q^6dpt#B(hJfftkLKF8q>"nhfRCBH#5bbHq^(J.caN6Q=5Wq[\b&'I>Yj4r9-+I_^FUGW
%p,9p7ooH#qL\JoBSg3Q:2(Vhm9"B9jo4EL6q#8:rme[qE]=EOGr22ENIpO#_bPKUiHYI!%=+<<."pE>s:H,`ESuu]CRhm.^LE6ao
%*d$d[6l.b]g>(T?</$\j<W)s@`8`b&\uddM6dG*9[\VrV?1uUGCc9%V?`X\X?@T6QD=2Iu8b$NTan::ZBV6sTl^)tQ4-*b5Q$9G+
%WAgA"UH9++)7f8_J:e^8h`THYanPDmPoH@!'Xab-Y7$iG(35jl$]?j.p;WT(#EPj_f=+Onk-$^.hTQMf_NLe)4bcbIqPCWEe=*%q
%s6kSUmVH8k[Vg_9NO6NXEcu<rQF,J!].i7$N5KDedkOd>BACAi)`T'dc$R9ZUKln()Z+>F=O@krD1hkd3<9J#@il3c4drQ2"s!J@
%)bjpMH2Mu8UU!eVK[R]p/#@X\Xq*nk^7mf?-g0=Sf7%FY0:Hiqb"mu?Cg^EQUWi\oDrL,gf>YS?/%*eP^1'_;q8a(NkqLFm4:S+G
%/4no2QX!&U&1L?Ri@u1?Uk,--iQ<fXL&=P>S5E%Hk7s7M<T<eLdP$/C28c2sE>DPsPU;'ZeNhU1`L3_Q;3DYb*>u1u'SWNQ/.\aP
%Q=XB""_)477L-qY2%!;b.>j!?*m%DgN>CIkD8V6A[dcd`ds\$N#M4E]W!XR1M"%nmKMdW@8(<\YNUd.0nq[Jm:kXMP813+YW/<:M
%\3LS#QDc45'Lfuu=qVM.C:"7%B"CTgHARf")MYe(:k<la3RBY,']^0]VLR%_Z]A&(3j,@PVkUK$)Q0iL0$oKSV2=%sj#!KnA$'H=
%!ZI7RY3'-qKZ7/k+X'E7;:;-t`FD=[[=fHong(6RBhB7Q+DE^/,%E)FN.ZeI7)[q;QE$qdPbkB_VG^$O;A\qhOXSJ90<Z_52YC2o
%aMIgpb[<]3+<Cp\AeqjSiNd5!.9M@U+AT=TUJB`u.<IVfMp,]`-=K@Y`!4.Y>n#k[/$U5A9csd]/MWDdPt;Zd)D+K":^L))5_\J?
%N2^_e'M8I\dPPB`W)T[R,S:Un)/8<00M7`+\]QCYda_0nN(K/-"JjQ!"H6,EMJ13n)l9F/!R,6V&Mkc,9bPF(U`h$WE_K4"KfTr[
%OtS2s,)0P\N0-4.W`_[;<H/$_<?+gs0r5U>HBdRI:.=6dFco^G9Y;-o+irbr</&>nNmLoA>X4GT1ll[G\$:^]ZoG1"RYIk6Q=SO)
%kj&s`+JqV=oYEKl!>=/l*[sRq31"?AiP@&`5@WJ7C+MW=4(0?#-fILI5l6DhU$37k&S<J%`39P,KSU9T65,IbL'NAtT%fPc#g,W!
%XaiHr`p"?p9@Ba=Q,7mTRGtK0@]kpI/kKU#;`b35#G$R2E-nZS\qj0.aVX#',#sUibUo9?8Z#u84K9gJXA;hRVqG9O@74oM;N8V#
%3`!NroDo](O:[gZ86A8Q'S@=ZW</M\=rS_Y):1c4#)H]`5$Y1MRDE:Tab[RX7$>sg'euEr`B]s:r!$4-=qcTI%5Vna:K1lgTU7<E
%qSaV_:.Qs5+gFJ-aRl6YUl!9ZjB4u/JV]hM9Z\F;$#/QS7Oj9A@u*,[1)>U!c*f="=b'p+hT2IR.L^#8,<:iZ9+PN,ZR/.7M>_JS
%=UZjs36[Ld&Imd=JlG+_+L)T^PSt"Q6Un$?($[4;Aulu&$:kS9U`MLs+dblSfZU4uhBc(.;M*9l,V@*&/@gWB4c<jNA8*O<,3i_g
%`XO&Qb^ugS+p/I?b9.7:PaoSLLkGsD'e6O<V8S3UU6+VO&8hltaX#.>YT[D-=$)>Q1h\n@mjuWU&T)WH!n18$'c30$)8HR^:_<jK
%9SqFH+aKrAh.'84A"$oC6Qj>B)0:a&\-b>V$@]H,8g?okj$hB?04^,=bm73C@ZiKL#4Y<fi/p<6EQh5T0pq#G%H;m`+AY*$c.Wl\
%ge_E-_jG'cf1MJT8Y8]Aa<O:`7>/Tt``[qU'a"`KR+[nM2sLJO!\E:m'4RDq5Zk/k+gE0c_Mf5-*%]=?TB$?a)[%Y1-R[1CP392O
%@Q()<M*fJn5[tfM8]Y"+PllsXek^PPar#sK/P$jqad=?9bEsSXhDNeAd@t*/(''$n)hDPH'1e/jOeaUe>_:f_9d38pC]Rsr0IKb\
%*YY8/dJu$+DC7;rUm1L)LY<EHYT]8gY(4Ad!jSSY$DQ/bh`qXGBh*SL-6J(TX[35;4FrUXNu<d/X%6ugciAo$kdu]DO$K-XP"atO
%b/kj/"9bMsRfJPm,Y;['1`Z^kF+o^MU_JrC5lr0;l('1uZUj'[3Tl$0(s)W*Yg+srTp=RL92`^,!%"[5:97(o;$_)LWg'FnLS?I+
%`%h\l98R4HXq3W^-qI#>=+qD-i^.O0/knf)P*KGWH-2eGktRhrdoaCJ(:GU@+juGg"Ho2uF#Usol_/hc>U#CVXPt[=3f$cBULfL^
%S1\:sYH\YX&]Og>"B;i1SW.l_(''ds(lu',)Zh?h*ga3r&u*Rg)oOSMPU7MV)b*;'6rY`K(P/rf>9T.bq[o3IlPLo+Q"\8lE[o)_
%O9jfdcj:mF@:mEGT;gVg.A^1D-:SGI^_'4ngj;/f$5G`*F_U%V8I^`B#YUlB![K!IAP#PkVpTa'X=IC<N(P#2Ho.lr`)[1s3oX\G
%eV49";as<IM$tT`>QStMj(&I8+=SW\0cCUga't90j"r"!c$=kZBcpC9-#3dR@n%8[Z0(1Pb,;M-<B/3D6'>2?BdA[9=u8W9%nt_K
%plP&SH:mI$"]eTag4$:-F2k@<()T_L1=u$:D+]+)*chcHZ=E[;>GccdQ9WFu^eL62jZ*cSD0k?:'b9EJO;X5DX>$(dZ]$'M&s010
%&d;C>U!o0hbTb\E!UQ4JjJIM9?C-DD,4j%\LK0<BR9Yp&WlbTO_H`<[ef^\BQ50cAT?+YNPY=+dYX(g7.1l>7B7rgG1I=-8`!@s;
%TdpS4'S)u:`[h0oLF+.?22)'jKbm9LQCuJ=..@Vl5(Ko!d@b&N7KY.#9TaZED+unM%u,m@<>d\eX?rUt!&MGBo6JR''QlVNKHN;@
%DhMe[%*f\U4^^$KYtbs.W"pgr8X,!.:'dQ2NJ6-l&jX^E9>a;Ra1U?XoLF$QYHn4<]PnhqR8L*n#m4c0jb6a\C_%f.'@r[)K(fLR
%%*8cEBW4R?7NuRsjl]fe19GS"Eto*.7\G?PUTu;R)/2QT2@`:,Ef*b``kqSJXC[o'i<<pR@cC'"(?V!aCt<-o1hmXM'lt&s<U)N$
%,A*j,gJ;Qf@bF>lB)U4gE!'Wd#pdaJ1IXij2=9aD)_RfFOc<5*;g9k)0,SCI68kV8LA\'XFIuO;OOmL[O>Y5kW4mpqH"IUbl:Ask
%R0*['@FFg&2NA,2&feTFacsn4FWb[?jCP8X_#kNcOS=F(5q#/J6&MD0:8Uo'Oic+OjfpXmU4e3H@\l$MH16A!$\?F>(eLVnR2+Od
%`5m4eE>*@@JNtnL!V!D<5TZ;en7*s.(ndq&!f>0dOV%48.j2B6Ou,*lLD$3dT-P[PR&"GfMi`c16olK#+V58Ti\UX+;r6#[V,i=.
%(Ge(\7?n(g)#pmfe2K1_X@:C\Zt:du=p-?[og(,[bea_87mR;k<\gbE"[V93TTt$V=IK'NjBlZ5,V(:5"(;mI74q+bg5peH6OM@=
%Mu54O1^qb8)W3G,)MUf38mq[(FjYc9@$-s="4G+sIL+SDJpL)`0-_`N<Io*.;`M:M!c/.0X%<,5?0c=s*l*c6T;0IK9N;]E8#tO9
%fVl*)Rt5ju9#3)CTP:RpeC*$#1hnj`;ZrfENb[ai3F%Op_GVN_#t%k_Ll&L0=_Wu>.`n8i9Y_q$1-nflooJs5YgEib&2"hfaZKuC
%eu/SLE'XsbhomDWTh0+W)[0pO<43*Lcb2%Fg.W+ON.4&+YmgY]L@q9kfL_-0!_%Dh02VmNo'SRn't)m67,NVNe%TbX+P+\i?c#H*
%'/RM2=VTp.hn*emf.:!fC\jIu8\a_cr[#0IB+4t4.]Q+Z/n!Q[!*6-;dEo]8TqtO>65l'3LRH8]8t'IM9S5*]_TG@48%:[WI5B<D
%D,D23b[h&P*7hb*cM9kUX/,)4l#3(-JE`SDT,Y"CHpi7AqH7+Y>k-ncR.5N_4dqB1cqK8">(^8::*F$Vl9n5qIKu$Y-2q1*EO$\p
%90ba).d!eJ<!KObd*uL"$tKnmY&$E+p`k\D=JRS:;J^AVcku"%4(=)[1cmO)<`-Ru9IoDJ\nBAJ[kS&T:>,2rIbSI:Ucs]K7VG0,
%_R.)_'A3M#Hd%$q/_5J,Pn->="=1A7KRF'Ook=F2&uEQk2DAj5cU0?_6U9<*/TT:f(RoiT0OSr:$?fhP1Gj0-m=nT'A\'9A:m'SG
%$T5DG/TaItWFu*Bc.0QoQqTSQq^&K9+eSGtT(N2XE>R6Gq-8(o)isVos79A8FifhQ5L8FSbHZG6D2-ZWJ$+-Haq&EpZekO7%fMRB
%hg.9[h#Xj]:u4O+\][h+N&Yb1i]hQajOAk,3,'&m=Fqq]l.&'FZS'<sm*nAT%n,9MX?XQpb<@HOJ4$rfCI.5D/*)[&8G4JOWe@S\
%#)%E/-pNQ^.p/T"bm<5tFC7I$YqCsI[L5P"%Pc5,cg%K+0+"kLP-@lR>qpcDa@OndQimFh,R37m2!P-uA;:lr;%<u<OjC,r0EnKr
%)nW7hC9C=9[q/cO!A4]p=6udCZEQ__djq`D`fMU+[tnlh>r!>F['ig5?(Ys/7CR+i/5i*+0f-R"@oT-RYr2u<!C@12bU0#0.MFBO
%H(K#k8<eh5"&+XSMaWJ3jIp@C8`XI$(:c1.SgI)HL`"^qE.f3F+^\se[).PhSkCiqW!/.p#L7Q"/M/a8c?.-L'K-lAnYfd>hA8ul
%\a9RFZP\E3Dr'p:(^ZA&;#tVML:=$8fFT_IZH1?!-VPZ\5T6XF#T_jKUV?T+QM(6WPp$IlETHMX=FB.W!GM]-!_`[f?4"N2_Q1gM
%U(Y@1*lrr00b"=8bUYk"o:]&s"X@7hp(iemj&hBSE<,84(o<(U&kJOk[&C85jFPusp-A%4@g\HlqS`h"r)PL,eQf`.E0e(9317-U
%CLG-TrNm>Vp`j4`Jsq?<Le[C?NbKpO"<pp?X#-\=hMUo^LU2aqdqaY'r2s2(1_N`[ONNjOaQ`!^&T1cd-u:7L;]p:l.,IjsBSAb;
%1T:0eXJa^3d+IA0"mS+07Q4'fY_qIIYR-l$;V7L.l6<e@V6upH'@3%IPXE)K]`Q-DAe8"#U(F&OLa4WMcQG^>8]-ErY48Znks#)h
%qI^ebB.#;5`::&h6qp8T]/9RYF<n[Oin>T/-4e`l(!9"40fVL[,fBTeSDFjdcSP*jkHt"#2.8_epaG0uR]/t7mT;il<1LV336)k-
%''$jTYrUeg`m=)rNj[9WPpIQPnCE@/@i\;Je>^<n+jA/8]LoQ0A/0"r'!;mf<20hH/H1n__i>-+Bon4-MRVrud'J0rBOSjGJX'%T
%CeU8a.cP:c8"uYkfZ$ct'LF3F:pQeQL2]OjPM\@M/<n&GAReJ+2re9R!bM7"_2Y$)"?%D7RV02s9INWZSgXuPMBBatS4nJG[\8q9
%YnFMG)46g7BdCt3%(7ue>VU5gRLKu5fl3U80ieQ/WbF(1SrotO5l4OM!F,,9FJT-[!pU%q58FBRQmMg/XMbP:hCF]3me00?m)$9U
%@:u5_Ma2ngA*e?kN6o`"C,N-OQp"L#@P&=8'7_K!?+H7^`%el%"j"qiZ:U:"n/-5<Th`J:Gjn<D)?Sh+<T@7k8cr$9HVr"#0Z*OH
%*Ag5pUTrJ1FeE.YAqXkPKtMONpah;CW?Paa0h7%l!$Mf]ji0E?AO5D%*od6V?re`C#oW[S(cIheEPuI:.SLA'isQaHPpEW^CTu.&
%$q`>LE"lCoITUF/'7_*Aa@kC?=4k$=Xb;_mb1@'m4r?\+"D9<J35g>[]P!B]&nGV*PPuOHLlqlCR6/%_,`&p&(t!%G;;VukLRgS>
%2Y9Oi-DLt-HjIWK7-i*-GdO^t_%]<4.0ha,4j;QN_6i5#56*,;h@Z*9EZ?itEGR:[#>O7t!`1Z](tOU=Q<+oL.EqepiAY^,2T.Es
%r>bok1i>?.L(cK8UPr?<_hAQ@o,UMo`ei.`K2b?W8>QT7@\"X-h.`HE$497=U7>qPj[gp1O_!sJ;uN*k[5Dh7p:IQ&BbX&Z%&oM'
%&6<g$RjEkhN%q4BN0#D"7>NqE/B:otlT#[.1I9BQ`^C%;?;-0=Ye^T1lnRi:-';[4CW0:?A'70.lrq3m=$k/E^F"lg&7/-B#K7/f
%9s57+q)[LrF*7`(jcM!Z&n)uRr%qfu&.2:#E5$;,W'l8-8-E"!Smp08Hc[B`%(Y38M@tcmN=gr]?4e;?9G^)R";9;2!Nte6aUqq`
%+%V(P`)ssJ@VZI&60pN2dAcn<8CPLja;B\7:8+=/"O1sVmWASb#5j=VMHHC_n<L4d$ntU,k1DLAkD@LP'ZCF[ZmM2Q#b."u&0qe*
%q7n+^-4l!SdFO2!BM:f<6IS%"YrORO*f(),G^<UdQk,;[UqTBA"OhVKHpFKT.\9DereP'uU%[2(@^AG1O=Vgt$'gA%2A?87qm2Te
%fV1phhR'ZQ:d%Y^AVA8nKq.2'lmSU$*,CQRCc!t(eQJ1<Q=S@^/_^8fBLp<P5k7U71s:TXP3%g9eLdggK+c";\/B]#FQi6Wkt3dg
%@V<9O&S"IuR"]/`F=^;q8XYRN8JYm3r?7f(MMO9f;61J<2+hG_'U'G+/154jktdr^_mh6G,."iKK*Z!uhf'I/DW\41``PnX%PeLQ
%d#'cJAr)c&Zt*7.^uM-+Huj<?b$BnLS@U(6Z#u=#?4.ol,Fn.WXJe$T3?jp`6LW+d.*Ss7ACeZ=P!23l>"#c&&ji*/$-XHg>rfb1
%_5LO<%Z\g?Z.NK3<Rr9f'1ojKZ%Qei!XKBqU#G*ljE$[l_@gb:!tkgCZHFO!UPB,tb@4U,Gl\)C`?/W"'7_?3B@[\^Hk*@dk(g%j
%OWYXoitceNl'T,Gotf#?O2@RD+LI.dKNsT]?jU`cM,G.l^&^hsYa3[-!0F0m!-C*Z'/Q%/.6%o1PNgEudBP0So1((X&dq/E%'aa:
%PU[dq2<&^2L\P&A"+;K.$lZN,in]L)d(q_BN"J#F,<%q.0:6F@![;[$.AG`kN`L2s.Mt*'B-WpYlTee^GG*L&3Oh([L#/cV'$>%!
%-EP531C2k3!b)*fQ55f!l?mIho<rn\nfUI1'qD%`TfWtu[>;#<44'tbOO=CPa!i>YNfnp)"eVD3+dQJH/9aTt`%tmrUDOB?aeG$S
%+Z"":2m,URG(X.LB,_<;SI*=OW775ag^7n-Lop&7Maj;l(gq,97]@AO.L\t5_DK+RU;[%i3P7M`]BcaVa/O_FZ-Yg;N9"0PJHW=s
%.LE)U2C$7!1?n:O'G-,JMW)[7'Jl%GTGSW53KH^a5UVT!LiFPn(?bfs*%2eQ)/3*[@<P*8"==E/0%tin)RR5(9r4[25]j*L-p8b.
%<4QP(?GdJt\[o,eH2TsO<7-SlUrIpd==$Xs9.$pY1bOT?NS0N8&\TO$OCS8LGRfaH(T@^&,ElZ>P5pI8+=VPm*E@nW7+bPALgMq)
%U(#"pU:a;8+&%hs.ZH5BnRsZ!@L3fL$$Zd55qLE\1_(K.k^jgDl2uV;$fOd1@L%S+iPsXWj=!DfZGOia%<;"p9=_HM!`][jLr/CG
%Zp-E<Bu<>jPl^$)6NB^>L_2LpNiO]\,=u8OrW7a.-4r'U'SSiu3<M[n!9)a(XtRfKTY.*.Z%CX,Pd*Wc6RY<a,\)>pg$ptoDF#`Q
%`972Z)g;-e+$hs,[,mD!-l2Zt!@BecJHIet&;l^_Yi.-m,he`KTQ2/p*_8\DOCJEEBV%EO8lESHo-16.203/D-qEHNBH0e+_D>"W
%+^@S_S2m+*f1Hd7/_^huKe?f8irRLU%q^KF<Je<36Slicm3`,i+=C/?b7R)8a@OWO.jW-#7Sp1bd#1a1L$]R`Gr\l`\:4KHF_q[9
%q-6lGK=Pr#PXHj%RR$R2&=>j*.@WU*OWe1g66gM,4re]BQ[tqm,Pft!#*Q9a`2KbMa4g(aBrs,a17%M=I>Ku9E+AAaH__tOS;ED>
%@f<OhBBnFIPErFG5%):W*%.:ZrO8K)fZR#gZ[h*<kU7sAf>Q%%@(Km"XBKVbX.>EX8K\@ERLZ;ij)pZ7aVr#l]J\n<%_YAG5IWtH
%+uF;g3.R:JcuB]UMU,L/QO"E?-d*'&+Hec>gXi*Wo74Y#OXhRk++7NBAO/nH)bUH"nXbR,+>j)BJ2\g.oRZO-U%NG>,*nF#kbOX?
%Al$'A65d%^iA:NjL&liN:b\^obh"Y'D4#hV"NO9D,ZZ7P$k!,,fL#!Q-BL(G8Z5=u%nCe51.Ca^07q795T4+N[FTnN5cI-e#dS3>
%!\oihcGQjd)ZjKh^W=R&d6VHA73;>^.cR-/&5.[:&)r3m7=[oc4(LQ,n$Ago,U+/,5R*/42%d#H+2+qPM4)Va+0fZk+SQ?G@9_JR
%E-PWUcs7#+R2c`R9S%SsW[JrZ?PCf:28^V\^VL[B'VHn;q0>7q#dpCS&)h+;H4"=)gaI`V?afm,n'cBbEX1cN=WSk%3n6.s;Oe'b
%ZU"sBS29UYmZ.m`BQFT<F>@]"0k9q*C1RI/1/>gV,G)Co*'S21_UQ&N&]/qjhgn6&o1$<X(FP>J*!R&8>se=BO^WV>Z8XbLqMYFg
%;>a8)2Ud;LN+Y^j=jEP$L?]9-CH.??P0@>S&>'itO]\tS&r#&YP7&5fdLNB2D](6o',j=0d&;Rn&8?ed$o^RjLg/5#<S!dJ?7!E_
%?MP'cbqSFEJ@<:R.F@_1QLDD&>@E'Y%%9$n\&gnU\[^K*[g>]0YT^(nS7BBe\RMMFXP[2&`-L@\R%osGEC5?>3+:qdgH)&%#!,5h
%8=Wm*A9Nd^mGkGeXu:f-j!!n86rV;Fo6h0Kb_FjiTFhp_>]aVI'ZCt5in&jr3uMnD.\.977IZ4okF33\e6<8hBM6JXL+F1ok2__\
%DG>t-d=Bf>]Z%mg?.YWL-BK7PL$4OOY0b+8,gN-c/G?%XW\!aOX'OF*-'i"GV[GPAWXhH\2,Up0,)@Ib@u[f5f]<r?SoI%*@cbiC
%PLpuXo;kiW.0-Y=H.EBb@aEJ*S&_*_0C5DMd42@.$7*IhVS].O`Ts5*@g]K\YTY"Kk0+WGD")*T%MQH,%_W%aRX]<"mZ,.PN3Q$@
%-(\Z[@;F\4UWri?a=<-);Li:i4@Q6+Z+X]X.VnUn39&%,W&9KB^*G!T,:ZBW">M%BYIJCH_*u8u7;&iU3]QJQG-LB!A5*2qEpS!-
%7fgSlLtN0>/'ccITOKos-mf6D]Z4G4,;rldh?!'`4\oma(ogMNPYJT=QrC?D1RE>]Ks!8;WX*,WD.._+=_j6rZ-N]3'!p?XbW)hk
%S;:Z:O16QL1X?sFLa:'D=i!Q1&F<[<Fp8MTRkmS0Fq7lKgLHu^T!-Y2:1DiuQpE8aC]C(,cj1%m.C$[mqRe\aW&I"W9J!HZcp)];
%3R\B^:tfUe@\PQ5\W>=_Mp4H<fmsnC.*RoXc40IN1WE*>8$>(&#;1:mqIWUkm"<0"$=q&PYck95+TA._b[UeSk0CUO"Wk.l5h@HL
%I&nHIB*n)%d,m)^91f&>1FZdWPh$ZmW/PuB)DP]p:n*]]bsJKKG,5@Oq2;)%UG9&6=bDNKdYJ5OA\/7a$mOpugF<mUGU?NDa0/0+
%A#[Fj7QG6:TrB&'T8h62&49o:*ZD7+TWo[MkZO@2nM*fMFT&D%B.CNOqnA]UH'Q^%SnC*_Z&+/g!'XqX)WAq2+b46/H9Hp_*Li0W
%lsIfQWpi=Eft$Yc]]'*bps/:0Y?*=f`U?e=YAuOuAS1.aXVDdMJ]pL11*F4fq#E'TI]'Ds`S+a1$I!&R1rZ5pJJDa/ib58p3le((
%9&fhq7eQjP\E6@!?isdf?8)V!&=2>a&ZLQWboQpH-MD9W`jfGOU;B#h6ZpR&7JZYc\Y9tuQ#oHI/VqiZ-`d0Hf^7e<;6KZq0s.BI
%4ooMI)^WjSb8+IWI%"f9RLj^85"/3@Q'8"3bnP2ZDoo4k)OQ_/Y$)>bW*+Wl2*K<.[j]"aVJSeZR^U$r2%_A@--FDh@XVuP^a#_q
%Hs/STEJQ3YT]J#TKU*LY4l?EU*\BsPbGAB+/SVeYo&53=Q:8l:=0IAnZn+J'Q6'^#>Ej'j;)H1cA^OnHQ5L/Pi,#`d(L!m5Mmkr;
%98@f"/25['>B\E_Bpo>[;ln8bG?."&>/4]^W_CT$'Rm70cl<'>l?.nY9+.&!ks3j'>J?q(d0u)%7>!a,VUum46U.V,7g9sf(J$j9
%!q`GUJTeWXin]PU6T%5*KWX1P6nT!O[Xjm[#8T]2Le:Vl9"kCYn4j+Yn\Tj'%uCk&^`$#MU)uk0pHWdg=&D-e!,\ECL.1BVK.Y^e
%O;EKmDj$T_@on,1QtE!J+68E/Pa8--U<E-nf8B]P[GVm*W?GHRr(<N1j#g:<\J'fT(I&UZ'A:+mMKam6#n'q:2bK_`**9in5h?F&
%E+ubsrnuOK'j5D"MrGc:NP,jces]0=QK[L_740)=36[D)_1g>X>X'T*)QRnoV\CrB/<Qj9U3Rk9>:b]A$LJR%=iL_c[lD=+!Z1qC
%RPf]+[AUh\Rn.*E`Gr?1Y9aoBN7S[Qi<Im[UO]kO/!=R;dau_5U(WiNjb@9k)R]]Mq;t'd7qId)#o543_Zr2>`ZWG<m#'tgn4o;>
%78LF2LK%SGpc:(H+kbi*'%NskCpkj2H%uW%6Z7Tob6YbX5S@=o_#+@i#meSbE)2`i;h0.b4(Sd*T3SV3*'5,Db@B+:@*oYFi<E3)
%j-RSZ`JC*8S"M;e1Jk6X`Qb,fSS,D(*"^@;)?GRk).."@&>DA*3*\qZm'/2$f9#N65o=EP#t%=.XBfmm/^3u&<7<(VV%K\7qcthh
%TFTZkQfr*K<`g?PJWRG$%>ciakIH_Ub;p3V/S8UR)[7"R[&fq%`l@?XMra$&q%?b;#@Hm5Zco>+gTt9a%^>&9+,5jBZFI5^Yf,<,
%Zu]^qj=(5M>f:6ORB5-)68:Qi!N&%mFVGQ[;]r_AH$0Bc<LirO+Clhn)H&og>V:STF"3NB9B7fm*l+:/[5`3La+EB6F,oR16G`Fe
%`_rR],1I9-cfB&i`dAYnP)JPp0U0\0e*!.#8&TTK<@=Ih-f?^F,cUO'/C1hhZSs]SWIdLW!)hpmetp'b<ft9n+*b--cPD6^OXo*.
%;<j#o(sVq[:5WT-AAN\:R2efi^d.;f.=iI%80aYdJ[k"?k!'h5!0Uq@%3l]->\b2[8HC^Pj@_g3H.aWD.UNbA$r`Sqc)&]6%>PdG
%4[qQ.10#$]((\MDaI?(qL8/%Dld$+l%4'IN9k&^P!QJ9((LTVG8.IA"H"BVCjZA-b@7i=`-8Pb#`L3.E#`d-XBolpr,S@@/O>e5d
%fL3<m]u1cj=^mNo5clbJdc@'U5V^<kHhmGs5egh;E;cXV_/Nt9#`L<6p;TYuqaIRW5hpOF9W&;<dj7j#\+K/QLUcS%+9hlkRY+%*
%/KE?q*+`Wa+eZA2b2l@!jE'EE`&,ArAj?tsTnM]CfM.ZX,Ddd)@O+@7$:&G<AU#?1k?2*qEKNbSkq\'fV_grB^f\$c;_5t:fdjLc
%&JFLTR@F[n&T0n<M?<Dg;Z]m=ZmWg,Ko^:5a;5p:7F_Wg!X$i_aPaEINnFGqg[-RjQ]*(G*?Bsai%/:Gb2pn7.0N_dO)Qo?P#4KZ
%_&D8fnJTOjNXUo%X3D)_bSot7Q]T.%QP?)f,au:&K*Yp@B5S%f(Tu4(;1Xk"4lr`&20A%U6K%Y@$Zdkg[2Qc>0MukT'`(ZNpG&.3
%OOQa0E^hVclVdH6VrglggmjU<pI>'t\-a.%it0sCc=fMY:CabFT*?I1(uQ]qkt%%7q<2AM%0:gG&?%J28.P80aTlCMiArDD'"3_i
%A;ZN9af?%!@K/=sdW43SbXaqW(s.?*#"PD=SdW-_j?S4O3RH'u12&#?7`^&"(Z_(-mNG%HYi!i[?53Y-29#_+M59rYME!92/hQC8
%>*<nI=GUN!1h'DT&t=2V)$k/:qI3SPfO!hp`%jS4Ll8p>m.,Mb4/<G2*a#Kg)@*oqF8`(DEBLI-)G?_cDLhN^bZs.g,u4&3-mjdR
%)Dtk?Or)<<.4XtU7XQ#9cS*uqG&d/i@Mrg"L;fdoi-Sk*Tp.gn+FqOEVH1me2U&tg:c**7VI^3j?ZtA^Jc37@*:h9sLt,<aYY_;U
%AgsIFI-&NR$Z3-KXYpF&-mV:B"!T\RH.jIX)"s)q/HQ>:EuVO1/$;pfHpKl3d/sdL(/Id]&,D*e#<HG0KX"hm,YLjWHn>oT'?,7^
%lg2F^-u#B\o91P1)OL#'/$;jW"cU<)5_V57#%,XdAVeIE(uc*K=r8S[!kCbS(b]+ugMY$L1$,H$,pcbdo6WDn=I;c.[uRktc8pIo
%J)sCRn0uF!T\/)DmI$0I"4(?n\d-\%2aBi0js,tFM/c=9?lXhH)*;S2*))'1J.SQ/XH9])98W*K7XRbL)c%I*cM,p7%c0(l!lh48
%fPiB>n\rnD=&:NiDZ/k)2'^Fg8?3rkX:^H-[_.:G%XOeCK=s(]OfD+#qH4.aMG";7?>2->N,L?]p!&#[L=h,>OcqUC'$Dd<FW!(>
%,4$Qf(QoJddoqY'O\CHE0Otl<'WH&Z;3^r(3Q/,JJZ`:eW1rZX4fl82%%2Z4"`.*+M'S,ei;ta^<&!YB"A)j[^&YeHnh:qN!*N4h
%*rnJH;.9gDft_C*@2m_AB:^)U'lER[&=sI'VA@:t&J/.Z!"L+ElN=*)-8c4Q#_Ib9b=dZYT*H8aTF#XqSY=LM@b,0'fOI4N@g*C[
%Zc$*cYnV1&/FVq%HUtsb*bZD2Q"50@W6\s>pnG^^.?Z-$U:Vhq+[q)+B\HH#A_V[BLBS4fa&cuPG^b3L<Of\"Q`JkL@.<I,[n!d`
%OI;(Q^-%ip4qOLY,mYV+4p2^l(R<XFaU"MA`i[fp)@<-t,*^%ZR`/Yeq@gn<",LO,@l\<2KS(*Y;9#nt1Ki/:0Q$Q>XR1kaRWj55
%$.%3.nqG`'c68Tl,i`A*Lh7//-0c>>-5;(`$08`;K6Z#T,YQC9lT'tB"-BX*+LmN:D?qa&0#URtP0`cjmnL!UV7kP'7*CgnCj^kX
%?](&j0N10DNngV(S)g'"A'B7PcDemL(C,]%WGuaOr1JS>QETLCbon@0=CQAa^73l!S0&t`&/*2EMdPBl"'L_?2HQmF10(SZ_A@(4
%QmA['#s2RpOGN/G4"AerKbulOJWrZ^FDC)sSS;t,oUKhY@75f9SOcHPfVpS6>5b$d+iVRUe6rIr$o2:]TT_LC)<K]e^5"jD3LO]6
%nNH6D=QT*C!B<cr*<lpe@7@nJJH8/11P45G(_L\`gcB5Wfs9&AbWr^q.Q*"]H!kom(.a\"d>gmaIR&p=6J+5ZTfkIOFZ2][`%Al,
%NtT"DoT+uK`j\=NcQI%T'a!jg!"j-6Y/uacF;KSlZ@;N=18)i;ru*C)Q^$QOkIsi7f*/rPiTChO\T!_$J89u9:4Msli)'`S9>u()
%Pk!*<b\YVIbAT#.2C9k&9U%h`;d68]&CV9;a\O,N8r`_Mq(<I#W2X`q>b1so7<*-8YI#(s+3CEWP4<F/MJtiGHccBgAq;>C.kS7d
%'^:Ap!H=\e")&%qPfq_;]%l(8K,!'DCrDg4T4LdfJ44KQ"cmGf),1[o3h.4)b5n#rIs>kK:/]J^'0H]D4^s=RkAitXBu>A;?,0=+
%=V?UMR4mBU9X<$X\<,^P!U4,IBp=IkAl9JK@EhJXUIr3S6jqGB_9Y)[^,5O']q9TGE;b;BeO@V'\LH7Xf%b9Xp:OMCa`]E:>;4($
%N.`C\@X%a06/JOf&BZ1!C`1&2J-QO.q8'n&OrT+U[%kd12ZQELC0^PDl@db7<lfO=bDKlWH7l:;/i/D`/GIW`?tpq>aJ?s/B8>(k
%2j#tc;$@IkXp32RE>m5^DIbnWh=-k.B\#sg$K2/;e&$2uS0RqS7P$AiAP@(iF'tp[$"2XI66#83EdVd]+t9J`k+*K8/]*Xm8cgW?
%bG)q03i'<P7ca'=V$R3lQ2$C7cK#Vti[l-Nglk\=j%uaL[F'X%0a]%Np4*ae<LP>RCof7#h"XFq(%d&6\dJ0bble>pB`$#)cEaCa
%,E-+p19,U&*Hc+-m!.V9'jTMj,u?YUR)07\E`qoqEg_R)-)rH9KeW%QYKXt%`;nj,8errV0]J`]:Dc%C\DB5#&)mj^i-6Agb3']`
%2@RLU@kTs!`=ph-TM"PtU88'ebc6Ld17Sd]KA7]OZ8"?\l1l6d/F`oM)sm81#8tG7ll5^%SXTjm$@_Ka6<IiGE,<U^1@K9e_9nTU
%bM7(-"m>#hA'%"<iC_h>a>"p8!:eidOpm[<F/4a0G462YJLUstS7%[pXcS_8G:HCUVTpLQ"L,3+K)9#GT,%ej:R^;Ji5iPh-k[V9
%R,e.!!WLTaN4l;7n=5Ab@b2H%T4)ppXdESE.X3/^E+_LT?;hSq#;QF]'oIaH<,>T9(7kuQUIgo#16t_I\rBY0@D;IYdq*OD\$!`-
%-e3d8kp\3O*b7A-\^8Xd$[kB1en_?fT`_p6=iE`5B#E;#:On;N_C@9fb>JldUW=d[d<"[DA"UQWG`O=0HB$)bR0V01nqCprAY)/-
%3Z9odH0<YUE^225Lq:Wri&WG?Kd\OZIPTIpq%gI_p@M!pc4g#r$%l+?WA*$q.69=V]?Me"%2iWcO_)5JE'7Ps;Q*Z)q^A`DUIpIR
%+*TC&C%`$m6Ch'Qpfls]HtPq&Ee(U.0eLZBQV^^qJV*?t=VAYF`FU+Mj#=uZR10e\m[Lo".m1-bZZu]i@-UtDfQ.JG)C(P+?VocV
%/n9qE1fHfDFp?0[a(!^(M<p+3*<:K[NI,1cOpVlUIPS&/goI*-d:\GF#,MpO1^4L0!A2kYDI:JDC#b.gAM1>=CiQ<I<(^T$T:rn<
%Oj#q/CX'9$%'bIo3i``LL9R!(/3iWYF^R02O`uhEHkJN(H-5I[M63cDFcX7.MFha:1pL9n7^gl"^C?ZZp9'erWSN;<;]/LX1Yr8K
%$],%>HPt%0H<d.V%J!F*On(%mAV5J[]9;VeaYM3?AGRTM\<s3[PgOfY+U]hV""WLdOOtDG@M5:NM.4b$e@bH-oVXtE6La(pTm0TO
%"%_d9kKEoj`V'V:bcEn[glF"(&L'oc5'u16U2oj1UN<a!p(/CIFi4tg1-UcqXN$/CUp5C9QWpk7olY?&DDZid7S?AY=RR5Q#7SGT
%.K;sfD,A&#CUe&<a;._hd)Q'm?fmNJhn#B9k:;MmQ19"-2O\H(>EeJoclE"cX>'A9=l]2K7V/DOp[sS,q._\?X3B,&_r*',TO6k4
%Mb&1*J)F5+iQo-nnM`;p]^L=/gCsGUSZq!%8`a+:j6*)`^.,lN')M1@oaKf8E%1NEE%+4h4L@?t_VFbYb2$jJ/>\6]pJZ)K.\*qp
%osP#r.<E$6#4H,D_CTccMf]h3Qpu<T:Qg"VoaErX")=sh*1kZHmn9I\kc21R_PB9$T)Mg(?^7NkLiCD3MW=kG6cCr`MPII;I'7P4
%,6a'_<]^5qr`0Sr-K":DE.;5d-o7XgXrfSf9,IqM]R8fU[4[_g3cU'a@P0?l@o62#G]QM1*+Rjd$'Z]UI8k%8*SZ-m%ojZBoGKk?
%MJP>X1(+=fq!q_sbs7lcO^#FT0%!9;DD<m&mPp3MlO1AGM6hpSqt1Ulpq91&$dDb0j*`"j2Oi%&ks3h3`&r[An-KVBT:t=-p]LE#
%1gEb"fcGo-Q$%jnk-63r6CJhW`ck&7hF_XuFD54@9X3no+I=GAg'>(3FH%A+1A>[[h(^"a`[um*(5+Vg0mF>QKT*0<,.ki2O&FZ1
%N-kDc3<RTZd5ZUNNRA#DLfs7@j_:hJ'LN@??lX?p305*@2IGFJVV\_1l`hf!M<W'LHIr/?@nh:#@nh75YpOQ4>MG!tX_HX?2NOGs
%IH&3#7#q9->/K@r)-7qhbTWMg^2fp",<b%S-/K:9$(6'-!-?$\[IB)9[L%g5(?JVYnaJ30`=68\1:JH:XSF.\!AbdF;M52[q;k@V
%`lTkXi14[$.4qMX1ku?'aR5X-5o.R@D5?B2^9s03'GE[R2ejIs!)'sl\1l\_A01b_YU<hGK\FbQbmV6j.;l00m%[p4Lb:A?>*FX$
%QY8.'^cmmtE!(Anc;id(.Ngb^4:7W&=a^JlM.Yd`I.8UfrNc=BQ\=o38YPAPKBBI-^?.=I$BVH^cf?ZKI^oX_?T#[Opu<q0OG&75
%1DA@A;;*g6BYn6'e^K*).ge\I1'#0ec</#D<g9m*A3_qUA3>)cAH9tIT-Ur4"GhI_eD/uA6cGbT;TG824TUgn_LO<.i`%,&;Rrt.
%/C!Id#\aU(91+X[.TN4Vnp=:r2413n/f=.F+>ek5[gJ)r'&-K"j3SDu1-<gl,XfU<hoK]0RF=3;qnFks@m7X9,W7EE&Na1%)f@ns
%>![%!PIuHO^r6T:4X./(-6gW<Fj*c<0lPS4%D4h[;mkFrd7-m3b]JbWFI$\7=erDML5<7C<gdSX0Iq)m/MfMLjnmIDW_]:o@Rg(9
%#Y*Ng]t>)dCBTh2_h,LZ"O^>K`foKn?b@hmajD.>l8PQ_p%LQL<T]Qa+.s#eYAj#(ZZ5*TEnH<'>%E9*9NE``JL&N`;KNVeAVnFd
%9<M!D9X^O3Hjgeu'T<5T'@,e$r/VRhObjB0$fia^3T%Z^)"=OC_Ab#2Ki^ZkSha,/hi&YT`_M8UnlaLLknbknUmVeA4<Pi/fX_GF
%$t>eB!L#Q@hBV9MTF?9]F14s[R4"Ym!9X5+8FB;\cba*WQJqm3\bIGW)^992^1W;ml`&+j19n!,iB!7i;1^o%NVeFuR.)/sk4\m[
%dUg.r&*dtk!T?[lH%FOM,(2TWL(hg;dq&V*>*J`mkC[_cnB2k4Em;pF-"/A!*taLl!o^OnbFP%2K_45)K+iNmN8MHBpj)",,(JN[
%!"^X?CZ%9j>I^UN'.>XI1a=-#?`Q_"'fPeQj*h,[bur.OdV28h!%DoU[C@eER4Ji$3c(r.gash,]?&3<hL\`?q4X%9#>LtH+*bps
%$fN&5'(^,c^Mj1Ai[AAKJsQ1@"oromnO^#;j,ROo0C?$6d:D:8/,@n2Hq?X2(2!;2#pDsW4?VrFK')8.[UtmKCohC/#9fZ/.E0a6
%W1e9f7W2"[l:W\G2]RH3E*"/!8jG,L=ORF]mbm^KIRp@_q#nVU2a/`N>dt_K]Za"9f^AXp<:>^_3)ZE.iiZ#NU'6Mh/8&TH.+a1E
%KFVOFU4i#glLer-'VJ(SopCb?E,"9/*7q?B#upKZ5]7!?Z]":,7`<"BD9^>aHr$[E=:%bs>_Kq>Ju)UL?i]cE0A6N<!N%-Y8e_]V
%6dB^-0i&3*2A-.JqNTb;W+8g85#HfO;tDbrDc@I'eNDd>(\*a1Z1k739:=;LO;ST8hh]2Op8k9%;_nplTN,`Mkd2>lH#3UnF<p0g
%?U/mAe:Kgac-B="Y8lQ8ka[bTCTN;Y9>e8S#EhPA9<aZCJPjE'l+$9t\a.paL-]">"rkpr:"FAMD]&"fO&s%_\/D/#".BGg8tbL:
%.mGM$Te4`q22dhbd>8JTB#3qlR_(]0?[ctMJrVBC00gZN$p2cBSWsf$e]ABUJ@XHLesca:?7rGZ]IJ,#\lK*`.Q(;3SmX$C;D4f.
%l]f&f4bT;4atfW(Ci9Y;I<*<=IS\Fo22dQN^q>XKQt)7MCb?P8jF%W.Pd(cZ^k3'+"M.+ir]ltra4%iGRHJU)';t"F-ClsMnP)d<
%q$^e0RW!5(ps;bYkBVSkdJa4[-?WjP9>nj9A>-Z467\dLU-^Db>eJ#04s:uQAo?T5"Hm#M\jbbIV1>D8%V7Bb&GV&\B_)Odqa<e[
%KbBco9+%Y'KF!7a*=/-r\;)pJbro-j3>%)-=!9d=UWn-83-cSLErDI76b/I0c]!:&MhpI-%igr9s(Hbg?:fJ09'fhKs+g3/J2FJe
%&]"`B`6;.UN?;\1HOQmoDSS"?E_7Crc>!gbijSdN*G_cOE\i<4k9OnQeDF6-8htY+m(N+%aH'ef-k+()pkbUC\M^Sg/mlIWMMKsY
%9S>gQR;-Yf\(1+/++!59(u8oM+75*?T/cC\bWL&T4PbUqL=q8omX!f6,1q_<$H9KU!af?oR^umHjng[m-!`+jRP3(47a_[G0),I:
%DZ=2;bit"=W.e5E04*BNj/,(S4oC1tTe@.X'0^t)mkVRfKZ1la`cJnGBYo`pQ#ct=4qND$i#)r>k4=6Rkb9mV356M\/nRT:4\l\M
%c6#P!o?;(DiZD<_%'iK]r0FjSckT,kPgiji%[$&gU@]YHTUAkHB`(UKV1;)QV+S9'JlD9YK32Z.[keJjWIrCHC)YJ'`44<+P+eO^
%TKprM+N)qjm(*8_hN/:$-6ql="a^S\e.40Ggu@>"ccBW(%1]-1;nfA/]#UJXENfgS_R;a+00DBU_Q+=E(=5=-+PN>hIWumS\s*20
%0PthHB(.6g<_SKG.f+\Ah@M2jj^qB-H[Zd>EC-q2T68sD#8(A:K&;gLa'o>.^40++_;-.E.//_@':f',9`?2@2r(6Fh<([X4:+[j
%It"?&qJcR8cBI+"B#TtUU4DqEk5!%Ok(9m9rO=J7RVlB[%lC3QB"!D'-$a51\2#1M3m2+klU4H-g['`$D0*_"[]O.s_Mcf@<Si^*
%'e"5e%XO#&mZ'jW)uu&^1m]bf-\66SUN\b1'm:fs%F^\.8DaOf9<s]_dPI_h]gMqPE%]*aBi\+hI'Y5l,i_#OFXGqoWS_QQ*8\l4
%k:6F8j$\PSBP8SlI5F.60ooDYZEAg7,A6Xj(o&.QB''BsB#862,FTJmD*$[10f)5AI&s%BCYZpoN#:aaE'ZTL(<!sS&U*Nkm+5*Q
%Dq#g+B_B([=W!`JN%58-;Xno,/,HpB_ng1#$E,-9ntbO[>)GVLan'#o7(a`^<f<08N<bM=:5]Z5ScE24T<SRjRhims.UIJS#<O3i
%I1%"SUq[Hak;)TKX-l;O%!sn=cU2u7ILXWDU5(D!h<8c%?Nu'0ltDO(Uhm7Dk,2T'n9%\YAIftN8[EKB(L];_"u@,^I6'i??%.@D
%GW57>R.TmXLi:<f!_^&)`i^NuJqCqaDX9tF5uW4nQjmi#9P>1e#3.6'iUs+"CRV,AOQNh\W+I"3Qeq_m)?M[f;SI;-/V`,p//'5&
%o%B1h^B9LY6%-&t9M<c3maR3<hQ9jK4_L[QRSBrO,7$Noqm[38Uq[sRfl\4e[G./JM6geX+(h'#WcWa1o;=qoNY5NL-#lOq.,2.H
%QqJ-H,[k=\)?B(iBj$sL/22^&':)=h:O$:C/-/5e]ZIi@g$:,2s+SIR>\JVf.5Au=Y_dSt6f=[RDG>%lUfSl$MLb/PX4o0M)WN,[
%&Y*P_6#eX,\AmY<XL=W;;8kj*QuFUJNWJ8(W]gYjYh=L@1+-:>!HEICH"Y#5au^V()=l$^)-orhA:Q*LX3NgH3FlDDJ:1CA?T%_k
%<:_?8=jI(7krju0+a!"/aFYBPN(@2#bb.+qoW1<^gIH^6LUCK9W!]g!Hu?_e'hUUjkUC3'Kd*G$-^79L)6iR6P8OYdnn<B8"-:<u
%\TR"&$ZaEN2sIeP4.C_pjG/Y4aKHj+\4N7dGlf?W:#W)u=_Ll\!nJa0N<h_MUJa`gdbNJ(G6b>\F[,7#B5hL-$35.lKC)%hP)Lu9
%g3n8Uc]d`XQ%Q%R^$q3*QdN%!@^f_2EfhuYo_O(<4Q_j@hYW8Uml4msqJ;H_)t&>1>1JZi#YRn+OPm8kkGJ,n!Fb3mdE<QTW8]r*
%`]N/ERiWaaYRW&MWC:p%s!!"ZaL_Er,H41nVTu6G5U`m3AkMZfbXjhp`Io.%0bX%rj\=B+fL1A(@=!J8k(T%HKs2,SQbZSUk6Y\$
%EqZKlQSs1Ig@8krfl!rb(``fBKgX=*V%Tn]:P#2,ArON?ed?;fq<uL7r1*nOMYF1qSXrH^45@Bsa,)oR`?b48OJ+$.,VmSbahC56
%Ymr7FAUU.8<iF05<PGom\SS7QI]jubbU]'"3:PVk;.2?hHl<i1Y=Tj4R3RuZi&@0A@)gs;%m,[rE"-M&GYkF:3HM4tq]Z#bSB@;f
%E0Hfk-/g,/qjb"mHe<@6).Z%*-W&?5H!?9SX`Z6sC9?Bk[1P0QbErS5P6pg+P*r5_"^7*cJNN*Sn38HD.-CE'1sj)uLh@*rK_s%C
%V>/!5cN5OGK85:pn:Bd8*.S]f'[3:fisUnAg#T,UglI$UM.HNt!2$hh[^`CfTn+?p0'/?0C\>'WfZ4:2:g[HAG4WhX!=oLpS?UGB
%M-JpiH2)]Js(70OLp;'miO0p(31cTJObR3FT)pGYRmB5E3Qajug@N/SpZ&&-WA5?c$iF-na2M]gE;;tWI^m]Cnu)n1i)APrNh]C.
%G@P;7chTYUKs9>faML,:T[bIRTBglBY=GW*e&"_GTR>!-Udt%i#d3`c(3Bf$D4#.$"hFOh4FY+*Z_<PDObXPZ+ZPRoiJ?fL#t/]B
%Qi%l@@Q]lO?n1[;"HIJ'DTX%:h8%8d'dFl&2AJ3&<`@PlVp2>Sq4HF/d;$n2Hgsr8cBlrR)LNT8h@#_Eo>tEg<[,g%/Vp`Y));9I
%[@Ia8RhbAk4Fr%o4QY?1;Ir?/.t]"+WjDua[UV&3"p,sA4D/"E/;<1tTSiV/@B>^:hC<tkZU_&>Xb"=MiGp;SEBC?5HIjTu35P,R
%3[dYi$QjiDLg>l[3p6m?7sUe$<d:*LZrcA^`IulA_L&'T)/SY%!iE%SikJU2<3Vlm0)VQ+O&j5:;kJg*CtWcY=VIKA>DLVO'@U8-
%.3tAknr.3O$5^?@`\BGN`#)c21)5h6j-IAu73SMb*%>LZ)eIookoG\&UsRsSUT[TmB>g!NoMAA0eEg1S$c:f<ZOtGW]RJlJYL#I[
%Am64m$j-mI\6MjC=^<%-RXMr&+t,*0,U'^W>"-Db$)&IP22>;;$+)T''>1-[F_RIQrZ716V*NH%p1FOQ2Y4Fs!#_)&iP'%b89)q[
%!8ikj(_Jl]ho4DSG8"mndTl<UcSdl'9(DE<K5"K4p2\LSIiQ=MDWIb+,Bj]dEI^td\o&BaW-/67!furg?GMut6Dbb>_O)')a7DY)
%1Dmp9I\&e9;dK)t8ll?e*`[IpHjUi1*gG.5,q8E0;YD/>+deZ"=kr0H<38ddWTKOJHaK5>e%FVQ;f^t4=>b("9/H+d*_l^,5,qdG
%#*DoX-h+p;O",JdSZ3Al*iJQAXI;,Hc0^bepBZ[S[;d\co*h?s5'tiXdV@s>V,mJAAPS%jgX&S,/AMoA:9bt#a!8/65"9OQ@-Br\
%p7g`HaL-[VmOFac=q!RIc#\k'PsOuWaa[J^J>,B,Rqns!nD:A7FT.uL%_f'6_=+g;#3r\fm_Rr+NsaZb#C:\-9EfeW#RrEUHXTX?
%+Wn\(`sQjthSKnPE0T>c%=O'm#(kRA)?ii47hrNY.-4T_G[kSiplV;6[n5QHJ]Hqf0*k]u\5?&iB2=*U[e[9=TT7IKeq9?#T:%au
%]\<7SfYpC$K_p*5MsJ[F2IpadW;+8_+Re[g=LmjsBYbE+@Nsb(LHrSeQ9k-#C/%JHIC^=Op2IH-2K:Dlk5$A0;?pMAI\+>l^r'bE
%s#=_CQ=;-#i<u0kVjsGZ*%.@:nJb+"%Uh)Z>67`ST,!aZQ1?SN5I]CBeX23+K?3Us'VWc&WWcXeb)&L:]_SbhPrP0,WinZ$Mdf,h
%G9D#`:7G%;':)K1-ba0#)``OHTe@Q2;fMXiZILKN.GjXTEgB"\G/kN*'Tge(Xp+AffAI4!jAAu]#9liG-?'4LOj8+L./?C.T(qYS
%.Rl`GY.P'f$6.#KqP743Wn\7qAU#Wm9UHRgl*+'^P]s,#WPop<<j]#"A:t*[7YM`Yn/u:QV_Q4g#QuGe[32lBj'f8A9+eNCVH=Cg
%LOE4^1\_Zo`Ya,-:ss#\c1u"jMS\'\LoFo?[L=,]$@(_SE\3tf#&[<T6?!&Z0-&O#9-?W<)n$15)[Hq2%RYdZ.4AAB9"8??mQU)u
%lm:L9KB-^l\\.EKm6M18R.qjL.4(7jV"a'jYS2_l:uh[E@rY!-'t@u;Z52pYOJDrEFu+i%Hk[bL,e=M$F9X"8D@!tPo,e$k7Z0nY
%P>*F<%ZDM`&Wq(#!OE\JUZ86!Ie7JNTeuY6Akuh0c7&.W?"[q\gs!fD5[4K1M>j&F54D+eC6:"M4S#m;dpoc$l/D-ZDP@Cu#9rS<
%66<`9n]C#(4p=RVZ)#@PNL'%'^I+`42$Jna*k,tTd[fC@8ZQ#5n_q)>I=-V;.I>]PG:BJc)u-Z9C/:P^a8eJq>m&OC5)(@na9l]T
%YZJT,0]K@5dIN$4%$312;K/P)kb3*&T\1=/ohbAUBTN/:B(\g5#kmC$#^]bIq5P,konWtV<D4n4L6*5fbflQl7"D-,USM1TAHMuT
%8'nmff)t&AagP$c+OR$E4Y55@#<(LnKdhS3-ph_WN!t%)3@",@C8;;M"7aMg2RAq(%$p(VTL4,^+^>G[[]d%;foS6OB9a)'`=1m\
%jfEL]06MZL.^!po\<:QmM8@sj56/QJ+!#UM@b=%[+pr-8a<o^H=<Tf*8>)-2.7KR6$:$@[&OshHV]X0\bu+'%8H)ip;lNAaWT9BQ
%5$G@;%YniEcm6N-TY+hp3Uir*0&)=bF2qKVa(0sBL*<PSKH::]G3,8jbnCq%pX;B<s2CodK78_s5TgK@cOo,4AgTeaGn1$;/X*-C
%P%:IIqHa9"nlsi[oTW@'GRBlrO`Gs:Db.=^V?=3lfl4b4jC#?PGTo-t_?+SpaQ6@?>_cabj$V)4I@RG,652)$!Iki1$;Uai+94BR
%^r*?QRh&r#Z]/XQA-7p$aqBXP#&F9bii0ps,V_PT2$&gPp-+m2Pt-(jrMG5L:Q5MM<lb^iG8"r#2Kd>boTTTQ!m.Fei'IHA82cM7
%>j(D1O;VdB%jfFBV%K:HODemGr,I%OKig&<H)SM7%ac0$MEh.Q<&Zqd7:PctFV5-g)12eHf>[]On*FbO$js_J&DlMO&I34#`-><*
%=>sh"[esRdfS!?]%'aE<geJ(&YaonhM6J@D$F%BDjCY%#Va.rQQG=eCDL<h;F7IJiW/'BcKFV7=CuZ6I8aInZj/$Pd6V8d9GuWl_
%n0p%V-.&KZoj3Hth]XP*jd&1JpfW/KXce+4q5)U_Xet`Khm#<5h.09+Mr3HoL7gg:e*)BVJoB@o]enB&1Dmq5>q;E,-!9_nXLH)T
%U6-mj"I/\,ZA<:Ji3H!$49]ZLe$1\](0jRp"6MG3=pUVi/f6t6Xfu3gP&SJ%\AHO(Sul(NrXDL1/6mGo?ec:j_dX--Q9U3Wr2m?-
%s"c/#ViPimpsh$r3V*crpp9bckC<$lS,Wf;1_=*+h4)P9#McANE[:$N:H9']lDL;bI0qI5HW*98E2ST9;3jrtQ.u8Pa+&i)5QBh`
%s7s-Ks"X0\LFV#U+g;$X;e"kO*urE.ce9o7hi%?Rcgtn/Z68Uj/BaBKi1eh$_*tWj"Fj^`"UQ-J/V:TV>EncSh"%2e>(SAW4!e/r
%n*64i$fHcnbH#)Z7:<L@S7H"1FpZ!`:hM3oTj;+]8D9/X&_nT:UNX.<_AM&O$I`Zj[c).Sg'nM!(bA>i]bnRKMD7ZTd#9]h7l<c,
%GgVMU*e.NW7P/W-NY1'A*n+lX:O8`Y.t\VK$Hi_BP*SD^X14+^4n:AZLM)/U_-I[0C5RqjN3*1F1,H&PrM2(bqD4RD(Bp8R2klTp
%N=CrT36eMsZCtErMOda_^9E2JjD7eiMkJ>\&tO/_X?^EpRhqL""E:`p>U4:&d*c!4*9G_INq9!p/^YOXGPYikNg.5o3CnIYcDeUg
%`,h$G7m9H-\cd+Sq(;soeajuZj5G2mFO73#+W[(GqkS=o]0WWfcKB8YV6],iVmGu(+LgEU!-\e>*(g#QGa.]'&KXSfQJm*dhj-<a
%LRgWTkK?Rm\-K'"6b3MAT6QDp?K?Gs+!<.@*tNk'_-2FTROAuo+5N[&7":Hn,5^tW(UWgb._$l.S`$\e!hjR7<?S"(lN/Nk=W-Gp
%mVGH!!U^U1qRgBDC-l+)07#s8q\4aaHB%?Cqst-LO;\aZ&K;A<,r^LQ%De_Or/Ti7<V.Ir,e-Kj84bJO6P]NjoMDT6T.eO4/PRF)
%p9Q5GC:as]+sjoN':n'bCD0\Ocg!nbHh</ZntJs&K&=s(C,PDESnNrs*H4Zck^\!`N,JB-#pU__'JVY3G01XNj[I8S"MZ*kKN`JT
%)<lThOYaitYp!c`\5Ui>8D5S/FM%:h)BJ''KoM+W^!]@uCd["AW.(q_d?1e;i(,boMo=#@qg)3<aMUdOkf(!_&k2AqP=9eG3khO=
%<H-AZWke?CPE>F:R3].,2+\*-\k0)ol7/^m:a`4&dC1BdOK]n.,e-KJ8P(SP9(/;0MW0f=7@3/b(TsT90d_rB3MoledY:AX+3dP'
%kuC54jI<0K;?WLrQ)12?<5D#Vkps;(_5@Y>8rZ`H[^;\-GH*s^0qh)J8kF@DTp5,D$"[M".MPd(l9_I9]9K"NZqD?1$.%m5*dp['
%W\l,0*uA.u;1La)UQDi]4:4Y!nkjqL"Jh8hO+\3Fp5)>>6+^['PdF(S8kC[6;?llO8[ScB91MQPAI<CSc4gW4V_k5CbscD?IG1MU
%AN@K.2l20jMGl/dOHpHCi#X<s>ISstW0"AbN_2krJlFC<h9r:N:=l7?Kp8-3<Ckh?X/b):oVtluP@Bfm%a?K2lUA5H"M^X7eS=p3
%%b$`:<<X11WtYDR;(HeH7FoV-[6rTHlFeBYp$!X/V0V0!Vg@IPpN3U_k&FG9qK^atJlr#ZlQi`A/Mdj4/.WQ!X;<0s8SED%M.h<`
%fPRU'Tg0'8/SuP7$<p,KdF^Lrn#1'5Ouo3dTfl"P[b%+Y[SH>De[?AJqsq\XPi5M1>_KTi^FR97WG4/j)Z7/df;ZPWONZQ'8M3Y^
%(?ITnn&TOW)YK:mHUFu0VtQ$XQba]2?$6Z:X*1&m0C!_O9'o=!4ka16G>[fi_/JO][2S^L+/CK]-1(lG+mpYd9AW;`l4Ea-IaBP6
%V5+oiYKp;8QMT26pZd7Ag?KT^@"935@"R:%##hgk3*6?u,7dfi\HmipmZIiSdYgZK$%>AkXOXDElj+(!0Fp5KYnR%qL7"-1<5\c\
%lA-nR77lhK^S<*P11&JK"F'*e[@6j=rV7WoAga=Ze<h7lhA7,0_Md4%$%>6\X=AFV*#%*R3i8]cfs)4eNpp/OBj^U&99IF&=-"\r
%:<m.FA6Q4KFNLm0F=EE]Rc*kLVBoB2gncCGZK*W$ad+5sBnpYqgne<)Aahs.MO49hGACr^<UcBhE8A*;C9NQ$RG\Ql1F9]4RoSr^
%qIW:O:cK,bZ:j6%\!BrQqqOQnP!?"9^'LB[H:Vd#UM3D/[*]##WM:p,73Cn"^S-`iQ+Ue+$1:Y^6ct-Yg'N3u.BV.10:/6,KUV?;
%-O8f2i]S/:hr[[)m0(0KV04>6&l\CMnYVhFDfmG+G)!aaWRbh>:Ubk4ef#O(SSDrD\GH^I[KGr]@=)Y[./I`e)SIQ+^"O,<_JL#m
%Ut\$0Sp4K!X.SJ-?Eo,%Wbs1Dl+0maHcg4sg<b!VgnjFn@F3AFHf`%]aM)rP$,:oV^i([=$,1)iM1j<R$>9:%ZS(#>IRb:$(YrfC
%M/1M8%YphhICKW5:Ecmk]Ur"J)q&^@r18/gmG=(g'AOfTpM*j@lH0-E.*H=)kgGbqdYk\A"i$rgk=Y.Vk(InkbUGCKX>8tcpN5O9
%mJ;,/[05\Ulm1dEpcT3M,]1WL$18G#6dg]'h5cXPL-f/L^S=YM]=1c)DYIJ.]%aot<;0"'THR]e]6?p#+_a<^:2l8Qh</mlQG+Bn
%Ti9q<G43tk]A8r+G@(WMC<5:4E#-5NU$kP1ad@#Z_%YTKK;XqM+hZDsV2IMYi2]29cjl$t4"$Runo"2.SNNa].-8,P-bK`KC#eN@
%cpN:A7.bBkDAg.>EYK=4^"^5)?V_?794@:4n(-,YdS?(@<YN.$opYGuJ3*r0Nhh(9Hq2%K&\]K$Y7+d=ra5172AQ'r7Vlc1ah$-"
%deE?Qh@f9E1Gn1ie2f_oIS+mJn9\$4L9dF<;(gROYH$08r)5gc7/oI,QC;Q=qSkr7d,=X5!KjU[$)h1q;?^%JM_<qg7Vg'KUA>>8
%5f$`hJP(5#%6VJqa9J[.(ZE.G2/VRaWhV5)JqCTk"d-0c.TjOUkmFHS(M1EaZ`,*-W/5JU*#.0Q3f"8Za:=g"GD$4%Or*@K_-Q&Q
%8pZUAXPgPj#[<;cV.IE<9k^TO=e5'4&8m:><cF0Qr7ht5dPI-&k+ZMp\5UifbBQD)n8l3U9C<@16h'Tq<+tJ<>-R!X$1[2Hr#;X\
%T&;j4im49TaMo2`roWtd.'9ui*.Ks9&c)SRns9lk$?h(($ljj,OE!=!*CL``nXEl0LZRPl+7mOVIM&NLJTElrReB98_J;DQ_G)%p
%+OUa>c/NFYY"8i*/iXifTt*eKC8,/TV%#m##YrE+ml4;T@:)*LJnXkT>lq:-^i9.O5d1K[rM/Ea@i3ih\J,:aU%6GL6tKf3*CI`J
%<+oHH&BV>O&5bZpq%5kgRW1\YMT^g6+*^e)OuOUW]YhH_&<uNPn50g-VjR5NBU$27MsD^!itnlAbVWg"a[rf<DC*B=`LKLahQXT;
%+8H6mC</Rob@CGO$)ZM\:@PRC1Nl&-*!"#(?W+YYrO@k2+gi>@$ki[NfTY?i[iUY`,^Bq4*#N@[&X3;`+=BS;_Zop2Y=g?pgs6%(
%7_&r3Ej>tMUf^!-HT!_2#?hT]-`&kZ:&j:C$k1-)M*t"j*_q`4PCC?P7XL_UPThFACpL2dj9)m(5Q[g&!GN-5gP1.%:Mm76_F&tE
%N+rCX&"sBl&;p)r&a"[WUX[pTI1VNsBPo<Z4RE;9q&=op].lQppq7j.1*D2"L?rZ2]k.>0,/Q5n#\9O#VT>j5(odV'Aq"`iXn,4'
%J9D#CN0(Q-H&Ofjg&YXR=e($tp?VoQKUPX9C<p6A$k>4=e=H^9qmI'07bpGh3t<\Q5t\14TRRsR1WG<6!DN2_6EGo]gYL1RHUS;5
%/1Jl_Ga:-1jee)SB7F]VJFE4&m*Sj5#?iJ%'n6(t*fF[3X_a@JR_[e-eo=US'q)Lp1th8=C,d,Up+KlX8,gXXh4eU3A5PD-mX8"p
%;@N_En+1'cdr.g8#PNA%YtYG"5W@Vs6>-Lh@tKD:+cS!k"f2e:A@)=V'2=$<$WnPL8PEW8;-5G9Xp#4JRTRU?Ae(W'j+<>3"ok!Q
%<iFW#3)\=R)T:Q;\bI<(.8?kaF`WjdT;>c.1'P1j$t1%hN3?:=9a_$28Kc2!@7^[R0p2p%5[gpA-A+-L\Su6s"O,Yd8;n>J<-S#E
%<r^paJH'Ut/Y\J_Icq75-#u1XZ%:eOKQ-1Y:'m#a5\)7uW,1qQhC9@T"W@Br\`Sj/:4[@&O6fW&bemgag1LsjDH>:TdtlR8&5"DP
%3W:tD&2KY+VGq5_TQq+,_T9M)Y,t9qaE5l5d7@P:C]J</Jk3f\"/espQk_O^WZiYnO`>p\X[MD*E/i6`>UMHB$igDKN>C"CAT/hp
%'f=MXD(l$uTpHsn.e#ECl'l+V>r6;S@<CJP*B\'N>:CCS#V\b:P"/%'kg>H,GCOCfJM]8=@Sr;6'4's[#;IbG?/HV-RESB"IOn^3
%\57A1(de*TX9El_UsU]b_5GG^m:5d&#G#d=rY_tM4HrZM.e*$4;Q6AN%s&+Re>3ug@;`'[$+-/$?6u^h--Q>DDN@h.5&F`b6kJ;U
%[LDl`qMH]=OnE;D-'i/K4@';.8GA)*DEj.Pd5ZdZk:nT$V;M'K\F-ZJP4$0]>3b2r`0U$!ZJ-8(V0S7Q:JQ71cAc&n@"n;FZ9:0$
%5_j;O_qIA;o5(+u*X#Qa33F@T[eSEgTJAPG%F*#$83;H&R)/B].bGKOkCK+W3t]0[N7FK+fJ9tiMS/;.f&S[*jN#*"XIpf.Q)ks`
%"Wa9J']70nGC_Kg`MI,_r%QhOYQp4?jlNoP@TqOXHlhA2!(9,q=Is.VJ![V=enUlH7CsZ6T.s_PNAuZLhbq83gj\/JR3'hQ",DLC
%q&^ZJ9W0oKGd]<"*A0p1j$"Fh.CGGVVna1AY7(IUOT5YOj:E/#Aa[bbgr;'@K[PFuG_dG%HN6sI9r5qP_j*05<Y*PP+f/^%>?0C0
%ZnDDfQm%>\4qeKEgcuu^J?Qnne2;7gN2G;L(tl31>JkJWeR'b9C+&k>3\+:\mHF(?5/Lk;'%E]=@7D;a$Y]jP,D-i!cj.EF=ea?s
%V'5^jPBq@.)73-Y;L"]L6jk$kY1Cl8[esDP-"[\(:&%_0+TO&i#\Sjm\/BZ$A?@V#oqlm[2a4YYr]2[42XAk?A3b[]Odh^H#[A]t
%:B4fOcU2!Z%O262XPBd2%t9]I7X/[gPcc&<c_#a&f3k+6jlRD9[Q$tiP#s.uHHc9J,9qU#5U*J!OJN=?l27YHi\d.Z2gb1P"*;)&
%GB^ld,-hf1kT):pA/b/@6V[nk8lu9oW/+G%-d0T+qRD+6h(s"LpICgq7^hU]m]j!*`^%icJlP&m1(i80p">";l9pi+:EW<DfL`EF
%`Q9/oEQR)]/B's_%>8\aUa7O1j]SqNO(BERcr(9>*ibD=fYFCMX&i&cWh-OM!"8=1[+VdFrE`EJ)70b?2#<tT(^n!mgG5(E9"2l>
%NLL@-^VuGsjf0A3#*riW<XRKU,XbKnB%ZkUP1jnu)Dt0^R3`Ke=bd*qo)p,Fbk.IS2DnDsD3iQKZu3^Aae&@cFhH]`%ZO]F<>SkY
%GM#K-3mPie[7AXrH\%)=QjYE#fqnJ)<h6=-,"",NiFr)A)4[ph%Aa[.O3(#HCm%\A@^URR:/TJ+2q2s3N+SC=]js[oL[qUZpIs<Q
%MLCQ5=j\,biZsqTLUNSt81'S!Z_F"V>arMBUU;4$@o$?=J<Erc6P#6#d%M?h>S!1O]W+C&SZ9=MM6KZ2Fpuh'('#7k-pj!Y%B*u9
%'!%?;#&_*]:?.AL9UkRnnnZ8o)N6OE9NaQ>0Jj9\B*i[^5&'qr_4IT16(A+Vq=Il&?DeoTpF>i7I$uB"m!XLTCZ;hU=8+iu3:((q
%mFYT4E17D.JUK$H(njZ\YI>$#-\<Bl^lO7f0+X>:f5cTd-JFM8QGAO&TO7Y+DhKaa]L!?P<[IK3&onk;$B-2lh$F4)'KZjD7lqed
%"/]X_@qi;O<@:AE!F-56b``D;e:8Nq25mHp"b\luXDGoXr)@QmL]GbPmm?;>6;J.2FfRhE#\*]t@rXlo4V3>i!hnHi5!1$uN*(o=
%DDW7'>8AEq(lAH5Y2)jkn:e[/Sj=u,+Pk88J:)>:,]DBEpi]3Xbm-dmiT-]+_"b'XE@X0(,0,+b+SeVp(qVoJS3R/q*g2)D.3f@g
%!n'g]9<C1s(dI%cMmlo,-H$(iO[/e`54F3G#`"6Wm&;/.Z+nH69e@%r91YVkJeD-@`5of[p5d>`Ga."Y;1VBn^-*=-M&C@0Tb.kh
%+s?283.r[6$/UVC^o+t.%'*/31AW&>rXR%?MZR(5T-mHImui/U)jOkLnkc0a^]mt:X^4#iCF.1(ghr0R@qpYDgPH;<APgcW2X):u
%\0sb:$5XDdU)`?0#e,7t-4fg3?IZX,^)bes/76=_@$,)dBb87BUg>*XE+&eAMf2/efu%\<FQ+bjFY8oq@0jI%P7:4QCj68aFg\R9
%DK!cg76iOM:(M=BnjS5&FQ/:1NlaBo"[0ja6E69iMrX!@#\WB&7f7;hMdYR8Kh-4=-VUd/q%FF./l@'r5q&A;K:S@OMTGa)!%Ta'
%8[:%VR_gNaN+T-G3(u8lV$R1lb&.*nQ6o/YT%"VkGtEp.\h(1X?qKY=p$O*K^sbOXJtk<#$)uQBJN2st+Z>o5X[2[QO8mI:7)PB0
%'`M>J,_0c*644fh_kg*_"kd6;6=ElD)Rcjc]UBqmpILf?gFDI'86g!7fb`!^PC&eFQs\C!ERC4US_k9:q\0kP]?Kk[\R7.fQJ=[i
%5RQT)]p=9&TVl[!#/B>&;.]2f3'TQ!qZ/'-g9I7S@[Z.3"2&%nebc"HM+ehl?S2M,kV5jsa,n-88jeG/QS]rO<K`NlOG=n/4Vl5O
%J5:a>J9bMMieAaEd_u\eo-cntDZoB.LIhUuB71nK`up]k+]Tg%=B2Z&bt'OKECh"Q)F88\KN[WAYtJ!\%l!+Da-_3j$9Dfa>lWek
%IjE4@iQeLV)gi$+emfk6j%adI-MS:"*!>@*!hg>1H3AW_!)".D>AuucJe6Oifpkbj#Y`aH7eh4):-i=DZZNKu)VT%/cc9kS#77dK
%>Br5RQ!7/!@JfAl-OsCMj!:o[l9+6)5Na5amp$.06an2\0ahaEKq["OIT5n=V-;@H8h%a/0LW^k9?ifRLMQ(+\H<j&6$G)M(3gO1
%O'MFh(GMs'i)%g1*I$=ek8b?3c&?O"s3-EffOP4ued,gDGYJ>sY-M/^,QO#XY$#72<330IX+>@^U#SNod:`5u&l-SrLJ5.F_/Gph
%,eTV^%*&c[Sd4n9Ys6Sg8D<&[fft14H*TBdB"]>ImNV7e$>d/F%'hp@qJjU[U,L"GE&jD.UKdMocZ26\$8@$3]`^cZj:f#tTHHhY
%U3?=GJC"<`$e[<**lbD32Rgk2MEfQ<VCUIb^FCapmrD1,+qiOrT$MrXd`k3q1[u9LcXV[EBJ?O@%RBO9lkaL`%SO\aB-.\A)25"'
%fO7HE^6Egs!F6Y8@!(W>S"N\!=qHI8/sVBr72t3^eMYKT8S@l.)@R]F`@W7D*H?)Z7LWpF\Rjb_7*[TE,,CND('G#<R5`e9*AZ@7
%;C19I]$<5b2BI4=lOE-:$MR\rQV#I/**4h/!u]@o[o(25MYEV9T<V6Q*YIcCn2JeuB6/3HSfuDbS%VT&4^kW%Y]TD\1_As3Uiaee
%<lCDomh0XF%,%@56PF^5j^Y)JVBFO5&9gta:7J,T.k2B_p&r^?PN`Sg_J_2ifbRPS)aVW&20W]_fr]4;_JX.0k3aqg,C/noG6c@2
%3$`dQeRBpq?qB?!Cr:<_h$Ic/37cTMOB#EsFlu#7/Bc6X!b4s[+m*H"a9DmP6JK?.Jp;'b[Y)'i*7,%0B2B7$g.o_",tH\rMPG=,
%SY0)%a4nGR!V:KomEBU?45LGg,91=AgG,Mdm2/ssFpoq7*OpCQm_!Z6[oVsiGrn!"%#U<E]UaS<F,5jcK4E-4HK%["br3j)E@9]B
%'irB1$+&:YKt.kKVJ4$)iT`9P204OCjF)6r*Ve==`#mDE(e$?dW&nEE$;$u[!2(hi;g/;>kpk[&b#%VO&/)]:edcFRY@Gi25s'b1
%OEQZ!ca`cbdS9c]B?\Icg-O6-C19dZmBDGbk"%RY8oWXqR^<_>;RqiGBa8H>%=pq$$0dV$l/uuec9IM96I7c#O`k\0Tas5KG/@d`
%8XZr<MiM']$YbC*+7)1ZH4rbpda]S;*C1^%S%dQ;4F$2tS"o?R(oUq`ZlLjP\&'-uD$T.pD-.cp#7*>BRC33.eROVn[Y$5"O2'%b
%!`jAcH_To#r/'?oBKN^2%_H6<cuZkgNjXM:M-E^.JHNQH)[s&sTaGE[#o46#%O<s`>QRcGJj%.X-p']fmGlpPhc^+)%1IU6P4km&
%N.2^5Pl)5:2eB!<ceDn\XP2Fk_-3<?S/F'$%^!&THjUi:dH&^cH=+MMT+NT.0m3\s!^BI'h>8LJ"HC^(b03a#?irs=29a,TW`2aW
%>0-7u\(RP,OCu!32Dp.,<GW[pHhinE@d@D4'6>M*Fa,,g>@qL5i8QeZ2jWYgf\Eqj3kA'Q._8@V/%SJIRj^3E7&`KiVH;/fn65%K
%9>:SfAJfS\f>3oc-h1'k(>i:)FCsiHf"cQ/Z#q`HL):q:-WkIgU$HZG?>?nYKAraRf<6ufA*QUeTTF94;Y+tHieTQ;nM<=k1GC*<
%f_7LZ>lP0b#KQhk<j90dhc`bE]bkoK)[-G"+Xh4So2[X1feXMi$lI@;olRW4a@#Ud)8lu'Xa-MRiukWCq@"5($l(D68;O1iAFN!Z
%iMZ5"e;k8&K*7Oo(t<1=p;5K*J/bn/cN)b1+XQsiC*/Yke%")d`X@-J#=7uck*\p?<erPqaS2+*1?h,iq(+XX`q1N/>i*OuVt,G`
%3c9;U$m.H%%Z^\N.;e.3o7r\8<0Tu][TOCs:RK7s-d6*T<>Ehm#P60@qE)r^ShWUO<*G-"ZVj@Q\AlQ;Ybqk$(BNU$cJ=9]gW2_P
%#bSMO["cBf-_P+rE:E:hB$;B$JkqsS"D7AT[UpiH96NrCFHY;bP?sh4InpN?gq<H,+huj%BeL@rFI<OQ"@_<0b6\jQW'5'kGLmbZ
%6V`DNp3[b#\C2OdGU:fk*`cmF,f$`t''@:k-)'j7>i$@'&pUPf]FNH8n6?hj-T8\]P-]qUJom8_LkL#U9EmX]`hg(XQg@X4=<S`F
%p3O0P9Qr=&$C??5=qDRhSADVD-GeW&6,(QB%@[KlIZ&F8PKUQ0o27:Lb$$OBA`V$r0L$ls_h9fL(JW5E_.`!8k'7$KA?$iUKrZsK
%p6kk'7)\cBRN[L.Xi-[e/>QE0Vo'-[Wo,1MJ@m<+_CAaW;Z'%c:1r,d06>,[b![(Oq&#N^R5!Ed(.X$<:AQeL<(%RV'(bIX"5PlK
%XBC'RYm$-n,HLI&qtRO]H6UQfE()\U9ULr<3T20GQnTbD6jW\59UHF\r=*p48PGM6cPYXa@8%MK:MJ2"KGi/VK-#6Y<#G7R>h>Fh
%O9dQcfE@&SPmB)^X9gTu"`ti46Ho87M%DI[B_j\hN#7NL,gGQk0cFEJ<&%iO4hj1+/+f4$)E"Nu@`45+7<k=>0bZ25]DX]D@PV&+
%-5gEiU!bpoM%#S6:PQu!-GohGr@3q<J<5oUaY3_&CaCj\"P:LK(G6,HOS26*_OO88>aVPc&f5-uCeB"+bf$13@4>HKM-#Hl(G8BN
%4;T>s'mn$30ZRgd!?PaiKup"N_IP??@0#N)h8G#8+Ne4RQpcXrK"3X!'a>eoqj@dId9FfLN=(j]7to'PT*U8a1P'BT\',7*+!uWS
%nsL2Elk1a#P@CIWi]&YH@IODc3&+NWb^`W3@^,jLo)I_QVG5cS,M@C23WeUe$1+'gP)tP6PJE%g;pm!r9?H'7l1j0k(AE(UAP=`0
%08`_OV-(#3^FSc97JL/rE`uOebQ$@4O&f2fp^#"9n*(*Bi</kI-9;/$Y?>+c9F'Ks&leL!FF``Hc#eJpGWNXZ/Y$+07uNFS*RqVF
%%BN)6nk4]`e&[GSP&_AZmu(On>%ueDDTN3gOI?>1]-ZE@Z4Mu]PpA8IfdhmrEBIuC]TSHbXE^qEN9>A<9O::s_.[XX?:c8J0jc-<
%P!IHRI+dgSG3kS&JO:V:RY,1:"4[2pOj-u0<Nc>-+'&"MH@5Ro/oP1%gl`)u*qX&lG"^i)*+@^IDFko3#=^kD?P:!&HMj`4958+a
%^7O?1URst)$,rMQn<G.XIib\WTK!X8*g!n^mQB^/Qt0=dI4N=QidD4.U361D_(ERfM6cl8L?*dTN\]dG)oZ*^]PiEDY'&U162#0Y
%IC$tnr@Ml>[l;IB2oCCM_h4V8J2R$_JbE7rGF'EkH,N%.LI8'"Pn5`.l;`K?R\>i^5UA#K8?.$Zh]j[AZJ-!c"b*%.4eJ/65A%>\
%(ih>Dnkc/^hum4X<NhS:[?BX$DRTie7-J8[6K:i`j7)T>?OS$oa)Ct9(Om2br]Ehir6\.=?I^^)#MZ))Tf3Oo'JPWUTn-(WDlI-s
%_dsiL(p>!uBujfBfptlhN%_hmG?)rXW70%:<U,=7L-9"t,H@GmP.G0]oY*e]Y_HJ-lB'RfO4n]3COE:`fi$W;gnhVkO)&kdDs3s/
%m1"E,VFQ&%o;>626grk(-u^;?T*C(bfqlQZRU1(qdXsaP.rhr9`V3HV<DA=1gV$CY_d9,(OQfTaMbo2F*E!nKfdG?j]6DG@W:bK?
%4-[$DZ9s%b&a^.b-/6fc's@j>9@#s9^ih/Q+DIaNa6h_[of.Nkk^'0U?-44tHagG=]uA^!m\,j]I?,'>Nl$R7G%l?27`HeXW?M9"
%@42(P_=%\\BP:]t5ZHMk&J-8%aFKf=GD&5!pSJX\C>C0?dV@Y%lb0!c&u()f7jmA@mo9]l;(c#qK"KN!1oN'R+VjpH@S!Q14rrr*
%.1oc?3lFEcoH$")($-Vf,.L9D`"pV(W5o9o7olG9>VB;?.He/S7m-,p7pZLn2l&u,m)2G$jjML(!SgL#&_s3]U8/U%OpZY2X2L:Y
%X-L>DE1nFaEe<220nDT<Q]R&_$lr4md\OX6R/lZ>1JoBg"\gK=/P-UTXW_F'pg%#91iT@sM7U)bg8$T$ShK#o5O?iq4jau4dQMmK
%\3iUn`PGjljn&@r6RbGW0q>XLe2og..95&Y?HVI"NAQ;fC@iMq'r5Z%W;u@N;c1u$TZRRi7oDd`]83HmmZ:F_[,LW>kYHtW6ZJrq
%??>5ITP[6)<26XQZ$`."f4_,f=&E[W^&MBV>C6I0I*:gl4>*Wd%edId-hn]n(J/'0BY3K'?0X&Eg:\OL/_LpFHf:;m:F.pk?u487
%.)KX0ld1<)/chjWo4g;"LrF%ZS`O<sg@Y`kh!U_r0m[-l//n,[',k%0[sM%Jk*)r1M9K?pD90r6DV)5kN2gsHT6ZPj9:"^`D[Ot+
%b,(e5F1X@GCL4+\%3_4q]d[Oaq7b\5\@LFb.Q;skFDd>M9BjI=Gga0KeN?n>SD1_+Jn&b\%#ufZ&]4AA/CIG;;5#W]3Oa@=8rcC'
%741TEQVrjdEn8BYeI)fm*KAm5LsCo`>1u$KWHP6+Hu^>hMsaR6iX^@K_E1<BOPUT)-,-.M(\sU8r/Lc<WcsT`&_n\Ldq[a+kCE2n
%;+mOZK&9Mj_4)YYN?5o!.Qr*eW(X#nYBfahp#%^1L/sAO4_d-+*p03K,Ig+G#L1\pfqY_6;XM<1B^#.,gnWZR)LsJrD14@?+mO+i
%HRA(Mq28Q2]cXr3F&r2nZq'`.IE/Vj?9M-6&-G8.2roJlG6n=bIU+4M?9b<1;$mB[cjDQ'IC132iH<NU;IR0OKCfr;75IL(ql2qS
%GLd5'd<Ch-I"e,7OK\/Cl9RseeIPQ=oI(!UT(cdC=)UtoUkJe-`.\?ga9s/&VneB8,J6PU$%>rdaNALg))A]lBLm"2^=86[GpbNB
%l(PYe6DX;MU-nQfe[ig8*V[?UJKeA"/eUUa.X$U^=i.L=Ohi&)7<Z^79,2kq4$>)2H.ZgJ]mef9+r=4DV2-(=rnL^Noa#M(pBW[[
%534#;kG!CsFrd'H8:nHaOj&?!&k8nJpS<q!adkE>M^d-'9KI4Y<D>5)^f`V\70-S48sm#WJkE5Hg<`t(go%OOq3olt?p]SE7$p01
%8hG04^n(<qT>-*4&oR9EPAY]O.('b[DYJ$CVq\m`e`h6qkrRYgS]X^:H`+<9VhDd^mSm%MhpZeL32,di4PfF"NMkOE=66D=-GIP-
%Fn/>;H`$knmG9DqFh9S$TPjLA)5u<':C-6/mur@7h)iTKDYJ$/W8#!7#^*b'91$%@`"r`R:+PUQmoG@X3C;r!H;V.u;_dP?^S;Zh
%F-P$1<MOI+DV_6qTnL.V*-H>Hc_;F[Tl6o#h&II-4oM>1YkV`C22%egm%gI-pcWUGNQ[6mPi+0F.Fn&70m/)_/i'78GF"Z.h0XjQ
%>#"l_-E'k9]%q]jW,D?I'rp$%WC(g?G:QPH*9Ydb;-!*iC/h=tqB?U&a].*a]g>^X`ru@(<7T5*5f7X)IXY.slK60Y:9a!d^EZn3
%C7(@TQoq`-260s?=aE63>N&`!X(ZW+KM&F^Fb8LJ[IQb1\lN/\>'d`['E!UCea;3BH$)bBbHHb/h<nq/X'6`J^+4SR/%d&ZI9",P
%M-o*,:&1jE]h8@kG41^3]%steYZaESq#^P[>NtgcDYJ%&XO"TY-g<1C3:X('E&>8*f'V<ne[jSKFg\5i'kOMnfcpsJ/W[Uj\okWo
%A@HIN?K&$@]d^YViA\`bDM;*TjgT,]<V`3d=/5_c5=[pG%;;\]3Rm;7IEmcCZ<but/Ab\"aMd=g<T@lj$>HOeo]6H_UqT#7Ub*$0
%%m(N1'E!k#R,_;_W<@CVGADc;CA1/WV%X0Ih0W_MDYHo"YZk^0HE",Efo]T,lrMc$?:4'[k`P>6Lu%L43b"*kl'93$6qtEeN8<nr
%Og35XP$WM%G&OCAI=Wd17EHNHd`[f%JLKd5b&6sN?J--NP$Z/pG&I_UI=Wg2p!%CKVS_$PZ<W(/DYL%#g$RWJIWi?tb+IMX/HN6)
%$'M20f2>)Mh7L)BDYL"hg(t$o%GA,C]d]Ip]6?lFh<n#-[+i8u54*N3$)i89s'*W\[sM%XmIR2jM6>\&IBmWq+\OjR[M)n@DnV$E
%[sM&;m<7quA\6cf\nibh*G)[KUImRa[[X$a^8]E/C>?9XB24H2;9n#CFk(cE1u0.LlWmLLa6EFM<Mq#7<cL?]i7f(3F;H5_:B>`:
%$gr1VWPRC1!TYgq\6C,,GX],H+b75+$0U+B?5;l9*;,%kS:eL_gfI#Z:.MH:;GiVS67uSPc7qSs`11=f]IPc#-m2i.mOQKeV`s:3
%&b"u1h<mu@\hDGG]JH6_RdTd8e'b>hFG9HglTQDC/NGm'4$gIlr/RT/mG8Pb'AOmL-ZerLf^8mW,Aj@D?,Z+5GKJV<Hp@EcPe9)o
%J)pVqm;D^oS)Z_8KQ)qO+_I/7#I"`*%g52c#h'XSMd1cP$fDYSn@JFb?Qt9ej%gcga00rsJt3q'Jde;QEZ2('W9C/g4onE!=_85d
%K&mV9=H8\iaFpP;aqbQeL)KK^5d]LUI['ch2$#A('I+dF/JU6r:P"J6/nsKSe"Gc/O>VB+$^_;!XMA)EP^f\0\_X9k\T[k`cS2Hr
%`4pod`$iA'I]&QD<?uHKeW1C=]uX?ZLmAJ9)$GnVUj!6/@o1C,V8-ALL"1$JE!6?,2MXPjD:/`hJEsHKRWmM;LmpIE,gI%I=B:CY
%j-08pd:!7[2n1J0.nlLQPV"DeGmg'X<S7'JK>=b"*QTf'"VBO]X]oJY>?6hPO.rBJ0WGF=<jhU6#b%ZZ:.Bc!Jp/cr$3Ff6=@$'I
%U5KYcqfEse_Y:*_*\6cnYk4nU+9B7dPA=D'CDWj@?u!NU#A:,1+kekPH3hHK&Z+.@Me&0nED`i.`?(/rMZ_ALfV:/E7h4.bI^B<0
%NB9\Y`)YUNbsVU%A+32pQ=33h+sLH`=PdPL:C_s(f-5-.!>/?<Q'eHSiGjCq"kh3X,#20,ruP0..EH!cYLm+\*R$L:UH9>uKasuG
%,a"MdFj_]Kaeg;6)LN2+K"2tm^sS;G<=UJZL`?Ri"_GORVCF_laI5mTqh:O\[8+Y,JjWVl;]FGr!Tu6&h[>8QR/&PFf*ZJ7qF@SN
%8j<KLH\pdes.]XVO%#Oo*o*E"Yu8%DOU3frq-i5K8ks%h=Q3I'bRANc4*i73Llg);Ksi\EPeT^jN/&#aBEeBAKQ+24o6cmGrDA,*
%T4GW_>JOX1ho8TP%"a?Oa0a3+nG$A;ZArpWCC9jT**O;<o7fB7IPStnK25]N_&@B/bu!E*GK=;a<sMoSe'\[EaJ@pJ$><I]>4XM*
%,u6g0Ql3fH3]R<NQdcNRGV#Uu`Q6>-7G(!0-;"&C6<Llh<$:qAab%'D<Z1F7/79r0c70Y0;TD;.im/f`NY0E!"q'rOrYp!T`oaQ"
%*S2U]]O_Zi?pVTlaE8^P^/6Wk:>0Su%L0<-Zn@WL(gs+gM<sL!ULT:<$`[`9&DnTJ9SL>t+2][s)d>K)-!0Q)`WC9&\M_`cUp[Z_
%X9M_3+J^pS4YO2Vm2*QOr<>ShQ%$\^dO^YA+Jb-&47*GYM@h=j>-4L$(YKPDm#G"P)`*q'JK9-j#t.V.!3k`!%H2$>$6FD2gb:@h
%%D-OE7bsN5K_*85URXD`+FsVS'`c!Vi(GPtNC/H,jr-AdP'^(V%[I`;H?/&iJL[@m"`:5&)@&D0Qh.Y+XerGP+fCWU1j['*lKHLs
%gL.\t0edE#"F$AN%YQ`9+>bMI)-?6X6)6AeA=&pGi6L_2<u=%3/e,G22OW$65YgQcH="FX%Qf/0l4f=kk6Vm!*@nuh8K\eF(_DXd
%;[a.</1CENkf>IJ<&e"H@[(,M-/2A]*c6Cs6fKLC!-\)h+REh#lun[7FU:[m;s.',@S4MZbZ,6FJ9<*R=EAq.;4od3>$:o(ZAZf<
%$<ajW&4APZfdE9,aDJ9D^^Tc[Mm*\+"HIpFPV`TQeN@cLoU+UQij>\B\rWN7j#DHl8&M)Z7+*^&.Cf3;ff<ejYNZ`A6n&-lm.R1k
%1#6>#hLmHZ"d#FQ">L?eb2V+<3r4%GEX]:Q][q;MWraIG=GFUCARUBLJ8*Sk;j.=DDiI]l*bkGnMQ0AabA"Y<N3\;<5/ebA01%^a
%g=!AYoSs@\94I=8S/%)V<fIt,gNBX<%-@QT?4n<c,]u7e)k'@)I;QIb(.L@fe0Eu\-I"l]N#'#"EK>pQgjUfpY`<P!&0qFSHH.m(
%14RHBUBus-M[HXV$Lo%pS58,QLLGPH4Nc\Boj6#+C>rtJ4>%j'%@:56,rjNedE[E/KtQoH1'AX)'MD&9cc4uUHu&NS18WIGXuHW;
%1Om<m#(ME09*Gag-<S(BYEBL5@hU%&R5abqH.phX__c.c(`<H&T>?HfaG>;qDd9[?J:,GC[rO9Vf7&O$XDcm@2T;cufbfJc2lYd=
%M;)RQd6?_b16/,Aq)U,HgPQ#;+jW&^lQl"+ZR_TX2Vem`D4+@"$?NIlY^9Zek0`Cq1?l8^e'2nMjum"dkfIE50>%I@_)7;)NKFm5
%nmDI+I5BWu._d5oN,\n]Suku[eAS.WO[tjK8f&%j:N25,_gUEf#p,,'7-b8Z$BQJ5N\P?:`)ZB24:PJ,kRM2bLIF5JlXXL>#aQ%_
%j]RMf(6ciFEG01/J3?YO`J&X>RX\Bp`6B5#QuZE"*NMJ6bHXWaiW?F2RUb)7CDGUpTk0Df1r4%Z,.4PJ-Ki*^<hFa%dH\$CocJh0
%H4:7pD>i$($T=/Z:M$$Wbi-Dng'r=uk.L0SJkn'O=qp[I;,86[PKL<]Rm`e0<&D3Z+/<]5AT%Z:=s'O?L2r/$jrDiZ]^'8>hNG-Y
%!Du6H8+i[Q#=CVapWWN+'%.F\E874Z:or-+'7a)O`[P^]Ha3P5Y.L,DY1jb08)d"^>pCNWm!OaRMC$%K'GN%[5T$8<kH)H)n(12%
%Bhj!\`!a@pOafkCIC"bEP_tA8H\oc\%0,.D6"Ggm!lCo1c!>=I/]:1@5J3+0JaRKl+gM:a9\al#\,$,E[OD"UDIfkjNXTl,boW;D
%rS)mZnNK"/A@8SAG57d3k`^ErJ:#/aI?bX?b,,1#@g01_Q#''tcaA,,WiUL,8d6/"OVTk_l<sup+:t#sFDRP1dM*RPUZjb6\?(\k
%)OAp_KcsL00^cdWClloZAX*l-70d#4E`Ta?k;ke1'gFV_%P`n$j#2Qg;:6V=gT]>8Pt13jHK7&;6u?<AS4,n"=[@K=F2N-[+]^7a
%)[op_k=E.FP`nJW#9B2TAN?$MT5448<BE&CL=\ChUJ"o&+>;X\LeJ?f=fGmn#iY`Z+K;h(eS@u&fE,O>`M)BrJO*`SV'M-R^b+([
%Rj?H(XTF"P$(+F2V,2-kMeJ/s`eOgTW:^7VSSHjWa"I8Sa0Ht@-`[(-Qmn[3`/3*Y@Kj]q)mSesS&BQ<`?J7.RoFe=_LUT`<\=b)
%+ca8(LIN@e>HY1BlOY,OJO0UUJ8:B:G3sQk_ZZh\VofOl7fb6]32OT'LGM)G:DIM1F@?D7!fk_nf1:EWoV8G,-Hja,"GS4O\En3K
%RAUQs$:>k7Gn#-.>di<5btXXIG<iGt<=R:&5#7hO.cm8fI;ZA]X!++;nJI0(M]4>SVCkGGjaLISA,Tp('k--bFk;'&LBk:S2sTQ4
%U`Sen79gN,>gT]h-rLm,,H:^[mQg*QQ,C,-SY^Olo</]@j.SV=+:>dCa%Z#;m^O^\*tDM!s"GK!#$SP9D$!eFn>$7lm83(bs8+ES
%f*kj/lSP1uXIo[!:_Fu,4Ml_phWY0kEA!ls"!MU#R@<[Wd'Ve9OG]0^LG*TJD&ldRd3i3f.aH^/`(Iki&t$i=X?`gec9BeVg1l[L
%;l1"8(/r^A0ih;;fBO\hm5S7;(p@\6_)H@'HkRm3C>oZa-;OB7Ft1IM9jA%lRM[8Q'=aj/A@j;D-_Rhc``rT^/Cu?4?0ZiUZU_&>
%m:Ok:j:PQ#[+?WYbml\u"pA6R5MjEe0hhlW%\.3[7g[#WfEiV.fBm'<r#RipbI0spB-6MX^14#a\.MqDF6>\M]JGEW(9ri?;!s2D
%Bf?2-[!k@Ys/)h9r[g[5h19eZN_<H-NT%Ak!]fPK_[-``!01jKP_"UQ\Xutn)^>3#Z>jiOg0Z1@N9d[W)iiHY_&.@&VpIpP'lJR,
%Ag#_-QL(38TLNG5,.QSUMhuHOd[KVA^<9C7D&a:*S$#^0St&)k/hNTj8!7dOq]Ia&'igA@%KtlnJH?"nOpK52O=AnN=[D0R@P3'r
%*_JtUD[%dPZfU8TUYb*Rq'RF&K=PQ4P,s?p9i>Cd6fb"4!M`%?SgTVD>p(D6"/0>U7bb<KAi9Z_JE/V"cuP<N^8)2bWDiA38DI*\
%)*HL;V/4dMhA::k%\;As*lD,^EE!u`p>Z>X+AA!%8?g;?cs9h)Ije1&^!-&J"/FhYUk<h[])!pmLTgd&.t\FG`nV6SE#@tO(6%bL
%^n^oF>M0?C@#6u!DG4N0n9>?]cEeQBap:0o/rDX7i)APb@sCb\QsmMcT+NT.j^oWp^7h-j]*-,bop<.Wld3jU&Q3B>q/7)bihW(*
%\na'$[g.NaljmOA3,<Dho3#FO[UlGNol2fElmh/7%rK)a=L"CcgK\)<[Nru[Mj-O&"+hDK4ig2'KOQDr-9R!n@LX1@2ak0<j#fdi
%Tn-!j0ncZ(b;cG`^IMB7b=uC#>dRb"6*t&c(b9A>'FN'5(hljd+`<m.bY+$:StS^`RArW98I;!]C&Br.g+k9-?5hf'+p-TB.fumU
%)chYhnLQ%E(I"I!bFeQI+O<!W,Y)%XnWqVKa0&(m=fTu\R[IU)B3<lc.G<8H_?'7Y,EBbtW#8u/N!N$[WOoXL%6bZp!b/<!IC_)i
%Wdpu8q8_WmWdcR=)mclpJWhX!L%g0n7HW!jplLH%e!;^D)782c31eSG\]g4d7`OH/b@#aMaUEe-g=RNoG+for3J9BBPB,O!9rb4b
%6&)tm*)qQ;En8T.^/:G8+i>J\0DHuk@$&p+_5BQ/H[T'lm?54S7W[0ln5T'9TLZs:f[V=c2hq#CP5-?d,U7+91fgaEKO7%BB@)pt
%14p'UE_qoJ(TCZDChXY*K6%ibfJ\\8^9?jaOUil'F:Xm,K3j\Er1AL/;UBG%n/J[BF#bIGb?U<N@M!@;'ZkL#(@t+Q<9C^8fpHL3
%W8a'WLPpPUU4n7\glEfdlr=-8RbciLF29RMj,'?8L*/GT9Mq@E7k2ti$f^B\)>*RV!bV:Fb.gbh;_^Bt2](,qF4#ST`Ql``f:9Na
%_\REuA%`Y$D?b0i/Gi?:F/qH-:$E*0+N]60>qs\5\<%#ZH4`dQ7Eup[Vsk'EB$Z@uKRK&h3:fR*<'XREMm+4R3!8/u*/JT,*+'tm
%dWI0i&\]c4quH:VW%CCjQ/dcf78M4N`"rFupIsS)!#_mER4j/)VWFL-^'G&qpO(tYTJHC.<I>BdM+&](86G3gO^.Zp(ibFjmiOJm
%DDTT4NsI?j@6#J`XnFpJ7As(R^6\O<fO#GiXGAM2A69jX"Me]XJkQtHAtU:`\d1nndScs#KLOj6'jUqb[."E0KS"l8kDNS7_kT(W
%lrK)O&p\=M@0?_r`V;bDN6Hnq[*F=:`32HJYTf#K9TG#(R4pB,AU'%c!cHR/mJ*:Z,:%5&qOe*=,]&l5Q?3<2UE*u'A)t^;?Mhq`
%$%(rU0h)53"O$'J,Cm_q8rO?=_)s^:8(]4_<"59R0ppah0nX13[o0*:n3o$p`aQ%G+rK_-ZoYo,Ag'<kR4j0LE%6.I#g33H7HTL2
%eQl.:@(M:3<<Q]MOGYLho'r+8%,8gJ!'IDo,/k?@Qm-gWN@KOAPT`uZ#B;a_g.=)#A<l"Tbn]1g2D?-^U/Hguidel\ae7[O36\lV
%X'u8R=(F08K]e4X.mM=Sj,0L]g[(j_(j+511IX"=e]EXs!eHqSh],R**Y_FP0h!c4G4T[1.<8t6OLpaF,)Ek`lpbW:02Oqt:Lp%0
%djOZRcMd<IoMq=Ge!fJFM'mlu67,FhM$0"YcTI<i`?:q=A=a&lH1HqB!eA5JbS,P&g1Z.ibS.f4256"B+u=+L;3#\e7'O=cD!H9i
%3VY/s7(AV3'UB"+Ed=MN/<Lnrk?0!r"Ogi0&[FgW$D&Pq+Fn:@81]n-8KtP27*q`VYb.%*![KK?1/EQiH^d&o4:r^KnR\<5V0<u_
%/k]IV9&2=Q<'1`qU52%"W$5?,G4hu),-[Ml?Kdb#0SppR^+_tuVE5^67naL;.2XEe7=_MPL4GX8']Cq7#`0`hUJ)AQ3JSbOR4*[>
%3g-O!;1u!NZ)09R"Q5Yplm.JXBMoF2J2"@P'1Hl78<c+H77*"m8jj8-_;$S:6kKj?7J<J"'?QW:M)\0[OkJS@aXe#nN(9:%1/.o#
%AfV#3-c/uf=f,$c6l9>hf`Wig&Jp/\-mCZ.W2>@jlRhj/:C`6Y,gj:6`]])U)&'n2KqI9g@s+$;N;&IL=1BD.WPE%^#b:ZL#o@VQ
%5o_t^J@SK*Vc*"_ocB)BC\!^Q'lHR<VAuR-"p2'/B,$:3.4pZJ,BUGsN:]t2=K!CYf$/rFrT^mT9Sk-tS20(gkWgY"c751Z<5V5$
%eu-N,]F\=Mq6!*idCZ\k-iSfe$;JEh`o\[P-,rI>PX5aDGB0Xn?Yqhl\XYG75FB8lY*;p8ql,=27]idI2Q2CADN\ZV!22,F=<Vo1
%E*IM+$H\*:L")d#68Ib-+U']'81@)=KfGm46E]GKrY+eq<I"ql,N>]'GmtiCNX$p+Z4't9j-"KVj)mnuq47tW6-f_V@,cd2#Nb,?
%>S%<_73g;e&.Bl@@2p(/o%?a=WJM#r@1fA(+d#&1;TKsaXN;U[]#E/51'jbaBUOn5JF`%Wko0h-,p[E'64t0SJV=M1JY6egm#BEO
%8l<YPY.TGs!cXR)`M^t?R^.-&@Y7WST@b8$BXQ"9kF/#ImEo[kk@l&b-:f",'tL+3PP]>;M"QgCcal/k.o3FFK2`uX)F/DB9XG.+
%@V7NrUP#eWU'Ie*'g5IC_HB@SER*GbM%3G!RLV*O2UQd"Np'?URME[OOpn_Z`sJhM+kBaTgFmWe>DRZA@&\SDCkrq!ruT7c3SHe#
%$>UepNjMV:,8HHU'CVS._/U5_@6H1F%k',f.e>t2HXj&E642^s+W9pbO9-b88C#!"qqPeE<^Wb_oshj.Y#.&qMG`sS%*-oXW&F_O
%$:AOcK")TATPrfkVD_3&QR5I]W1#[\f/59Q2CEN:$PB7QnQhNEd_l<2:$fYXDGpJ1M9i<tBJj@9@Q18!gOlR2qTfN'KE"]L;.=l[
%#?M1!@XHHh[DQNQfH/9X2,2F$Wj]gN=-O5IN8CZb++SM4Ebl6kB!t3`OdH/[>IQWA2?4^UMSeCu-s;)u[c;]74-#5m8iR=SURZNt
%N;;G:MZ+3][l4gTo7Lo!%]l'?>%0CR;T\Ql#f!(ee*%kcbqED'mRe)&M_qQeoFJ'\:i'dsJtmfTYg>TAR-5DQ/AB(O*'i)kIZrt;
%!5gXH%o<3*39lstdONu$k:ad$59*eQ5Nk[:?q[2C33^ao.ZcUA(ejZZ;`J5a:A=CA89$J@W"f(5^hL#Jb\<o4iq(JeU45/,U45Q8
%bLtE(nNS!q#TsjQRRUi_LKTgLCBn8Aj@fRT2T;AaJ,gN/Es-t7`c8,ec:DDp33ZkB7.uU/1F<<^!t,4LJ]?&m*/LY*E<),J_D+;"
%<&Z\7$NgO)Hs@ub.)dm,ImsbI`.8X*KZfX&/dhE,/(1^s(\.fq?PTKuW##B4i9:YpQ:C#m9`1i,3JI5/F39YtAn'&.*%&"A'["H'
%Z>W1'pu+Nbp@+a-(goGRka*/+R.AV<Y1Of[Sa_O(JHm4VX`8&BbpMsOAp\'m7?3e&FC91n#X2A1P@c"(^rjP$SI#itM^dMj-:!si
%0VhMgn(l;t`I\q*MEP5>!"&9sL]Sp'!jssVa(C^&V9(M:i#H#u7#1rO'51-%V=r!@:ZY-<4]E<#f`61$`[a".;L-%uGk-BgMIl8u
%E;/D8!tHn6b$k85@iR[]oo%d=q"W)u*5DOKo.67$8,ThF@Kj7b@g0A@a@]#W;H=P1SsYcr](;6rmLllfP-uX<.el/(X&egU?V-VB
%eZJm2oWEWq6e@R=o!p_'XA?h,RL31&go6EiPRWnZ$@YJm$OJn[ZID\k>$4A4?F;=0mF06Fb(aAkLYpV*6N&uGZWb9+otYIeBdoAi
%5qV_T6W2+Fmtkdn/G."uT`[?0[?.a=Xl\M#`O/O%/pXR"%t30*(Yu2#0$7BGp`8`R<2cM)"h7K\91^cD>b?n"2Pmr6\;53S@8Um?
%G#`M/m5i(%.!KCI^M%iE:=,cmV5+q+Y#eh)6e4o4eg9[:Un,q?-qpPK(QrsaHaT=#ji#<ZmAg)\b'.QL+_d#6Qf_Y9rg.ep*X/ba
%UT#OJjqiG9+T0(r]P<2#KtC=%<4\!*(uRU>0[5b5m4bqrLO,<lqF*VBE/0%4p7iZ<Yt"c+hN(k"@QGKPac#-TI0*nNfd/AMnofhJ
%=[h57),nGDKuS5Imu\MeatBqR-1-j7;_<:ua'&T.PB5&QM%!LY(7Ea./i>CgD;Nkhdl6/b,ZDZD1s'PlS5dU`p?7[m'^8IAdmq$W
%a]/65e]BH(jccrlPqA2RUdMXc2k'K;bEVEG??SZmOY9WB\cg5nK(MU$.;=QnR2rRoABYr4put[sd5SCoetI&[Ff7gj9IY<fcE*:X
%FO"];S<_CD-IAH/VN`*9B@[_ZH=s?Tr:H@s&OOs8p:_60(:5,;1mP[G%S\&4&k''+^IJp]R]&^jmF??RTp8ZpKa)mU^TNo8e$;=q
%m;nIZ91mH5;B8^0e*Bh/AIWUVc5Mjh.BOU*kgEX%\j!O0<om]6ihd,'i(bFR-1-k);dm8UfT<I=Nigh7?YhI;`s(7te:sci>&C9_
%O'3Jl=J&o(WrYCuYD/..i%?H;'YP[Pk$^d8Xl/pVh-*8IrW<)C%+\='dnIO?^&<>8CWaFm7J]V/a_oU+M"@k2"ag#=Q+0o'Bo'fD
%6M/@>+_=#+ma_%N\oLuk0$82aD3q\9<RF,]5/D1$b>fiAUgh.\)KSMq;40M^Ds5EQReBC_ig'^Q2'NEtpf4d][-@K6q,/h>4Y%%)
%T(32:8%?i6_-+?EE0kg?N]J!P]%>EhXD6opa'a@]7ml^i_iEIKWm)JDG\Z#l&tV_JV1kgAm%T59_=-XIq4]rWY(ghT-6?&C<:MI5
%/R?"ij*n:R2[&`Z"'m2D2!;G<o8p=&RodGp$0V,Y=+/IFSsM?gp!aYg!d^uGI=9X`Y=)*%]iR"s+h;g/[m]t@p;ub$oQ9`3;Dn.B
%$pH-2I<qK!9(c2'VJi*RYKQSf@4g+Zm)tQ?B\ck!n'h/R;pA*dGL?#/2$2&YIg=ORo_8/5]VPU1_1`$[iAXa:Q1UdQ.(DnV&4mgE
%J1mA!,nX7qKdD2"hiS4EdYgqpi%Cuo,]/>@^8Pa56dVT^6scWqee(leZ]_!.*\B[RCo@ZSW*r>0Y_!8)]Ro#S)FW#.e=b_PYsB\L
%a:3T,ASL?>gA6.s,(+BJCBtWGY.TUFrV<SfWa0k`o,EPb$YIAYXJ&Bc(Lb5-Mq(]foWViATAXom%oKuom\/Pkj[1?-BHOr8h-M?=
%`SKel79%]n/>D&T@71^#0%,O[pP:&CM)9ER9f,I9O)Er->CJq7Z%>Us_<Y>Y3f>&&i<9toT%9X!?IT_oGNg^%pNTP?quSV!$Sct5
%RZh4YI$V5u)EmFd)UIml3fPWG7B'.'QWBk-4f^HS)B]J$7pTlT16-O!H=+`jgl@;WUH[NZk(l[V7EuM'qgshPFBp.4^T_-)ZlUa-
%`4ETf@kT$f<A#R'jpQgMTb"-An=gIC\4\(;G&OBK<q(GsOhU%%j@cCOjR(f'MlbjGoHIM!q^"UA91lLAZ^BgS6.4,I]\T&,P:prj
%M,+3@Pb1@l4on9Pm#n#@dLHj]X6BF9P\R_7&>d_p.8$E&';JOL/icN=[nDgg2/ll+WNJjY[sP;Z,mJjs>35/.X&l9]^9(M:>/%1C
%C")%:=t-gG\'h-EO)ee]aa;a,lLMF7/$C2ZP<d!cXJN@q*aq_/"ReufVW1Z.DL"S+Oge:)3Wq'PB(SW!.VX[ZV0_*KREJ(gICb):
%oIk'KFXUX4@eOJC.V4YJVR>sk3g_fWc:XIUHaGJlZ:bYUHD3n?Zdjo)oQ`eP;nI46<2RCe,F5<n4`Zro5.^qRD7/hpbZ#O(M.XI_
%EaH.14^-5=qt)^^<q[qV^,k=5KJmcCVUXbSF(m(B!q"Lq7+*+k::^(EF?#="G:ISj.fXPC[NmnbG)CAkBobrcMUEg#M55PtSW3Jq
%XgKY(@(2#k`ak-jVhS6=OscFdBmDW%s15UA,+jI6A3M^s)FC&;Xr2l*@\9ccIt%M!FA$H7J>*Vp8t`@'Z\C_Y<L0iLdSp_LE6T!]
%<=aLXNJ=C19R^9QU1f+4Yir+h2"X8F?<n78<ST4OdAj(8,hT.Z>*[m,"FIOHQ1CY5H@k&%+)Nn'lbd1)R'[ck?X`Xc'heMLpei_V
%Hu4b/HFT[UFpjbm3&jR"$LSNa<RQf,l)+aTVV\;-^Vgq)$DDe@974S2#7ZYlm8k*h<0agX-WLK!8uWk[:Fjs3];?#1lD5\=6SZ!#
%hpY892=2arSVEN3<pP[6W[;29TW1mr,ZQAi/Q#MTn>\.QKiMt<T;>O<pcWWI<o\YW(CepFgV'Gq$FETSor!S7:KEUT.'(03=k95.
%ePp=d?q:"X<,>ROZY$8b%b4T+]]cf<g8l35Y3NuaT^1bKj[JDK=J+11k8Qi_"L`nF"0bu8<_4rBY_'L*@$U@.#Q(6V=t6cllkt?0
%9!M!7d>A[oV&$,-(VSH;2/UIV<j:`eG"Tk+iE8iTBSW+Z&mb]P?VS(cc>3Z2&n&3"/<Vp@Ad*DCbpqsHEV<C,)a^p?$D4/.?Q%`>
%$FQdIlka>J=6\H1c2CSt?UN:CH!F<c?eorG@^dD]M13-i[n,57]G93JHE3hXg"S1,7iH]`ntL:VidT1LCJ!Vgn5gHEA'+)3U?gd,
%kgl`/X-@6K?(kP=\oNd9oQ7ieqe?E(<q+`)7h#XY.[R?cO8]T2Gu*oOJ+70uj(7Zf++JA0#BFl.o&GbE9_q+9:(b\>L\9<$NnHQl
%!c.lm:?+(-q1n'FPMc9N3@l8%qNsKronsH04E';@s3NRf'&PD0f^`#MR!kk1piSlmos]Ill%U7JP1'nTYq!gY+\0ClgPhnu^i`AW
%8L^]lpfFaVQjQm"8nC4g&-Y4,cgkU`2QW5<^_S%OU1"Wq"SFY$B+*^kXib%O7*-lX1k3e0a)KfY8>XDP0nT%K'4l'AN;2PV?uD!p
%<@[jEH4SU)bEC3g6&<r]ilh(TRj2M5a>kSRn(9X`p5PY5otNh$CCDbb/p`9'Og9%I@8H2/?:WGH!VZ,^Bs)Xb[\n->8,hEGn#IMp
%3J0].9WOt$O5<.gf,12sPe\[>dTM,#o`)H%J+)M90>I\8U[J#h\!([B9H3[[HbT^c_mkOt3,pSU*lkDa#GPqW$qf;^O,M4UOJ*n'
%T]m>D&,RiS:'`hfV6<(E/H%&e0;RYBP@ZV$mV'%7`Y2FXj2>t;-C*/^Y_YjAZkloGar]L@G3NWB5>J74*W$!9Mm3,i2?Bbl8_5<d
%(lWn-g&rRbi\+K)ls*Sg[5?#i7QYM!7WCZ!<cL-&X1/\+<cLPYXl:g->3/rDCTF!)Hs)a7Q"J&>.lSK@_1Wg`3l0Mj_5p;f^Y8%A
%Y`L=']6o)h#-Z^1_3WK&Qlson!:H>lj7KfN/*Rg="#o7-"OQ\"Q##BI(s?KXjL1V>]<#NIdrum)R"':L"$m07=WM\f:pA^k7ks'G
%<S;%'cK/%P%W']6qHD_;r.'W%2OURHB%nY<Wt6O&bI%[je'hiuRT`/Vc0JJ8"\QL<P,),](tK8lW`@j#XArM+egg*GV,^dREiZ]B
%PZG=q[qgF$+2@ef$n_D3pi3B0Lf?F8M2_r!S`AW-.t@5Aj`.pc__cBNn*udepqq&%"s7g_^iV=#s'`iTZMaQK@.N3gqT,k$T),qj
%?iKJcrr2_o?[j%Y%F4LXIf(Jt7$pof4t8H#8)iQY^]&_Mi?,9g*kD73].3O?-fP)fs#h:kc_l'`]3u`ZioAYj2a@6+s77%Vp?Vas
%L-T@Q;r"345_BhNG[17UL=:X+k.#g!?`,cA[M]#s:4F)?4"^%%59(R@nunDWJ,@uMq#:$fnrLQ_bJ,ml5Q'Pkq5<*_6<-KU72>Yl
%W"=>M@DMn%Hn>'=p]'n7_ls(0mskAXhu2SrJ,J[UIfC3+hg+G]\%hjs+9(:b4oXqHs8:Wds4tG;r&\B&q:56>r7Cu=j559TP5P4;
%..l-OE4!k3Ndq(eO8fF!rqH0ub()AGj#;JQ/+g);*U>?Nd],'Pqre"U0>IC^s73r)iT%EIr.fcJr8SU:SWhl.Z7hMl^`Vr5qt:"_
%eN*X&0DO:OGPp_*p_^DUIJhFkbOG$47i23fDf@Gd'tQ7tZ_I![&eGgr4Ej&Pp6QLDOR#SnU:`bNZ#1UROMp`X$$e*F89<10O<b:r
%3-.S6"$"CfGX/M1l1#8c8YcF)=B$EdZKf"fndQ/qoJ7Y"BdWdp*[.<hZSSN`5j7&/_XhM3QuGp8Vu,-k'l[agK+!bQ*+,#J*^g5^
%&0?4bF@MW;g"`@QOA.OK=f"#>J1[T:&3U/X!FdRi[`_'L`ici"F<&j!4<lOgOK/1t!'#",6Q?@O#!a$j;BafQ&eY>n'h6"-!28pF
%N'@DG\`1>)a]m[cb*;q^RKNtsD6QXH8mqNDTJ'2<h?'T'"cXEgF:%#h5b("j.7EAc7RtmPJVL#cb!nYOCm=Ns&.Fe3[2t1B.V(gU
%B#Fm(6fm+Li)8@tB05*gnBqaKLOj9B]i!+tY`J'A`+/jV<"b:&8RF?YN^7<3+75!L=o+\94KaB?+P-KNKAa;&1f,o`iGH#;!9h%I
%NcW4EN@4'0KG,cWE*G]C@YC(nLCnc8otjKoBSnQLZhml>^GL-P&69GMWJsT]f_gEAS/h)/cfFTa'-&hZ*O+SF1@9_2YQ.Rn)B^9j
%O6,B)\.&LJ[fKpApBXMHjE$_Ca;>8'5Y0D99qns6jZg=n,/@:r1sBrFZ#V2<2'<!0V^@(9!u1(5:YGq=&8gdG$9,g,KfX%+C&l*p
%Yg#.PiGSn]&M6]r]="Ba]bG+3`hjU?8@CPbp)CZEUI37Ya<2)h1Rou(KnrcV$3i'X,1V:,&>VK,j[\n%8#ZJ2.NcHG!/:9u-u'"0
%:($hb""\Kc4[==DJM<OM?&>8*nOohi[*?1cp-Ah1ChbXB]ui#>L_rFS$Sj2timF,&ojhL,.i@sSB8-oqOJS-BnJS/#(9Xdp%_+Vg
%$jjXGY4P#b%T"A1>7Oig-OHpG?b*=5']+G>B$u8FC_>?q[L]HN1=knKI4uj3EMbkMVI`E0Ei(p1blN@l$'Bgfd>Ja[QR1Eb&6oi5
%ca$LSJsO,!iM)'+f;28s+ENs9;'j)@jW97Viu'Ik?,Uhqh%7EHl+<aECK\>"QG@)6,D:\O=mZi5!FkL_Z-B1HK6'/hb$N_E2d4U+
%4*^.A:fI0)6/q<F5saL?MAW1-0)&4j0Bd^O]uOQO<NO7PibbWeqJ:.*A_uH,U`,\72[fS($tJK&=kUo1XG("L6p8O_0Wc9@guM!n
%e'lqMA;SLR^>\eDOOAgt8EK[T+`!f=)!tNRSDY'iJh7AV):6H2$jjP#d;"VWG4l\\!P]$'Z31^Y*WXP2_iU\[\VpfQ>/Ud%LsR:o
%-?7\gqJhB.EX%Qu3,*T4IFb9^H59FlkL"Ynd=@]7k4+`=&%%J&+Uo`7>!-(^P]rPgpFpT=:PeM3$Xt?;1?m?8k`@!o;&]43&0PQg
%KMp#fGkChRFIF>S!!>us+cZOo\p5<.g](n,%&q(d[1=5U3mSL"R--a_RUr?S*8\Z?KNf->Q3q^i%u*ro/g.M=!+C'QdGbjOS?\b,
%3Pq\]8]Un6nW1m@adc69K?#I$e#9KQ(,YGP.Kg]EQ&Lpf)>8bEfaC"W<Sbg>Qg&*Do\lZtE'YV*)s"h]2_F%6DAZ"fbX%+d4LT%B
%iXs/[/a(^hrkT%o4rMj#n0SeQO[XcPCl[<?^jk99>",^62!)VtXSt+nI]&Ph[P'0i!+QFPnNj(G=m%_C?RInS>j"j(=_MW/)olSt
%Seb$q<-:^T"';3G:9"49CqC_"AnbNATgiq;R!2dZj5:Jij\:[5&Tf]naTqE0]6X2jf4\@r=XHg4L5Y58"(<=;X.=E!40,UqJBTuf
%Z(71dlJj*u:rhYd[2"I8#dDi,SdZfq+k\RP+r[^75rC.dhkS`$op/D"'%H#4m9Li>.8JZL:c'&7.Qb'kKpDT>[,fP6Su8p7ZmgaA
%3br,/A/4Zk`Crra<*jaW@uc*Z^]XV8,OgF:AkNeRUKdRR*@meLLZF8"_^qDAAQ5rDk2XgnF6P]Y-K\(*)^cj_-quD>Ud]]5iH3%*
%fH8aNW5<Q5?Yr39RUCE"3^V-P3$r;52KL>fK,Hk0AY%XHDVIjmh+nlfZNE/Y4)?%P=CV+Ij6miBX!Rjk0dO]A_?l[[@"k5<PBkpL
%\.*^$`q+%.J5^?:$"ps(a(l<jgd(XBV+*;e#o$OpFZQ@uK*`@aYBdMUq/t`AiIP^m-.X6[c>HY+(s[7o;>;Zt@rV.Z5p%2-G`WXZ
%/Iib$clf)Me5M5DQ"`^iljO^9&eN[YNh^9UeZQ9,p(dX8+Q9>[kZbDBgPj21F=IS&8RJkro0eJ]Tj!g&h<.Aff43<BZ&q3hJJ!0$
%aYH2^BCn18=c@bd)VlaoGkdd^9/@p<9A3$)m8A9rBES-*aL;7J9?$c1Qn8[bihFgk]P4-\BAA8ncs!YF^OaKX9FKb_XY1fEGQ[oa
%q,.d]],;PV%qJFD'uI)ET>SPi(f'[=kLBZFB404dOHq2"2]^\!iWVYA(re%4=1"9u4^hBE2ir=7g)_C0JehX7Ug<TsJG&@jmq.?3
%m"fqlHRD5Rd=5#G=271OasJT&=r$>Kh$,>D5R*VRX3GL=Z@K7a+?.ZmA%$s(dfiJk>?%j4H['_oJRhl"&&KrhX=e=AM$[fYJ>]H,
%<+1;O4HH2<0aP71)TeJ]>O*Vi4?r`F3,L]Dg8_)#"<ojA*@-^JK_i1U@,1/52-\\*A35cp\49&ShN"+a_O==h2*6hO6eG>FD.YGq
%)l()Y8@ES;*2dd#oZL9J@gqU=[KET:-r@I]T@o/bcc\gg91AJ;N>6/O^uU2u!ERW`bK(eU3D)<QJVu?.J8Eu=1F@><%H7Ui^i0^1
%Q6-_Q\kUEBYQEh!k=qjmg5\'RS;HIEN%j4h6/[68N'^`M^skJAGVhmd;`muQG/OE;Ymt;9`a$r*JaeQ8F7="D4?W)r/]6J2)&3a/
%bXKT;ZepqV!j`$++ubgD@]!7LgblUgE]o"B8$Yn]9$LCu0q]Apfml-OVk4uhCt@SgB-n0^dEl?>Z/FhN>KCH2DO'WZB5mB\^c"c\
%krL4fB-OiR[:m--&]>=4?"qnUO@mZ"CO&4)UWr'Md$^+WqV\:M-Qptogtukn9Ze=H\p,:<;ZSPhiDSU3_R:H/]%]d'c_+/rgPfS9
%lc-t[mHSA.K*0iI4kR3N,M?UN&C_BEIitdpM&3eii?_^^_D(03RfHnf7_:m'G]e.4C_)HT)16[Od&If<49r`m$BQ8D?Qf!A@l7K=
%R[QP"KR?mAfRErtp?m28VNhFjd,EKi`k\8daJudfa?p7C/14@Y:,f$01!W$L(gB6.kADCu'Q,[8RG%@W5KbstJkU/F-+'$2gs6bJ
%Ams+q6WmeX$FM`&i3DCB8sBAX_Xf;'a,!sm5cJkBU)(]9l@:msmVu!-N]Rf9ig>@\Z:#X+4K[6IdfGd#aio=X"/D>ik:'LdmT[VN
%RD\:C'%;+iB+sGbH-AY`<TgT)F586lQT0A'$gEBo=.<VTO91g#4l'XJN<fX3W,7Y%?QaWsdQkAeb%!;%PF^5!9'iRoX90nX:6(jY
%Ag/g_\$$On9V`u8A0oLXF%4SUWamAda^HpG7T.ej``O*Mfa>p.'I,%G$8QkZ8BUX"(RASW4^*8mMmJO8;e.E1Tt#n2?eq/[e9lI)
%>BNdl7aeg:&^8Be)RFo9fgs^\0dXe.$;m]T/@CIZ[<Jj4N>020m,r10L&/cmc*`NF3c\Y7S;e6Lb$eJDNO0h2%m;<[WCLJDoglNR
%Ah_t1=*qiqfLUR,P:SUioJIAg]T&06C:RbZ"42`Z)+i#-E(3`UPcW#.;BY8G]ZNb"#'N'IR['*um-NG:-,mZff-l]aXJ?[kH1a]U
%_+=MKJQV"XdbC`mk0FkZ_GXN.q:tWSr6NsTePB5oBHh,TPn`50@9C_K$6q0qdpsbYP1XU=gMA1t>MXHVe7g%g1aG/eXJBi3B/!sE
%Kc!O)):M-&!0j`;7acEM<!-bZKhn4Kgfm@D8uKZf/*T+We#A;%QjES*2pc(\`<W83S"Ye:e75iIP*$I/g$SEnXea@'+5'1'2m_Zo
%)_'>1lmLIW)GLmO(eGsD&ZiEkb7a7sj_HW;HR#MC$!1ab7I@#+fgo3AH"A4+iAb);Z]VEDc')t>7n)GncBXA'?-Y3<)eiWLP)2#5
%o`Yu6KkkeMd?r.5am=kLESkN[-tM5EFnEG;'-SQ4A1X)DF4oH@$T&__Um0QdVQ/=Jn`f='RMdF)8%ClMftuK6\W2VA0op@OiGBdl
%8%JH^F/\K$Qi:gS7hITmc+]B#I0qtc_$q@eYf8gH0=G@eJhEi*bhFs=#h]7MJb$I#m.Y+d`H7)-U.?o(9X>'!'QA`<i?Zl&R5pX!
%:!fM$&Ri8TAXhU/8SE]kg9qg&07hK36rO?ge#7ufcj5T:-&a"\Mt(8L1kIVpS93Fd&R@uZPM^jU45aRFIMU-3^IfqlgX9dV7a'W=
%BZ*<BX%ii*D?8]O6DGhC6h'`ifYY.^;Ui.WZM2aY$(<U\1Yr6rGTlF$%@Y/'D;1]mE9Di[ON*^uYO0Ri@ZDG!"W=+5C^C:)TEQ\H
%OE"CIAdKCl50-fNBdMFY5Qah5"HA^l]a/3,=,dZB(ScS*i3u>`e);CnpWa#icn]l*d92ZDP&7BuUg&r!7le)2E4dc?n6`)G?Q^4M
%C\H1m[04Albhd0H"e">-fb.ZKilQ#Ic%Q=sbmfo)20cGRBJVFD3jU-M-5SP0ba)J_L+K[m.V+YbGCr</Sm'FlD]=*3)qcI*c8"$I
%1K&@8"tfNbLj;Vf6j#Y$R`KJF8^/9p_nrpQe=DM^hKTUmqS8\,Q82%6@2PQ,kqPH#jFG[*\6GW.O>b#0m/3Z?Y=:st'.?,i_e1;f
%KI]hcD7A:i0nd]1L2nEGWA)sNg[>71Y/#d.\&=/;PaA%Q/oK6mB'_4KA&4Jp;7!Dd=G!9;@\=:,3O*B)h)K(&IVA!*k";tV(94,k
%7D(q*%FI4oDD2)@\)QCuZ[GNJURD+A=bphrQUWS7YZjR4J$o4dLS8+1-1^c():GciTgJ*,R=juccFRRc`k7AC[CG/CC`.4U3fkao
%qlKOFd*.`>b#cN:p*-iSb*K[0'`p06fRu?4bEgZk8k?!g<]7l-A+DrFC0Bq!K:'&`?gLl3ljk&"r3sY(k\8E1Yi@<=AhicUY]4BP
%a.g04PF]E),&>Gb6"fB]Ja2<]99A&XOE:go_;Ij<itb7MI*o<i"0lilS/QS%B\n^J6N.WkL.gfB]+FF)'H3,hLk"BRio`7WSYJp(
%Tkt\m5Ssu.m\t.,LFF"W&hYBM\=\V$iXtL\3apj&opKD6i,6B6$j5]=&NU.4gZ1Q6.bob0l*HYI^/sg@]e#Q:Tp00lZBW[)DPp*d
%Yum^Ja7,[!U-MqGJiTj/"",_t!(L1B7O[+;G`/.8cb*dV="ll,MU`XX>r(LfmO(=&H*?lT;+,:V^r?7g/@5X[6kT"/kLVjc'Hk(u
%R3IMYU!+Bd,Z,]%0\%Hi1<Ia"U-JpF/r_*eK;LMo%4?-`!=&A[N$A\J(l@7.mSHfCB;fc;$g=$#FH>\9*>tn=haD(*!Z%(M$Br$(
%>[W-8iHLUH*JiBaMhqbj[r0%\FBdE@k%BX#/qHe/cC4(3V_Heq4P=[P*Htl_#b?WZKPo7.A2?`(nee$HB:Y^_E/ej'Z-[m\"[_Gs
%Il-:!)sa+^#\Yr9+A>6ienB\FeJ<i&&CO")BBq<=kUC)SN"h05AKID>)']m^TEo";Xeq`s+CR+U#hN3%oZI$'L`Ii>/JncY+-:WQ
%M,+3n&3J^5TST/:5tf:lLjdFiG2nDZTbkfU70!bD#UXWs"3EhFZn1Xd1HM]Ndfo(!nuG?XTG/">^te?<,Qa?=m49LaLb+_2o6&9?
%^KSn=O[:7B/M]VZaTG(iaf0jo*"^9RqN(u5_e')s[DJ:J?PX5N+XnV0J1dd.+87VcR\6.>-$]l?_%18m*8?oiQ!=i[[kUsWP.1\,
%GR+OX49Q3ISgb]^LmW<2*!2ZqXu=!3%KRhZq&&;1@?fa_;E2V?e!U0_@`Qq3%'e82R@''O%)GM#5$\MMfP0QA<,r11E'=a.r8E8O
%/sGl`GHlgb=l@L@40Gm*K6nHsk7)GXn$!!Hbf5Ag56\*_\Nn3'j*s^#6mSk)pXl1RR,V229UNi;qC[j<+Sk[GbfX4TSJ?nP#,PE+
%ZP9R3I!@_ihF@F;;&@cF!C#1D?*0$QG/l0YSVHNEM_Q8"52\41;7K-]"t%:"5O!u!8,&&63LK8h20-d<o+2QrE']EkZJ%_u?)>UG
%A/.=RdrQ&n`FUB;B=""%MO*e'kU9q<8+T[MAU5[[lRsln*%QBaSYqqo7gcW@Z>:^?e+7@7_[!Yrj5oM.]I8p%@,_JCgKA>+n;kGt
%V!bGeR6g0RG*)JHK6dn'aIs+imAfqAI=q=8Bik=)R3r6EmstVubL=#H7MEH9gqdsm"_'2$Ar6b$#/jB:F%]&"(@?h9W8Th#M?U^1
%:'hEH6Rqna);@$k+_!-0a9DkPMD//6#Pih7:i%ZS9&p5$Ke.<$>#ukj]T9(.C7Emc>dW%TOV4cr-P!TU^=5Z5OA2_=aM@u5lp:o"
%hSY*%)ofE#[buXi<QEBpUb?`'d7THCMmJ1u<17!('Z=PtK74<maJ/q]&6X:W;O,8H.c]3LG^J>5gM/HAD"=-o#<T3\9HK@hREi6P
%8u5VURTV+`ZM_p9\>2_-M=J3R8l'cO_>S1BVK`L.6&SY/X?+M!m7Fq8#BpSZ0f9c\P/+J@g0E$(a6pRmCK;DH@RX_`^bWrAE7S0X
%%rU+DCY*R)CtPrXaGU?'XTmoFD=J+3*\2<#N50!lIS][qUH-=;-X=.*S@t##A3kA<T<pQGSDKH7`9^j3+^ZFf$#E$/GV<%V@2'@`
%bni2X7Qh-EL2Mfj0ZBW8cHokSbcEmCs7unceVEiWj3*mlM1]4R77(=(:7e:58Fs'=Zr.rH+g]k%TZ7=u]2hPP/)=sRMb.O`QOe+W
%q1P4LL`($q9e%:JJMaY['B0H7?=o8[,@I5#&qtF-,q<H2-b(-5`Lc1E)D"Egi/J;sE3TC9Sf)Sa(H[Fn5<YHIR@X67H9A,X6p%d=
%#0/t(;.3pFA)cLMU;_^@Y#r6]TCY.8<^:"qZmY?8rPN,76o^3%[O-N[Yjq28N_brIlAg)e2Y4W0Lphrj`)?qF!NR^^c;cJU0dT6O
%a0ldOb)R9)Fl,"s!g'1r[3uk&i>?m8W$e@a^'q<_Q6gYk;s8j<H'_+kCqH;CEJ1j-_\'++`_ubbgUin\4`9Su2rO_/NIbVKQ(0!X
%_keS7Wsb_G!d#Y00FZJdE,DM]e,K<ko0ElL6]iqaeumtc@Hl2/*=d@>83Z3p9"%jmF&m$A.Nr$s.boQ+UCfag!$M;58g>cc'(&:C
%7rAanUc?Gk13Ij)dN[?]:W._4=hi:mG5`CbZ.e^fCBYeJj$m+ig$=+FQ8(Am:i?kuY3<8JVJ6X=+aOb':No.j:H6T!l&fTng`7_\
%%5or<&o*odH!2L=Rh-oA5'NpWr4dfI`KhRb2R&m]WUhCOeXgSsTO')Q@/%@e_9%NWJLJ#<3WWQQI%_O'*1H/Ibb@H@298Wu>,[ag
%\,=%p0'p6GG\#s@k_r-g0un%6`tWG"(t(P"]p$%R1XTLWFCW/BPgPhY1Uo&-*Z=PhZGZ;4fVHs#4ANe_!5sn-8VUK.N'(dBit`3<
%M'kFsknE<=c3K&@!7ZnCPn<!Y&5G:$)@SV0\Tf*o$nf=trK1tB]RORV-7&)+[`MZIr3:MQZQ5(s1+0mla`UK\2l5CdJWt<M"VXWA
%5\A'11nTPl/_8b@6(M3GOUHIG#U:liT*KaPDAP$jCI%(gd_-\]TMEZa[:MA+ag]Ru&6<l0FargC*P:a;elp8T$O<XSA^IQ3<.?L'
%75H,c9.n[)q+FFcRR8=$(0%f?*^VHg:ul\6a#9l6^X/!XeF;POGL&27!]&WZZ*!I.c*-N?R@L^oP+.ZaE&36L6_gaTq.3Tp_Ys)b
%?<!es%2E8M'N=mV3&-BCfNLU_:)WK>n<]>[MG1W>]4s^BrW5[^J)?7(!2KHmD+i_L<PBHtgt[Is@_#uG/s#iLh2,eT"lKc@f<4#>
%VTCqOoI0S'X'&=04FUUZ/Afo^4S7]J#"$t)3)KRj6cm8kp3VMLlo=@^pD1?YEGEY+Sb<@0[o<'2.:/u<jpJW905Z&*E7Do,_IfV1
%h5W'VTlhBP-.SpP$fU0a8Cp$:E%`Y(H>'NbS#T6(0jP\(dt]!0++rBN1cmcSb[CbR9_Y1E_U.1"b"V8+(G0fZah.2]*@s0matBGh
%`Gc&ZY)P$sdbZUuLIHcfYLC")b3k8TolXSqK4=p`7s1%>1[BHFK)G[U:u/6e,Gk&F#]Cf,lX"*V"_bVp;%c$JVk%6.EepMh/3/oj
%Hq5`4EHe=&]!)6=f?j5h8i;_YZeml`IOT-n7I#+)+?_JIRqBdeO)ilWMlZ@VO-SNic9J]n2t6?sCX]/_?gqaumR/4.Oldc0L_^C5
%4q7L)L1EX]U:,VA^/[Fg%qt@\=97,9EKqQ$'#d\BaYp.>JKA].iXSGg[d654MdS<72r\:]kD?l^+DA"Zp:f!'@$ua&`+?J/C8Hsn
%Nf!9)ejrq"Oj)d7lG/u+O_PI<0pj3k?cfjH_]JD,kb7s&Mg8W`j"2NbokE,E1RmAc]FE!_Q>,^8jS0+)SApI"RqW8u;,c)Qifn^1
%`\"03H@E:_J^1h",AtDUQ'7rGlUX#n/@k-QG_is__Ab.[>'kqbISm39m\tQMW.ts(9sHc>.3/eXjpN@kSAtH#EPTC4SOX",ik-2B
%J8_LC62B?V>(_$YJ\J*k.cXp.h,`*J;':kE62d8&=2Sp3>ut%og^UOXk_a7;JM4!A+k,;"q9o.:TnJ7.YXRK3\outPR$qM.dejjN
%lFDK;;RCdq=SUq4n\A*u?%)H/E%i:P`dROErY?I9@L"9+d/`DTaSg2Q^;d]cX$:Xu"_@?*ZEBCpUOAB%j71.2=M^N(d<`MMcH_T`
%-!0kDc;"SJZpXcrc8q,!q0H*:-a#A*1XuViU^1`P<+NnsWQ-\3E4r>GcfcXH'`bNV_Z)I8Xf4)%<>LojT8j6`U:TX,aNt28AWh"V
%X*DO:JS4As1>QH8m;$EZJ9u5hMBa-HR$rV2ob!bNd*d[GdG30^1b0rdNEYHomZ&-6D(PVk"[=3"*QO?Zb7^)f8rXNa50&chK-MK*
%@pi6i"_5f:9lH9aRVbH(XVFL:o&!mRRk\LI&5Z2Jd+VNmjfnENg(ZUA'3ZS%#Sng)79L<bbuE1Te`N(gV/-E3UMZgbB!^e_3ppFG
%X@)W+\#,ctiQcH!AK1S$-^iab=Jk#SckEhTT[!BF#HTERd$m=?%oH(_#E[WoLsTuW#`C$"(Sd#4T(67"@0^5?&ct#/`af?(7W9Mh
%%E["nUA@)>GSGt0i2YWn_r(TL>G)qX740\0-NQW?0PSr5)[JgZJFFuPL?(@G-2kDWB`QAW#)(brkS8c)^JH^XIZ&Lt;VZoX+/g^m
%\D7@eo-(V#&4uVP0G0al+$f$B,UE,Hd;D6hRJb^mOL67B+gmAi:-ASs(C).*+A5<LnRAS?Xs?nVFp"[2,7/'Co$#.MG_!TZ!CU#)
%L1"i=YN+p#5faRdU157u1(q?:UhPQK,$/(FOqS"n)phIk^kYIr,.<Tq@rI:$"dPu'UD^o07OO4LAX)04.EdJ\#e_`5;u]nK,7hFt
%J0Tjc6?))0kE4uf_rC&'Lfr4T!*Q,H,XH(LW`'Hog+/!o#BYa*#a'I%MFuO\L/G6e_Zg]Voak`[>]W07dYY>I@/tSiKssIlHtku-
%2um8"L`i/j&0A.5:5gD_b%`Hq%>8OH&UG;pRFhF)mG'/5$q>n30S6;j%MGH_3=,O?mgVi]"4URT7@^"pq81SP+Ch)!J].M@@R:[#
%NOq(\M@o,)/S_a(eOjA7PttM"Qj95!haC'd-Nr?+_@>\,DGf%-h?0;HQ5_)#4*#af=AB<np6<YROD,dZS2=,??p4USiJ@.34UFNZ
%&Lkfgb3ci\I:O/"BKTsd(K-7&F;mM,7)>?+V?8$a5=Hq9,'4bh<W_bmXW\>]!mEqT@CEp7mk7WU2M;R[]r*n`g\so8)5!r&CEh!P
%djDddPUBp?Core."M9AL`JFI%!:mW#OJ1r+W]EVY]E)0i-0'M)nKId)O60Fi&e1HrE_G9@,JAt[mV&Y9YoS]#%9g&$+ON!i;WCS$
%`!Iu9P<gM^jb;,E3C*CD".Wg&HO:j@=[K;D/XI4,9(c2265O;0S7.[>aB]fW$q5^S4QfY".KFZn!6P[`<eY\S`dhI;#O1K=^dT./
%BXj[f9J`_O-1U'K=h5a$/MP"O!Oiof"nL@j]klS_)M1^X/P1!c*sD.6Fq<%"73r*B&:Tlo['n=/X+d*L5e<S`Ba98Sc6bDX3lFJk
%S=^n9!PpsHCYch,kj$'(-@:Oc'KJf?H"ZR"oat0]D$(U&0>W_.-G.JRM?"$6EL'ch4A>>>Adeg)`@@@FObctPX]>^g($Xqb5rF7H
%*kVIeLP75CP_7V9B<#h`DHLMSC7>'V\/j,@_MSB,:--hrL"\-T.AfGjhlDgW==^ChB4))Fo:56T3b^?@.'"5/N^sZ.FH'-DaF&J:
%Qdh2.q,qA#>fHr/oKm;=[o4=dW\tW3gQ:c_i=72FQAXb^h4M`Nj&Bm73M3oF+&<6%(QB&L<R&L5%'"0[GZZ&:BpC8A0B@ql-r@A?
%^#1@tpg>f@6)C!hi$eGC'mIPE'G%o+opNk;>J[$^-jkqr]U!Cif@@1g1qfE#2jAdmZn@lI.GrA11HUPCckT$1]#*B&=58DA*$<"m
%IHCfQ)@Uuk&Y-d:4<33AJ9sLN:^=dr@<u%<:sM/5o!hEW'kIPl`a?:[AJr,C7@MddH8#P$`mhi3Of-aiR@Ouukuj+Z(P\"7QkJ8c
%(V7`[mnCak6Ag5FXSZR]je[*VCmUY23E/and6a$e_pZm)$ojUJ)NUGI;ijA"GQAeH0#o!53qs@#1K[XrRn36FARo(^W.6cJ;h_UO
%$Zdg1m?L[#TNX_ER..),8G)/&7sTOm6eJ*rJlA#^NQ)2_cPd,c_ZM@;:h="oe[a+"W>'.9=>Uc#SN)m7&kLKZ9WmB08s^!knlAS'
%]%G>l`En0^C/arIj@Tb7M#u)MLSLkEQc4Uj:A:`YHOespSKI/gd-a3-B1Z9KkO;6o'(,fMmK!]"o3O1(I;%\[LeC^+lBWE5daV#I
%NZ3sO9U5RjXS5FuGTR=th#NeqO@8c$!gAbU9,D.D695e'9?mWRQ3XI/\:kf_:j!a)2-)P"cE>7BQb;"&=X=C5EX6Q][.jWt2B<SE
%,YHJ#YQQ="+EeYMa;in6X%uilVfCn]H:eZZDRFPe/po<IlIG50>Ud):YU06BBt1'E#6>No6WQ86F0Gs'F<4sL5gh:U6L=u]Fs;JY
%jg_Vn;EZHN#n`C&jT\(>/eBSg[Z`ItF9B)@eFlhpqk?fl7.S'71[#^LcBTtb&dU;We+kf1iL9Y[A28hm$26)m93DtqI`*E0@#g&n
%N$^d?c594XHiRdQPCu9Wj]6j@PH/_jRi@OD0^S``_Hedo,]!]-IMs&n$go'XY5/5ke[hUkR,pnd!2h6/jVaj'jj9h9m$m&:N8?B0
%884?uLsnn66fbY%MD>cg\ZAEK1s%kte^+"E"GEk?<01TR*7eld0A;%e3P<9Tp,>%q(O8@fN9!?+L?nYY&YgEtm*@3XP1;B+:(#G_
%8#-VVEs(TSMI*FNl#4c:.<6$TH([T[&tGK6RHJN39V4a\H15[`$t^kB@3&T[665qd24CZ8GtWP,[]+;5;TJZRb#c*";Wu`LrQ=Ar
%kr&o[EYL-_Jer0gAZSSr%pd9?AA+"]!f.$uf1Z;NnqF?F3emSGPpO7qC"p&qjc59e\q<GVfF,/U>Ks1F[0LYTJ\:J0R?@:JgIZ6r
%;+<kG#4=cG!94+$G]LI4Y0O0]`;CsL7WPn.7m'5LJG']qf;-,(A?$Tte%iuio9RtCa,^J:^R5hF-i`o18,r,L8)LVJ;LJ2khg84s
%\o!pn<L%UIJJIpf0ptmY016R&`,q^lht@<Q0B&PG:hFE^R3dlW_?$D[V/K$BaP/.W'Ra6IKA/=nfH7IY73[;c%dgg[#m*ApG;/UV
%bcTsTFi#L;N9_'CL`Kaf*h*(8"dZ%C(u[bVQV!bA&\tr\k+OTSF*i9+5-OekAf^7Mkof,R=PM00&fKa;oP6Er;%@Od#8-SN&WJBW
%g>#ka")d?oU>HB6\`M?.UY8$/bd@\.e1NU[)mQqbNLRFl5MXN>_ki/1C:rHJ0]8E\#(2hMJ2d'.ph$C+R/Sek)fdah,<F&Xle7tD
%>VE_5\LZ=)BAHp=R!0"XC$#S*k$IP&p/)%lB)Yg+r?;8ocS?X8+pB4(bCNuEOTb=E+q&Vdr8?SI]a!r:(CEQt')D`\[BaYC/A/Ds
%hUb"E;RZV18DC`?bAF;6i`I%Y<G,[Pjb\8mO7u#\^s^W?["3_>b2pmo8Li"M324;dZI8SU@(:\++0IWu"7DkTE6E-W0@nV0fB:Cn
%feli9R^oCGguJGV(k\b#0K8%B(R#??098'j]3Vj(+#/enctug$^*)$'!IF>l,<U>`??Yp+,J8NS9n+hE<sRst-&40QqA,sNVYJ\B
%5Bc;aA%,Cdp<R%Bb])qge[-@af^X*V`OR@*XFpA.m5,l=/L0U)J&a[RPhdpIcnGm;ja>;_@:JHL&S*@':3_7!%Nr8l[[f#(0=LKo
%SNcUNUL-MXk[c:RT1;7Pp+d\>DajknHSZun4H,.ciA*"j\<"l/`aN\r$_0`Mk0qXSL6ANAb$pbPjXG"YcO#B$\hYi>KPaur36U7k
%Ha2Ra$/9*TIghRMPK1BWC?StF!pSVS4/(=$].8\7$)sC)jS*9Qna>N5qVe<0>5+@YNptDje&Hb?%peiY:S#2baCS-+\FN^#P/^I#
%P)l>hK4]rq"@k7QShM<&hEDJpr5i]Hj^P!fb#s$5HP^=GKmbP`(1(#1CYP>C7'2@-5(GITj_bo5OpZf7c^-DbcHa+LCjtH+%5%l;
%`9:EV;sL1$g4VNR8o0gJQ5rj58dt&tSK"FKkMuWb_on5g=cX]B*nt[Z4$kXD#G@"SiIWWlO8UoJpahW7S1]3g['H'SCI2m2duO8m
%.h;uu4gj1KcX!/_^F$&LnsJJuq/A:QpIasF/p':i8;?cX75hf8SY]hL#PkUbT-Znp77IbOEnk2Dj@&k5+t;gO796K*cdFQuq-@<[
%?6j.La<38DGaB>^nLQU;m??UEAhLBaoBJbjFLJm(O&!P.$.@9M)=fGQV<CZ@/rFD,2#[:o=`7B%3=P#:_m@4#bV%""emn^NQX;kh
%HM7/!*aa?AQb?BVAiBK9)uUM2hH5[rm^8Ed=lq(^`B:sOBQZQHq8$q$`AP%Y1^5$k&2YB:qM2?O/N>Tec^P"!EJ7])-rP`<P%04;
%d*#p7n$nZ:^])*TIX-?r`*;iA7Qs8HC3U0#[XNLHIJr`'gR#S.jF$hX^>+b;g]-lgYY6];$85'5+3X5\9WW+Qcdg:t>j?_Ip;UNG
%caG%SX47#hS1_SV7)K^$4PP?&R[>mdMSiK'i@EZTb9X1f>:pk\q!Vr2M=Jn3o&1JcS(j4hs%dC!b?L#+PGs4PXPQ5jYgmYaiRb%C
%ileY+-2aVVIPlEp%XK;4SR.]S]BBF,HD=dPUL*_cb[>#)3ljUYoEWl8+>3hOLV-;jC1:gjFF!lPFa>5ocZbhP3o^uWFmXK!3uV+h
%dgjcWVc;r.dp'%8ro"k#I8al&s'I7\%lNnpj,Yo!W@m;ZnYq[O08DLTi7Q*,r"^9@s'UN__\@3i'2:rNPOY48o0u7Qg6VE(qdd@k
%\$d`cFS;%1K?aMT=9PF_U@MPO!pi]XW_IL:h>C,)c)<3Y"dtnF!MZ!kV)n.WiLqB/jmfM8A%Sc/`rW<"2eh[dVHI4XA)c_.B^YU8
%_rFA&CA1@CSj^32!$-uGDH"A9AY]-aCBiW/r6c93ibR`a`L!hZBCVh'r@GZ3hM?)c/n(4^X-b1rD"4&5N$82O'"gG!Ilp<l[ILk%
%E3?33!B2S?f$>JTk<;"b"QuC0^^"r[qi1aMGZf)MC4&Dm`tFFO^OldQhO<>R:UsK-W,HeB3!B90nHP#%m*0Ibj&Ygr([ao!MUN'I
%Y`.m^L[F#nLTUA(plsgPU`2TcQB9:7GAunYDgi)N*"APOYRWmocO&m%'rNcpUuN,%"O,2p#QDiWO.'I2?e>"^'23%MCP08$q44mD
%\$Q!YD/au`ruE*G_fds:rNh"Lo8hdYrU!\4IeSU^I.lZgs7kaJmsb09cQ:F$pF99kjb!mLME5</3\t66dZ1nZ@GSa1^HEcH:7B.E
%1U,*(9F@=Cj-ABin7:@aa%LJlO!s0M2c"<ZDK$%-A"DX^GS#*^4Lp?.J%TRrc5Yi6R#4,ad1pTRnU='j`Iq7\)gUs(+tntPAno6f
%fC<XtMu6>GApu[:1O`0npCiCB>!lpSbS;O6mQb;BL@3,cW9Go/!Jl]u9LpNT6\0S3,/_fU,A5Dmhh"WtACTZKIQN[CU+LFLSlRms
%i[iUW(AoOJL4&:s4GM\8T9..8$WAa=7)jQ30`9:[_`5*[3K1@"=4i)AE2f$7Ol7[K7)lM-HP%-9')bsYN3NadU?AF]#`V[cb2OPV
%:J#%e":m?/H=8N"d##Ru[bMaZ'(^-Q0]I96bO^G*d$#gej4O:cKbsP@Qi+0f(oK"a@Q:k.9OWIq$L-63_FWe,[dW-?XgdH%i"K$+
%jk=\Y_43UD^_9pL/fh_)k*&UYCKsV]l]MhiFP9q\G[`2Qr"aZX$7"F68uXb$d_Q#iO`(Bansch\0G%POXZm>MEIRYG;&Jh_g>MuQ
%Ki)lh-OO@$'\?8](hpBRp.f&WkKPGoA2*r>Ohj#cD@FO\8lJ4aUHY=8F<WF8K-PqeDZ*lE`]>n&oYV:Y`uk9U#`S\QhA7n/)0[h5
%oP_+U:\2,a6!<!I(4Z/Va2_8"a]8,hTAj0sZ[@r,\!:Ni,OTmbakQ]*h(?3Z=,oTN:MF?A.-n381IGg<GEf,gPm3)$_9u:6%EU+t
%;M/WX>aPaIqDY/K/a7JfB8V0s5_uT?eoC0mPI,.`p3,r/,BS>T,G^Ct1r)Nu2kBZ)9mjEiHen!(7:*b%ld*oGYM[C/m+O!D*"6ZF
%974:0n@$8as'CWKPCNJhX&jfHrems%Z)#,1iJ[_bp$@TT^W!qdlL3Il4o=OA=$QWXh=n+ErU@;brW`]Io`h%9numQ>j2W8?04N!L/-~>
%AI9_PrivateDataEnd
