%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 04136.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: Onno van Braam
%%CreationDate: 26/07/2019
%%BoundingBox: 0 0 993 801
%%HiResBoundingBox: 0 0 992.9495 800.6578
%%CropBox: 0 0 992.9495 800.6578
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.4%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.4 x589 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font ArialMT
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: ArialMT
%%DocumentNeededFonts: ArialMT
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                    
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
            xmlns:xmpRights="http://ns.adobe.com/xap/1.0/rights/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:rights>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Copyright 2009 - 2011, Onno van Braam, EVOlution Graphics</rdf:li>
            </rdf:Alt>
         </dc:rights>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Onno van Braam</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Douglas A-20 Havoc (1941)_S</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2019-07-26T10:56:42+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2019-07-26T10:56:42+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2019-07-26T10:56:42+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUo836HNr3lfVNG&#xA;hnFrLqFtJbpcMpYIXWlSoKEjx3xV5i35RfmtZQXS6N59NtE8cv1PTVglSCB3b1Y4oWaab0oon/dp&#xA;8DfuzvyoMVU9B/KX83oZtPv7vz49nKrRz6jpcCSTwSSC6MrKZGkjZ/3FIiWFWpU4qmt3+UPmia3v&#xA;oG80m4i1HUU1aWOeBv3NwzkzfVnSVXRVRUSFdwnxNu3BkVQcf5G+Y4dGtrW184T2d9aRlYp4IW9I&#xA;yCcTK7I8rvsV5UDj4yT02xVFW35WfmbCsJk/MS6nMVtJbMjwuFJMBRJSVm5NJ6rM7Mx6UC8SoOKq&#xA;uvflJ5g1r64bjzA63MkCw293+9dSps7eF0e3aT0+Pr27y/Fzr6rKdq8lUHpP5K+ZtJjjb/F11q1z&#xA;FKjRT3ZlQon+gLWiyOhaMWDFfh+LlxJ+0Sq9cd0RGd2CooJZiaAAbkknFWP6tr9w4iXRLqyZ1uYo&#xA;p/WPqmRXcIyRKkkVGqw+MkgUPwnFURpHmS3vXit5WRLuRQQqFiCwWrL8SruKE0Fdu+KpzirsVdir&#xA;sVdirsVdirsVdirsVQVvqkU2q3WngKHtlRvtgseQ5NVAPhA5LQk719sVRuKuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2Kqc91bW4BnlSINspdgoJ9q4qo/pO2b+6Ek1fsGKN2Rj7SU9P6eVMVd9Zvn/u7PhT&#xA;r68ioPo9P1vxpirvT1N/tTRQq3VERnZR/kuzKK/NPoOKu+oFv765nlA+z8fpU/5EiKv04qsms9Mt&#xA;YnumtkdoFMpkKh5TwHKvNviLbdziqUtp8UnlySK7ai3VxGbqSN2jB/fojSK44sA4TlXvXwxVLLWa&#xA;a30+zKw3foWogepjuCvpxFS1Gacr9gHfhirNsVdirsVdirsVdirsVdirsVdiqVW//Hem/wCev/Ju&#xA;1xVNcVdirsVdirsVdirsVdirsVWiSMyNGGBkUBmSo5BWJCkjwPE0+WKsf1bz1o2nTSQiO4vZIkaS&#xA;T6pF6iqE68pCVQU6ElqD9ojFVXSfN1vqstxHa6feqbZY3kM8aQbS8uJCyujEfuzvSnv1oqlPmnzb&#xA;aSWX1S2aRJ1urNpykkYBt47mGW5Xmkm4NvyBFdwaHFU00rXNHnlZNOsSspUFggt42IqdqGRW2477&#xA;Yqmgvbn/AJYJx/soP+quKsf1/wA4SLpajSzHBf3p9K0uLp4WhidkZ1aVUkZh9mgqPtED2xVTsfPp&#xA;pJBc2V1e3gjSa3/R9nM6TJIzKNyXjhPJG/vZVB/ZJGKspuL2ztiBcTxwkioEjqtQO+5GKpL5g8xW&#xA;MNo8Uciet8EirNzijdQ3IAMVPMSemV+GoxVBXlxbXVnp1hNaR6pYKw9QWjm5+GKJuD7Ig+F+BqG+&#xA;E0PhirHbbVNOn9OxljmcR+mZkfT0jSSNCDKFlqGPwKT4kb+OKvR9OleWxgeRuUvALMf+LF+Fwadw&#xA;wIxVWlliiieWV1jijUtJIxCqqqKkknYADFUP+ltK/wCW2D/kan9cVRKOkiB42DowqrKagjxBGKt4&#xA;q7FXYqgr+/uLR1Isprm3KkvJBxZlbsPTJDH6MVQ/+JdOTa6WWzY/ZSeMhiPEKvI09ziqJGs6VwDv&#xA;dRxAgECVhE1D0PF+J37Yq850X8zY7jzBbXM3opp+oTNHGKFZo0nSIQvKCxKD90vLkq9a7Yq9Fk1v&#xA;So4zL9ZR4xTk0VZQAdgW4cqV98VQ58yWbjlawXF4g+08ERYA+BB4t+GKoyxuri5jaSa1e1HL92sh&#xA;Uuy9mIUnjXwO+KonFXYq7FVk08ECepNIsSdOTkKKn3OKoc6xpKgk3tuANyTKlAPvxVg+sat5p1Qz&#xA;tYXElrBArmS1txB6igQepWWT1+YKuwX4eOKo+58qJaXkNzdTreTXckcU07W88k7CKKdlDOkpcqOf&#xA;ToMVQt75X0mzsLuW0tJ7iRIJSliiaoizUBb0aevwAkbalKe2Kpd+Xs1zqR1G41nR73RrqN44oYpo&#xA;bi5d4lLlG5XaXDrTkRRSFruBvirdzoWnTXl00Us0qzzvLfMEZ5IHa4l/elFVPSoIVYg08QCa4q3B&#xA;o2pWNpLPE15C/o8ntms1MAdRyo3KSRSgpSpUkD7NMVTuHydrKNKTeeh6ysHe0maCSpAA4sYn4rtW&#xA;gHXeuKpbcWNx+iFinvrS/sbbf6lJNcC4It3Pp8ZBcojmiqd0Wv04qndr5O0xn9e3WBB8QkjEM6Vc&#xA;0NWUzhgw/jiqXaNp/ly6tBNZLATIFa4FtbXbASEBiGKS/rxVG22mUur23gN36MkMHJYFMSqQ8pFF&#xA;vXem+/wbHvXFVIWmmaX63rXl1bNyDSsZtOtSoIFFPo+iOPcVHUnxxVIIdA0C8uLhrNGMscyi2hit&#xA;BJKVSJCsglL+n9v9ssFr4Yqzry1Z6naWTx3vEBpGeGMBQyq7FyGCfAu7U4qSB4nFU3IBFDuD1GKo&#xA;P9D6YG5x2yQybAywj0noK7c4+LU36VxVBXnlDQbsh5oHMqt6iyiaYNzoRyJ57/a6GoxVDSeSNOZQ&#xA;I7q4iYMrBx6Dn4WDUpLFIu9N9sVXf4XnXZbuJgOhks7csf8AWKqgP0AYqsh0PXLaGOKOWzk4qFaW&#xA;JLizLUFKuI5pOZ9ycVYD+YfnTV/LliLhN7yaeW0SEzXM0HG3AMkxVnWrH1VURtVduRr0Crvy6896&#xA;h5hsDdXwnaW0nht5rWzeSMSx3EcvpMqtKoVw6bqCBQbDtirJPMxsItHnmtNM1C21CRoktrjhKWE8&#xA;sqom4aShLNTlTbrirBxfRPp+mtaalpErzSR/VbWwkhGohzT0j6kbPKTsDQAtsBx7Yq9D0VtHbT7O&#xA;5t9Jv2leGNkmjV4+XNAaq3qIoDV9hirzv8wvzJ1jQZbKKwZpBqVsmor9aMsxjguJXFvGqeoULBEB&#xA;YkNRvsnpirKfJHmDVvMGnWV8hIlvzNHJHJcXaxRS2x5MIwHZmWRXrUt8NOO/XFWVS6BrNyoWWayi&#xA;IZSXeGa7korBqLJLMvEGlKUI3xVuXyjJPE8Ut8saOpUtb2lqkgqKbM6Sgf8AA4qu/wAFaY28s88j&#xA;H7RrFHX6Io0A/wBiBiqKsvK2iWKgWsMkRHIhxPOX+Mlm+IuW3J8cVRkelaakglFtGZgQfWZQ0lQa&#xA;gl2qxNffFUBrPlbTtTWQkvBLIrhmjZlVmdQpdlUrVqKPiFG98VQF95SuJpIyotZo0YycJIylH7ES&#xA;Lzm8f92d6dNsVWf4Y1Vf7mOxiB+0OLy1p0/vllp9GKtR6D5jhlLQrbRsxX1ZIrmSBHAPVoIbeOrc&#xA;dq+p9PbFUFL5Y12wi1W9bUkjjuYmM5mmuZYYY1MrvwQnYESmp67A1rirELb8ydTufqrXlvLBo+oy&#xA;m1t9ReG6MLsxKivK+SitvuT+o4qz36h5qr/e7f8AGOb/ALyeKoldNvzpsNhM9/6UcSwuIjaJ6iKn&#xA;D4izSPU9TR/w2xVpfLs/qvMIkLSBQxlaFnPGvxP/AKK9XNfiPI18cVdD5QiVSAtrFGx5GBLdFAbp&#xA;y9SD6qzfSP1VxVXt/J2kRO7NzlEgUOr8f2akUYKHH2j0bFUWnlvQEZH/AEfbvJHXhLJGskgr4O4Z&#xA;u/jiqPihihjEcSLHGv2UQBQKmuwGKrsVdirsVdirsVdirsVYh+YWieXZdEur3XIUl0u3/wBJuIiX&#xA;jf1goiSWOSMM4bjReNKHb3qqpeQ/LXlyPR7O90QCLSpWW6ihRjIZZlBT1ZpJEWTkvThsoIxVOfNG&#xA;kanqdukVlOsHAM6saclnDIYpVqrKeADji3wmu9aUxV4toP5OecbTz3e35sxaWB9T9G6gBZMYpucZ&#xA;Wb6uHKpzVHACr+75/AAVGKvdNDsbmxsFtZ2VhGxEIQkhY+y1IXpv2xVgn5j+W/JVjpsF/wCY4zPZ&#xA;wyLb2RDvFNH6jFzEGhRjIlAx+P7IBpucVZl5Z0TT9OsLcWSRpaJGRYRRVKRQykSsFdvicu/xMx67&#xA;fMqpzirsVdirsVdiqBg17Q7iIS2+o2s0RJAkjmjZSVJVhUGmxBBxV5zc6Lrcn5hDVVvoDaC9iuI9&#xA;T+vAcLJEpJZfVa0+I1FfpxV6V+ltK/5bYP8Akan9cVd+ltK/5bYP+Rqf1xVQvrrQr6yuLK4u4Gt7&#xA;qJ4Zl9VBVJFKsOvgcVeY2X5cXhey0rVPNNrdeVtOnE9varwWeTgSVR27Dc/tH2ptRV6r+ltK/wCW&#xA;2D/kan9cVd+ltK/5bYP+Rqf1xV36W0r/AJbYP+Rqf1xV36W0r/ltg/5Gp/XFXfpbSv8Altg/5Gp/&#xA;XFXfpbSv+W2D/kan9cVd+ltK/wCW2D/kan9cVbs9T029eZLO7huXt2CXCwyLIY2IDBXCk8SVNaHF&#xA;UTirsVdirsVdirsVSHz3oV3r3lLUtJtGVbm6jAhMhIXkjq4BIrSvGmKu8iaFd6D5S03Sbtla5tYy&#xA;JjGSV5O7OQCaVpypiqfYqxfTJfNzfmBrMd2r/wCGVtoP0exCBPVopbiR8ZPL1OVfb/JxVlGKsM/N&#xA;fyfqnmry1Dp+mNEtzFdxT0mYqpUK8bbgN09Tl9GKsr020Nnp1raFuZt4Y4i4FK8FC1p9GKojFXYq&#xA;7FXYq7FWlVVFFAAqTQbbk1J+/FW8VdirsVdirsVYV/hb8yP8SWd6fOStosD8p9M/R8SvKvNSVeYP&#xA;3VSAVUUr32oqzXFXYq7FXYq7FXYq0FVa0AFTU07nxxVqSNZI2jYkK4KkqxVqEU2ZSCD7jFUHb6LZ&#xA;W9vFBG9z6cSLGnO6uXbiooKu8jMx9yanFVT9GW388/8A0kT/APNeKu/Rlt/PP/0kT/8ANeKu/Rlt&#xA;/PP/ANJE/wDzXirv0Zbfzz/9JE//ADXirv0Zbfzz/wDSRP8A814q79GW388//SRP/wA14qg9W0y9&#xA;+oP+iZKX/JPS+tT3Ji4819QNwkDbpypTvirGfIemfml683+OX036v6KfVzpVxf8AP1+bcufqvTj6&#xA;fHp3xVmX6Mtv55/+kif/AJrxV36Mtv55/wDpIn/5rxV36Mtv55/+kif/AJrxV36Mtv55/wDpIn/5&#xA;rxV36Mtv55/+kif/AJrxV36Mtv55/wDpIn/5rxV36Mtv55/+kif/AJrxVSudDsbmEwyvc8CVb4Lu&#xA;5jaqsGFGSRWG48cVR+KuxV2KuxVI77W51vZ7O1kWO4hdEWOS1uJg5ZBKT6kVFWq8gOtCPoxVHaVq&#xA;9vqAlRfhuLduE8RDqQakAgOqNxJUipHY4qjsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirH121W5vOnKeD0lPfi72cn3cuX0jFW4x9W8xmivwmld&#xA;PieVkVZYUkJVCDGnKSLryFSTtXFU/wAVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirGLlL4zQtHNEsYmnIDRMxAF/ESSRIvz6Yqs8x3H6OnW81Ca1&#xA;PJYjbuyJERJBLyCBpZh8UjSKo41J8MVZUCCKjcHocVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirF72S/WG59GGJ0EGp8S0rKT++FdhGwG/viqhrV&#xA;/Y6m1pZ3Bsvrc6n0bb6wXnAeEzo3oiMPUNGrCnh74qn+gTtNo9qzRtEyJ6TI4IYGImM1DAEfZxVM&#xA;MVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY3Je&#xA;2SyGC4aSJZRfQGQRSEcprpEUKwUqSWYAe+2KqSazC/k+wneCV2MFnK8YhfgaGNmAZwiEdh8W+Kpp&#xA;oiTQyXdvLEsNWSeOONFjUI68KcVeQA8omP2u+KprirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVWTXEECc55FiStOTsFFfCpxVKLO5tg6XJcNbouoSGRfi&#xA;HFblSSONa9O2KoWwijuPJSh6+mFeR13ViI5S5XfoTxpuNsVTOCZ5G027enK5hMbhdvjdBKD8h6bf&#xA;fiqY4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqoX89x&#xA;b2U89tbNeXEaForVGRGkYDZQ0hVFr4k4qwzybr2s+Ztb1c63ol1oDadHBFa2sszcnDyT85ldFi2b&#xA;01Hwll22JxVDa5bEaleWMPpCKGUtydYmuWE8DM4RrkRrJvKzf3jU47lcVTDy/pNrq+mX8NxcerW4&#xA;uUYfu2YGd2kYni0iqech/umA26nrirIbPTdKmtLe4Szigd0WVTCojdC61PF04sPtEGnXFUN9auba&#xA;0kk+vB5Q86w28yq7OIpGVEjCem7NQAblifniqaWU888POaH0WqQFqTUdm+IIw+RUHFVfFXYqlmuT&#xA;TgWtpblfVuplVwwJ/dKayGgK1HTkP5a/PFUg8oXN7a3ZtryWAtdyMwigARavCs8ZCNIzA+nXlRAK&#xA;96AYqzLFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgL3SUnuBdRSGG54&#xA;CJ3BYB0UkqG4NG3wlmp8XfeuKsfby9zgt1Wd2kn1N3n/ALtQ3pPL1Z45nICLTixNRtXeuKojStEi&#xA;+s6haG4lje2uTJE8SwowS4RXDKyx8k35IQpHT3xVFaRb3SBbNr6f0oIzHASIeTCCV4WJPp/yqlfn&#xA;iqP0a3ghsgI0AkDPHNLT4pHjdkaRm6kswLb+OKo7FXYq7FUqk/f+YYgfs2sbMjeD8QJF+lZozX2+&#xA;eKsT0/Uobm0fULeS6FtazwLIji4ijL2qwpIoQwFTVoyA3OhxV6DirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdiqQaj5ysbWWWCCGW6miRpGZFYRgIqtuwDNQq44sFKnx64q0Nd155TCdK&#xA;Fu3reiJGmSYA+j61Si8CfDY/f0xViuo/m1JZqWSGO7UBmUwqV5cQGAUTSRElgwIHXffFUy8uee9T&#xA;1+O4ktIYkW3ZUflHLKDyXkCGt2nX7yDiqtBcebhe2du6WRja4mkSb07yMl3WWShV4woHFmH2+tMV&#xA;R0P6ei1LUHhjVrmeOFwskSLECAyJV1uWahK7/DUeBxVUOl646lZ4dOnTm7oJEkYr6p5OAWB6tvir&#xA;HrLzPc6TYtI1zacLiQyR2vCT92XFSgZIreKlByZiBvyNd8VTCx846nd3ZtoxbPIiiV44VkncxkUJ&#xA;QRMy1WT4CHZd6+1VUyXW9Q+rwXEgWGO4QSRerHEhIIB6Ndjx3xVYfNkscjC6tI7KNYnmE9zOYo2C&#xA;FQeDmPg32q9cVQeh65BctPevqlhDJLL6SxOyyFSVEnDl6qVcKQjUH7A8MVUJLK2eWa1+vWco9OBh&#xA;OXiiNFHp8RVJnrxhrUOOvTxVZXpt/He2kUyspkKIZUGxVmUNQg7jrtXtiqKxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KsQ1zyGb2R5IZo5U4MsNrdRJIiMUSNWDlXICrEBsKn+au+Koz6&#xA;v5qiuPXmhtp63HrBLZmQgfV/R3aXYGu/2TirC9T/AC/81TRSxWvqUuI3ilkmuEViGRY15iARo4WN&#xA;FBUgBsVTvytpfnrR47gTQpcmYpxM07XDKEWlA8kitQkk0xVGxat5wnvrV59KhFqlxKicZVEjPGks&#xA;ZBHJ1UbMwNTt4V2VV7K61CHUtTNlogW4b03uYxPGoaVgzBy1DuwIrt2xVHw6xrMgZv0TxRGZGf11&#xA;YfCaMQFVmNOmwrXFWLCz8yalZ/Uo7aSE2ZETzeo4UkJxZVS4fdXjfY+mNj2bYKrV8l30mqRajqOl&#xA;pqFxCvCB5RYsYiWMrSKZIpTyMu448aA98VT6207UI40IsTbziOOOeWJl5TGJAivI0c9vU0FACDTx&#xA;xVq50LWdQLLqDLc2jQvGkTyvayKzMhBJtuRO6f788O/RVJtG8maE0d1a3+l3V7IpEc3O8kmjkjBC&#xA;0IlnXkjSws3Fl8K4qmcV3bWys9vbXEOnQxQRRxPPcIkYIqOPperGF9ORNuQO1KYqnegaPb6ZYRxp&#xA;HwndENySQSXC0Nabde46nc1JJxVMsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVQt7qdrZ0ErfG32UBA616sxVFrQ05MK0NMVSD9P2q21lNEGeupSxmqSsgMkk0ZAkhSZSw5bAb&#xA;E7VA3CqJ03VbQXmrX0vqxxtOsQrDNQLAgUljw2JYt9FMVW2Fxp12RPcxNJZlXmtZZYJPS43E8j8y&#xA;zJxHwBDU9K4qmmixwJpsTwKqRTlriNUAACzMZF6bbKwGKo7FXYq7FUq/ufMA5fYuEYoe5d1WoHsq&#xA;22/uRirE7HSpVsZYJZpbp55oeFzIgqn1hIiiBxbv8EfMD+8G222KvQcVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVUL8X5spxp7RJfem31ZrhWaISU+H1FQqxWvWhxVg/kcecLL&#xA;X9ak883dk95JFbDT57aiQi39W4JjQskZ2PZiW6VJ64qt1aSVNSvry1t/WsJZlMU6IZYy8cD+owTj&#xA;xehWQEnnT2xVMfLEmmWemXV5dQPGsd1cyRySxtRPTPCTjyLrEeaMtOQqR4UxVk9ootNOgSd1T0Ik&#xA;WRyaKCqgHc0xVKIUVrS4NhFOt48ly8ckQaKMl5XKSkycYZAajf4qj2xVObIXohpdlTJyPHhv8Pbk&#xA;aKC3jQAYqr4q7FUr1tJUlsb2GMyPbzBGAK7RzUVj8RXfoBv3+kKsc8sWz32pLPc2JtpbWT94shDn&#xA;9xCkCcuMhUFj8YBTanWoxVm+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xVRntIJyGcEONhIjNG9PDkhVqe1cVSKLRNMuXEEsCMJV1BWkZQ8lTcBeXJwxLAMaE4qoWNjpzeUj&#xA;LcwxSTTiVZLmVELGSaVl9R2p/M9WOKo+y0uyjbSlFpFFcRo1zI4jUNzCBHB2rUtPX6MVTvFXYq7F&#xA;XYq0yqylWAZWFGU7gg9jiqy3tba2Qx28SQoSWKxqFBY9TQU3xVUxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjbpdesJDOkcEX12agSQOBFdpJQsksfIVXcdCNiCDiqjF&#xA;p+pnybZWrzxBngtUakTM3qOUqSxlAY8zUnviqcaW93NdXUt0gSSLhbgUAqQPVLcQ0gWvqgfaPTFU&#xA;yxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVi9+&#xA;+oiC5EEMLr6Gp8C8rIT++FagRv8ArxVbqNm9lDBJcCgRQsi/XJjGywwnj+4dfRHxqv7P2qeOKpx5&#xA;ct2g0eDnxMkoMzsoVQfUJYbKFGykDpiqZYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxi6uZlkSIWsskbyXMTMpiAZJL6JXHxOp3DEdMVU/NFl+mGS&#xA;Ca0lT6uqlOTgfvJ5VETVhnQ0V4u/L/VxVlSIkaLGgCogCqo6ADYAYq3irsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirHxvfz2p+KSGeH0v8AnrO13JT/&#xA;AJ5oOv8ALtiq1/RvfM3p845XtZQXjBQuqRRK4qOBZaTTKahwT4EDFWRYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUgvNOuotSub2E3TzSyRvbxQ&#xA;+gIzwi9IhmkRitObsanwpvtiqO0jTZbb1JrmQyXEpY0JJCKzlyo6LUlviKqtaDbbFUxxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KoW31XTbmYQQXUUkzJ6qxq4LGPb4wOpX4hv74nY0ebIRJjxAenv6&#xA;IrFi7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkHn3SvMOq+U7+w8u3a2OszCP6rctLJbheMqM4MsKyS&#xA;JyjVlqqnrirzjWPy3/Nae3QaVqUtlcCb1HabzPqc6NETvFxFhGRQU4tyr1rXFWSfl75U8/aTqVtP&#xA;5hu0mhjsrmG7Katf6gJ7iSeF4JBBdwxpF6caSLVWJPLFXoWKoXVTqg025OlLC+pemwsxdFlg9Uj4&#xA;TKUDPwB3PHfFWHpe/nbG8CSaV5fnX04Rczx3l3F+8MS+uVjaB6Ispbh8RJUCtCa4qoPqP580PHRP&#xA;Lde1dRvPc/8ALKPYfP2xVFy3/wCcqwj0tH0GSVkT7V/dxhXaNOdaWr1Cyl++6gdDtiqFXUfz4/a0&#xA;Ty5uCajULzbYUH+8u56/1xVnsBmMMZmCiYqPVCElQ1PioT2riq/FXYq7FXYq7FXYq7FXYqxKx8v3&#xA;8HmGzulM/wBXiVeaSel6EcaWvoBF3aVpC/xbUWla70yjTxlIGeT6z086F/Dm3nPWMY4jbv8Ax8Pk&#xA;nXmTT7q+0z0bXedLi1nVfVeAMILiOVl9SMFhVUI6Ze0MLh8kefdOOlwadrJksYBCbmOe5nLRyKkC&#xA;SNFRQrxUik4xSApVvsjqqqvrfk7zhdarqN3Bc27m/svqzus89tE3GG4Tg9pxuEPNpo/jMhK8SRT7&#xA;LKqF1oP5tXSLGb+1t1gT0Y5I7qcySyK8vC7bjFEFPEx1ib1EP7QbiAVVKLyl+YWoQhrnUPq1vJaq&#xA;XtJruWb1LsqSZJFMPwJ8SgwqSoZe9SSqibjyX50iSFrfUXu7n6qY5p5r+5RhO5tmmK8U+xIbdxxU&#xA;px5fCUO4VV7rQvzCuERnmiS54WyyG31G5ih9OIr9ZhVDAW5ThW4zV5py2Pw/Eq3B5R86kPLPrLiY&#xA;rOIo1upykf7uI2aH4F5+nKj+o5FZAfiqDxCrO8VdirsVf//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:f5b97bd4-4802-426c-a16c-88609cd28611</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:f5b97bd4-4802-426c-a16c-88609cd28611</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:79AE110971C1DE11AAC7AC14CF027332</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:ac805586-9b40-5a42-b682-46c60c50d854</stRef:instanceID>
            <stRef:documentID>xmp.did:F43128F891DDE311877BF9379C8D7CC2</stRef:documentID>
            <stRef:originalDocumentID>uuid:79AE110971C1DE11AAC7AC14CF027332</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F6CA1011EC72DF11ABD7ADA872BA7E6D</stEvt:instanceID>
                  <stEvt:when>2010-06-08T12:55:06+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f5b97bd4-4802-426c-a16c-88609cd28611</stEvt:instanceID>
                  <stEvt:when>2019-07-26T10:56:42+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <pdf:GTS_PDFXVersion>PDF/X-1:2001</pdf:GTS_PDFXVersion>
         <pdf:Trapped>False</pdf:Trapped>
         <pdf:GTS_PDFXConformance>PDF/X-1a:2001</pdf:GTS_PDFXConformance>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <pdfx:GTS_PDFXConformance>PDF/X-1a:2001</pdfx:GTS_PDFXConformance>
         <pdfx:GTS_PDFXVersion>PDF/X-1:2001</pdfx:GTS_PDFXVersion>
         <xmpRights:WebStatement>http://www.the-blueprints.com</xmpRights:WebStatement>
         <xmpRights:Marked>True</xmpRights:Marked>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>359.127778</stDim:w>
            <stDim:h>288.316600</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Process Cyan</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 877 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>40.000001</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>AutoCAD Color</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -800.658 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 800.658 li
992.949 800.658 li
992.949 0 li
cp
clp
108.214 82.3535 mo
148.068 82.8501 li
148.95 82.8608 li
149.64 66.1963 li
149.67 65.4888 150.904 65.5019 150.908 66.2148 cv
150.976 82.8857 li
237.271 83.9575 li
237.56 83.0063 238.12 82.1318 238.927 81.4307 cv
243.815 77.1797 li
243.815 74.2466 li
243.815 73.4697 244.45 72.8364 245.226 72.8364 cv
246.767 72.8364 li
247.545 72.8364 248.178 73.4697 248.178 74.2466 cv
248.178 74.8745 li
248.996 74.7256 249.851 74.7031 250.735 74.8081 cv
258.486 75.7246 263.587 80.5601 263.61 87.083 cv
276.073 84.4658 li
276.073 83.1636 li
276.073 83.0518 276.163 82.9614 276.274 82.9614 cv
276.444 82.9614 li
276.552 82.9614 276.639 83.0454 276.646 83.1528 cv
276.711 84.332 li
277.643 84.1367 li
277.93 84.0771 278.214 84.2588 278.278 84.5469 cv
278.372 84.9663 li
278.436 85.2539 278.255 85.5386 277.97 85.6064 cv
263.471 89.0239 li
263.262 90.4756 262.813 91.9932 262.101 93.5557 cv
267.441 94.0698 272.681 94.2549 277.867 94.1528 cv
293.582 93.8447 308.796 90.9072 324.772 86.5464 cv
328.444 85.5449 331.341 83.2695 333.079 80.1045 cv
333.611 79.1372 334.034 78.0869 334.339 76.9644 cv
346.008 33.9258 li
346.479 32.188 347.057 30.5776 347.728 29.0913 cv
351.258 21.2676 357.367 16.8765 364.107 15.3691 cv
364.107 14.2754 li
364.107 13.979 363.865 13.7373 363.569 13.7373 cv
362.691 13.7373 li
362.395 13.7373 362.154 13.4961 362.154 13.1997 cv
362.154 12.8188 li
362.154 12.5225 362.395 12.2812 362.691 12.2812 cv
366.721 12.2812 li
367.017 12.2812 367.259 12.5225 367.259 12.8188 cv
367.259 14.8701 li
369.378 14.6748 371.527 14.7437 373.652 15.0615 cv
374.345 15.1646 375.035 15.2944 375.721 15.4507 cv
385.391 17.6494 394.127 24.999 396.4 35.9321 cv
399.429 50.5078 li
400.787 57.0391 li
402.339 64.5102 li
408.279 93.0884 li
408.3 93.1533 li
408.3 93.1611 li
409.042 95.2178 409.67 97.3027 410.159 99.4229 cv
412.379 101.201 420.258 107.754 414.261 109.937 cv
404.88 114.066 392.01 120.84 382.445 123.437 cv
372.971 126.008 359.181 126.857 349.139 128.167 cv
349.135 128.168 349.132 128.169 349.128 128.168 cv
340.735 130.056 332.099 131.856 323.384 133.526 cv
288.905 140.129 253.159 144.678 226.05 144.372 cv
205.753 144.143 189.879 143.839 175.556 143.496 cv
180.315 146.067 183.547 151.098 183.547 156.886 cv
183.547 165.285 176.738 172.095 168.338 172.095 cv
159.938 172.095 153.128 165.285 153.128 156.886 cv
153.128 150.823 156.675 145.591 161.806 143.148 cv
147.715 142.772 134.271 142.368 118.288 141.973 cv
103.894 141.623 87.4412 141.279 66.6013 140.974 cv
60.7942 140.889 55.2166 140.619 49.9114 140.111 cv
27.8044 138.001 10.4119 131.799 .704835 117.888 cv
.211182 117.18 .115479 116.341 .436768 115.54 cv
1.9895 111.669 5.26782 108.171 10.8225 105.164 cv
13.3821 103.778 16.425 102.497 20.0051 101.332 cv
23.1619 100.304 26.7361 99.3662 30.7654 98.5269 cv
34.8616 97.6729 39.4275 96.9209 44.5022 96.2788 cv
44.8049 91.2881 li
44.8459 90.6079 46.0422 90.5986 46.1042 91.272 cv
46.5422 96.0303 li
48.3625 95.8154 50.2454 95.6152 52.1926 95.4297 cv
54.3264 95.2236 56.5374 95.0356 58.8279 94.8647 cv
59.7903 94.793 60.7273 94.5859 61.6472 94.2739 cv
67.0779 92.4326 71.9231 86.9331 78.0754 83.9878 cv
80.5374 82.8086 83.2092 82.0386 86.2117 82.0762 cv
91.0076 82.1372 li
92.926 82.1616 li
105.857 82.3218 li
108.214 82.3535 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
47.3777 157.391 mo
52.636 157.391 56.8992 161.654 56.8992 166.912 cv
56.8992 172.171 52.636 176.433 47.3777 176.433 cv
42.1189 176.433 37.8562 172.171 37.8562 166.912 cv
37.8562 161.654 42.1189 157.391 47.3777 157.391 cv
cp
.619532 .538659 .52932 .256565 cmyk
ef
47.3777 162.535 mo
49.7952 162.535 51.7551 164.495 51.7551 166.912 cv
51.7551 169.33 49.7952 171.289 47.3777 171.289 cv
44.9602 171.289 43.0007 169.33 43.0007 166.912 cv
43.0007 164.495 44.9602 162.535 47.3777 162.535 cv
cp
.0704051 .0445258 .0503853 0 cmyk
ef
168.338 148.721 mo
172.722 148.721 176.278 152.276 176.278 156.661 cv
176.278 161.047 172.722 164.601 168.338 164.601 cv
163.952 164.601 160.398 161.047 160.398 156.661 cv
160.398 152.276 163.952 148.721 168.338 148.721 cv
cp
ef
20.0051 107.793 mo
10.8225 107.793 li
10.8225 115.54 li
20.0051 115.54 li
20.0051 107.793 li
cp
ef
30.7654 107.793 mo
20.0051 107.793 li
20.0051 115.54 li
30.7654 115.54 li
30.7654 107.793 li
cp
ef
44.2161 100.145 mo
39.9836 100.479 35.342 101.016 30.7654 101.729 cv
30.7654 107.793 li
43.6497 107.793 li
44.2161 100.145 li
cp
ef
44.072 96.3335 mo
39.1692 96.9639 34.7454 97.6973 30.7654 98.5269 cv
30.7654 101.729 li
35.342 101.016 39.9836 100.479 44.2161 100.145 cv
44.5022 96.2788 li
44.3601 96.2969 44.2166 96.3154 44.072 96.3335 cv
cp
ef
30.7654 98.5269 mo
26.7361 99.3662 23.1619 100.304 20.0051 101.332 cv
20.0051 103.794 li
23.3796 103 27.051 102.307 30.7654 101.729 cv
30.7654 98.5269 li
cp
ef
30.7654 101.729 mo
27.051 102.307 23.3796 103 20.0051 103.794 cv
20.0051 107.793 li
30.7654 107.793 li
30.7654 101.729 li
cp
ef
20.0051 101.332 mo
18.5896 101.792 17.2585 102.271 16.0081 102.767 cv
16.0042 102.769 16.0007 102.77 15.9968 102.772 cv
14.1858 103.498 12.447 104.3 10.8225 105.186 cv
10.8225 106.538 li
13.3875 105.529 16.5398 104.609 20.0051 103.794 cv
20.0051 101.332 li
cp
ef
20.0051 103.794 mo
16.5398 104.609 13.3875 105.529 10.8225 106.538 cv
10.8225 107.793 li
20.0051 107.793 li
20.0051 103.794 li
cp
ef
46.5422 96.0303 mo
46.1042 91.272 li
46.0422 90.5986 44.8459 90.6079 44.8049 91.2881 cv
44.5022 96.2788 li
45.1731 96.1938 45.8533 96.1108 46.5422 96.0303 cv
cp
.619532 .538659 .52932 .256565 cmyk
ef
74.3367 88.064 mo
71.5071 89.9629 68.9055 92.3022 65.6765 94.002 cv
65.0388 94.3379 64.9983 95.2324 65.6038 95.624 cv
68.177 97.2891 71.2341 98.1509 74.8997 97.998 cv
75.4041 97.9771 75.801 97.5615 75.801 97.0581 cv
75.801 88.8447 li
75.801 88.0908 74.9626 87.6431 74.3367 88.064 cv
cp
.0704051 .0445258 .0503853 0 cmyk
ef
86.2117 82.0762 mo
83.8572 82.0464 81.7058 82.5137 79.6995 83.2856 cv
79.1477 83.498 78.6067 83.7334 78.0754 83.9878 cv
78.0754 85.9316 li
78.0754 86.8691 78.843 87.6367 79.78 87.6367 cv
89.3015 87.6367 li
90.24 87.6367 91.0076 86.8691 91.0076 85.9316 cv
91.0076 82.1372 li
86.2117 82.0762 li
cp
ef
105.857 82.3218 mo
92.926 82.1616 li
92.926 85.9316 li
92.926 86.8691 93.6936 87.6367 94.6311 87.6367 cv
104.152 87.6367 li
105.091 87.6367 105.858 86.8691 105.858 85.9316 cv
105.857 82.3218 li
cp
ef
104.152 88.9868 mo
94.6311 88.9868 li
93.6936 88.9868 92.926 89.7544 92.926 90.6929 cv
92.926 96.8032 li
92.926 97.7422 93.6936 98.5093 94.6311 98.5093 cv
104.152 98.5093 li
105.091 98.5093 105.858 97.7422 105.858 96.8032 cv
105.858 90.6929 li
105.858 89.7544 105.091 88.9868 104.152 88.9868 cv
cp
ef
89.3015 88.9868 mo
79.78 88.9868 li
78.843 88.9868 78.0754 89.7544 78.0754 90.6929 cv
78.0754 96.8032 li
78.0754 97.7422 78.843 98.5093 79.78 98.5093 cv
89.3015 98.5093 li
90.24 98.5093 91.0076 97.7422 91.0076 96.8032 cv
91.0076 90.6929 li
91.0076 89.7544 90.24 88.9868 89.3015 88.9868 cv
cp
ef
98.9446 108.424 mo
98.0549 108.369 97.2825 109.055 97.2278 109.945 cv
97.179 110.75 li
90.9011 110.345 li
87.1292 110.123 86.6301 116.765 90.4885 116.998 cv
96.7756 117.392 li
96.7527 117.771 li
96.6995 118.661 97.3831 119.435 98.2742 119.488 cv
100.547 119.625 li
101.438 119.68 102.211 118.995 102.264 118.105 cv
102.277 117.905 li
104.963 118.037 li
105.007 117.123 li
105.299 111.173 li
102.693 111.046 li
102.74 110.28 li
102.794 109.389 102.109 108.616 101.218 108.562 cv
98.9446 108.424 li
cp
.619532 .538659 .52932 .256565 cmyk
ef
149.64 66.1963 mo
148.95 82.8608 li
150.976 82.8857 li
150.908 66.2148 li
150.904 65.5019 149.67 65.4888 149.64 66.1963 cv
cp
ef
160.398 156.661 mo
160.398 152.276 163.952 148.721 168.338 148.721 cv
172.722 148.721 176.278 152.276 176.278 156.661 cv
176.278 161.047 172.722 164.601 168.338 164.601 cv
163.952 164.601 160.398 161.047 160.398 156.661 cv
cp
161.806 143.148 mo
156.675 145.591 153.128 150.823 153.128 156.886 cv
153.128 165.285 159.938 172.095 168.338 172.095 cv
176.738 172.095 183.547 165.285 183.547 156.886 cv
183.547 151.098 180.315 146.067 175.556 143.496 cv
170.839 143.384 166.29 143.268 161.806 143.148 cv
161.806 143.148 li
cp
ef
240.249 82.9512 mo
239.123 83.9297 238.763 85.3965 239.307 86.7856 cv
240.589 90.0479 li
242.438 94.7598 li
242.76 95.5791 243.496 96.0967 244.375 96.1235 cv
252.413 96.3613 li
256.845 96.4927 li
257.612 96.5151 258.281 96.1675 258.703 95.5259 cv
259.294 94.6299 259.825 93.6938 260.268 92.7192 cv
262.305 88.2505 261.875 84.3193 259.708 81.4653 cv
254.121 87.7041 li
259.708 81.4653 li
257.809 78.9639 254.575 77.29 250.499 76.8076 cv
248.637 76.5874 246.978 77.0981 245.564 78.3291 cv
245.137 78.7002 li
240.249 82.9512 li
cp
.0704051 .0445258 .0503853 0 cmyk
ef
245.226 72.8364 mo
244.45 72.8364 243.815 73.4697 243.815 74.2466 cv
243.815 77.1797 li
244.241 76.8091 li
245.42 75.7842 246.743 75.1357 248.178 74.8716 cv
248.178 74.2466 li
248.178 73.4697 247.545 72.8364 246.767 72.8364 cv
245.226 72.8364 li
cp
.619532 .538659 .52932 .256565 cmyk
ef
276.073 84.4658 mo
263.61 87.083 li
263.612 87.7148 263.567 88.3628 263.471 89.0239 cv
277.97 85.6064 li
278.255 85.5386 278.436 85.2539 278.372 84.9663 cv
278.278 84.5469 li
278.214 84.2588 277.93 84.0771 277.643 84.1367 cv
276.711 84.332 li
276.646 83.1528 li
276.639 83.0454 276.552 82.9614 276.444 82.9614 cv
276.274 82.9614 li
276.163 82.9614 276.073 83.0518 276.073 83.1636 cv
276.073 84.4658 li
cp
ef
362.154 12.8188 mo
362.154 13.1997 li
362.154 13.4961 362.395 13.7373 362.691 13.7373 cv
363.569 13.7373 li
363.865 13.7373 364.107 13.979 364.107 14.2754 cv
364.107 15.3691 li
365.144 15.1328 366.198 14.9683 367.259 14.8701 cv
367.259 12.8188 li
367.259 12.5225 367.017 12.2812 366.721 12.2812 cv
362.691 12.2812 li
362.395 12.2812 362.154 12.5225 362.154 12.8188 cv
cp
ef
289.887 120.87 mo
283.493 120.87 li
282.359 120.87 281.432 121.796 281.432 122.93 cv
281.432 123.002 li
281.432 124.135 282.359 125.063 283.493 125.063 cv
289.887 125.063 li
291.021 125.063 291.948 124.135 291.948 123.002 cv
291.948 122.93 li
291.948 121.796 291.021 120.87 289.887 120.87 cv
cp
.0704051 .0445258 .0503853 0 cmyk
ef
124.428 517.379 mo
95.2332 518.059 71.2131 517.685 52.3792 516.254 cv
48.8191 515.985 45.4451 515.676 42.2556 515.331 cv
37.6711 514.833 33.4695 514.258 29.6516 513.604 cv
25.2522 512.852 21.3625 511.996 17.9812 511.036 cv
14.5906 510.073 11.7117 509.004 9.34595 507.832 cv
7.32202 506.831 5.67358 505.752 4.40015 504.597 cv
.43921 501.002 .123292 496.9 3.97925 493.095 cv
5.30249 491.789 7.09204 490.578 9.34595 489.459 cv
11.7122 488.289 14.5906 487.221 17.9812 486.258 cv
21.3621 485.298 25.2522 484.442 29.6516 483.689 cv
33.4695 483.036 37.6711 482.459 42.2556 481.963 cv
45.4446 481.617 48.8191 481.308 52.3792 481.039 cv
71.2131 479.607 95.2332 479.233 124.428 479.913 cv
125.376 479.936 126.254 480.015 127.12 480.16 cv
127.883 479.729 128.475 479.354 129.178 479.158 cv
129.585 447.118 li
120.894 447.118 108.317 447.965 106.338 436.881 cv
106.227 436.261 106.15 435.603 106.108 434.906 cv
105.961 432.465 105.864 430.115 105.814 427.796 cv
104.201 427.796 li
104.201 428.597 103.547 429.253 102.746 429.253 cv
100.187 429.253 li
99.9832 429.253 99.7878 429.21 99.6111 429.132 cv
99.594 429.126 99.5769 429.119 99.5603 429.11 cv
97.2122 428.091 li
96.4709 427.77 96.0042 427.095 95.9626 426.297 cv
90.6077 426.297 li
89.7209 426.297 88.9958 425.574 88.9958 424.686 cv
88.9958 423.624 li
88.9958 422.736 89.7209 422.012 90.6077 422.012 cv
96.1067 422.012 li
96.2512 421.651 96.4993 421.339 96.8401 421.1 cv
99.2659 419.387 li
99.5178 419.18 99.8391 419.056 100.187 419.056 cv
102.746 419.056 li
103.473 419.056 104.08 419.598 104.185 420.297 cv
105.826 420.297 li
105.876 418.175 105.966 416.027 106.094 413.808 cv
106.115 413.44 106.147 413.082 106.188 412.737 cv
107.635 400.552 121.102 402.358 130.151 402.358 cv
130.631 364.7 li
131.088 328.817 li
131.555 291.971 li
132.158 244.512 li
132.171 243.518 132.227 242.576 132.323 241.686 cv
133.51 230.743 140.815 227.538 149.02 229.692 cv
151.657 230.385 154.386 231.63 157.034 233.353 cv
160.008 235.28 162.878 237.807 165.403 240.819 cv
167.052 242.786 168.554 244.96 169.841 247.31 cv
171.427 250.209 172.686 253.375 173.49 256.751 cv
175.407 264.79 li
177.403 273.174 li
179.515 282.057 li
181.75 291.436 li
185.526 307.305 li
192.33 335.884 li
196.669 354.106 li
198.156 360.353 li
209.276 407.056 li
209.766 407.166 210.226 407.366 210.677 407.661 cv
213.02 409.184 217.086 410.547 221.976 411.912 cv
229.762 414.083 239.637 416.256 247.982 419.079 cv
251.654 420.321 255.029 421.689 257.799 423.238 cv
258.391 423.569 258.394 424.424 257.803 424.759 cv
246.952 430.904 229.912 433.561 221.976 438.061 cv
220.626 438.827 219.539 439.646 218.791 440.544 cv
225.198 468.591 li
226.908 476.085 li
227.539 476.26 228.152 476.535 228.748 476.909 cv
233.313 479.77 li
233.626 479.724 233.94 479.677 234.253 479.63 cv
235.251 479.482 236.11 479.419 237.118 479.42 cv
247.528 479.446 257.871 479.517 268.086 479.679 cv
288.199 479.995 307.813 480.656 326.456 481.993 cv
332.31 482.409 338.069 482.894 343.717 483.456 cv
344.44 483.527 345.162 483.6 345.882 483.674 cv
347.163 478.856 li
362.361 421.676 li
362.622 420.69 362.893 419.749 363.173 418.85 cv
363.964 416.313 364.831 414.128 365.8 412.305 cv
368.913 406.444 374.506 404.481 379.621 405.866 cv
380.015 405.972 380.406 406.098 380.792 406.244 cv
384.471 407.632 387.772 410.79 389.535 415.503 cv
391.447 420.613 393.149 425.889 394.666 431.315 cv
399.043 446.977 401.873 463.876 403.733 481.551 cv
404.056 484.628 404.351 487.73 404.62 490.852 cv
408.866 492.198 412.026 493.531 414.1 494.858 cv
418.071 497.395 418.065 499.91 414.081 502.448 cv
412.006 503.77 408.852 505.098 404.62 506.441 cv
404.351 509.563 404.056 512.664 403.733 515.741 cv
401.873 533.415 399.043 550.315 394.666 565.977 cv
393.15 571.403 391.448 576.68 389.535 581.79 cv
387.772 586.502 384.471 589.662 380.792 591.049 cv
380.406 591.195 380.015 591.322 379.621 591.428 cv
374.506 592.812 368.913 590.85 365.8 584.988 cv
364.83 583.164 363.964 580.979 363.173 578.442 cv
362.893 577.544 362.622 576.603 362.361 575.618 cv
347.163 518.436 li
345.882 513.618 li
345.162 513.693 344.44 513.766 343.717 513.838 cv
338.069 514.399 332.31 514.884 326.456 515.301 cv
307.813 516.637 288.199 517.298 268.086 517.614 cv
257.871 517.776 247.528 517.847 237.118 517.872 cv
236.11 517.874 235.251 517.812 234.253 517.662 cv
233.94 517.615 233.626 517.568 233.313 517.523 cv
228.748 520.385 li
228.152 520.758 227.539 521.033 226.908 521.208 cv
225.198 528.702 li
218.791 556.749 li
219.539 557.648 220.626 558.467 221.976 559.232 cv
229.912 563.731 246.952 566.387 257.803 572.533 cv
258.394 572.868 258.391 573.724 257.799 574.056 cv
255.029 575.605 251.654 576.972 247.982 578.214 cv
239.638 581.037 229.762 583.209 221.976 585.381 cv
217.086 586.746 213.02 588.109 210.677 589.633 cv
210.226 589.927 209.766 590.126 209.276 590.237 cv
198.156 636.94 li
196.67 643.186 li
192.33 661.41 li
185.527 689.987 li
181.75 705.858 li
179.515 715.237 li
177.403 724.12 li
175.407 732.502 li
173.49 740.542 li
172.686 743.918 171.427 747.084 169.841 749.984 cv
168.554 752.334 167.052 754.507 165.403 756.475 cv
160.626 762.172 154.614 766.131 149.02 767.601 cv
140.815 769.755 133.51 766.55 132.323 755.608 cv
132.227 754.717 132.171 753.775 132.158 752.781 cv
131.555 705.323 li
131.088 668.475 li
130.631 632.592 li
130.151 594.935 li
121.102 594.935 107.636 596.741 106.187 584.556 cv
106.147 584.209 106.115 583.853 106.094 583.484 cv
105.966 581.265 105.876 579.117 105.825 576.996 cv
104.185 576.996 li
104.08 577.696 103.473 578.236 102.746 578.236 cv
100.187 578.236 li
99.8391 578.236 99.5183 578.112 99.2659 577.907 cv
96.8401 576.194 li
96.4993 575.953 96.2507 575.641 96.1067 575.28 cv
90.6077 575.28 li
89.7209 575.28 88.9958 574.556 88.9958 573.668 cv
88.9958 572.608 li
88.9958 571.719 89.7209 570.996 90.6077 570.996 cv
95.9626 570.996 li
96.0037 570.198 96.4709 569.524 97.2122 569.201 cv
99.6111 568.16 li
99.7883 568.082 99.9832 568.04 100.187 568.04 cv
102.746 568.04 li
103.547 568.04 104.201 568.695 104.201 569.497 cv
105.814 569.497 li
105.864 567.177 105.961 564.827 106.108 562.386 cv
106.15 561.689 106.227 561.031 106.338 560.411 cv
108.317 549.327 120.894 550.175 129.585 550.175 cv
129.178 518.135 li
128.475 517.939 127.883 517.563 127.12 517.133 cv
126.254 517.278 125.376 517.357 124.428 517.379 cv
cp
0 0 0 0 cmyk
ef
17.9812 491.437 mo
15.1111 492.231 12.2351 493.101 9.34595 494.053 cv
9.34595 503.24 li
12.2351 504.192 15.1111 505.063 17.9812 505.856 cv
17.9812 499.311 li
17.9812 497.981 li
17.9812 491.437 li
cp
.0704051 .0445258 .0503853 0 cmyk
ef
29.6516 483.689 mo
25.2522 484.442 21.3621 485.298 17.9812 486.258 cv
17.9812 491.437 li
21.8757 490.361 25.76 489.425 29.6516 488.62 cv
29.6516 483.689 li
cp
ef
42.2556 481.963 mo
37.6711 482.459 33.4695 483.036 29.6516 483.689 cv
29.6516 488.62 li
33.8357 487.754 38.0295 487.038 42.2556 486.455 cv
42.2556 481.963 li
cp
ef
42.2556 510.838 mo
38.0295 510.255 33.8357 509.54 29.6516 508.673 cv
29.6516 513.604 li
33.4695 514.258 37.6711 514.833 42.2556 515.331 cv
42.2556 510.838 li
cp
ef
29.6516 508.673 mo
25.76 507.868 21.8757 506.933 17.9812 505.856 cv
17.9812 511.036 li
21.3625 511.996 25.2522 512.852 29.6516 513.604 cv
29.6516 508.673 li
cp
ef
17.9812 486.258 mo
14.5906 487.221 11.7122 488.289 9.34595 489.459 cv
9.34595 494.053 li
12.2351 493.101 15.1111 492.231 17.9812 491.437 cv
17.9812 486.258 li
cp
ef
17.9812 505.856 mo
15.1111 505.063 12.2351 504.192 9.34595 503.24 cv
9.34595 507.832 li
11.7117 509.004 14.5906 510.073 17.9812 511.036 cv
17.9812 505.856 li
cp
ef
29.6516 499.311 mo
17.9812 499.311 li
17.9812 505.856 li
21.8757 506.933 25.76 507.868 29.6516 508.673 cv
29.6516 499.311 li
cp
ef
29.6516 488.62 mo
25.76 489.425 21.8757 490.361 17.9812 491.437 cv
17.9812 497.981 li
29.6516 497.981 li
29.6516 488.62 li
cp
ef
69.5139 492.867 mo
63.0256 492.867 li
63.0256 504.427 li
69.5139 504.427 li
70.0691 504.427 70.5217 503.974 70.5217 503.419 cv
70.5217 493.873 li
70.5217 493.318 70.0691 492.867 69.5139 492.867 cv
cp
ef
73.5896 484.356 mo
69.7131 485.167 66.6003 487.111 63.7717 490.806 cv
70.7654 490.806 li
75.032 490.806 li
76.0315 490.806 76.8459 489.991 76.8459 488.992 cv
76.8484 483.938 li
75.7048 484.005 74.6238 484.14 73.5969 484.356 cv
73.5945 484.356 73.592 484.356 73.5896 484.356 cv
cp
ef
90.7249 484.925 mo
80.0203 484.925 li
79.5247 484.925 79.1189 485.331 79.1189 485.827 cv
79.1189 487.577 li
79.1189 488.072 79.5247 488.477 80.0203 488.477 cv
90.7249 488.477 li
91.22 488.477 91.6248 488.072 91.6248 487.577 cv
91.6248 485.827 li
91.6248 485.331 91.22 484.925 90.7249 484.925 cv
cp
ef
90.4167 489.384 mo
80.3264 489.384 li
79.6628 489.384 79.1189 489.927 79.1189 490.592 cv
79.1189 492.937 li
79.1189 493.602 79.6628 494.144 80.3264 494.144 cv
90.4167 494.144 li
91.0818 494.144 91.6248 493.602 91.6248 492.937 cv
91.6248 490.592 li
91.6248 489.927 91.0818 489.384 90.4167 489.384 cv
cp
ef
103.208 489.384 mo
94.0056 489.384 li
93.3401 489.384 92.7986 489.927 92.7986 490.592 cv
92.7986 492.937 li
92.7986 493.602 93.3401 494.144 94.0056 494.144 cv
103.208 494.144 li
103.872 494.144 104.415 493.602 104.415 492.937 cv
104.415 490.592 li
104.415 489.927 103.872 489.384 103.208 489.384 cv
cp
ef
103.513 484.925 mo
93.699 484.925 li
93.2024 484.925 92.7986 485.331 92.7986 485.827 cv
92.7986 487.577 li
92.7986 488.072 93.2024 488.477 93.699 488.477 cv
103.513 488.477 li
104.01 488.477 104.415 488.072 104.415 487.577 cv
104.415 485.827 li
104.415 485.331 104.01 484.925 103.513 484.925 cv
cp
ef
104.955 495.318 mo
94.2668 495.318 li
93.3801 495.318 92.655 496.041 92.655 496.929 cv
92.655 500.364 li
92.655 501.252 93.3801 501.976 94.2668 501.976 cv
104.956 501.976 li
104.941 499.764 104.941 497.529 104.955 495.318 cv
cp
ef
89.8708 495.352 mo
79.3459 495.352 li
78.4578 495.352 77.7336 496.077 77.7336 496.963 cv
77.7336 500.329 li
77.7336 501.216 78.4578 501.94 79.3459 501.94 cv
89.8708 501.94 li
90.759 501.94 91.4841 501.216 91.4841 500.329 cv
91.4841 496.963 li
91.4841 496.077 90.759 495.352 89.8708 495.352 cv
cp
ef
75.866 492.187 mo
72.9304 494.666 72.9304 502.626 75.866 505.107 cv
76.0852 505.292 76.4197 505.137 76.4197 504.85 cv
76.4197 492.443 li
76.4197 492.156 76.0852 492 75.866 492.187 cv
cp
ef
73.5896 512.938 mo
69.7131 512.126 66.6003 510.183 63.7717 506.488 cv
70.7654 506.488 li
75.032 506.488 li
76.0315 506.488 76.8459 507.303 76.8459 508.302 cv
76.8484 513.356 li
75.7048 513.289 74.6238 513.154 73.5969 512.938 cv
73.5945 512.938 73.592 512.938 73.5896 512.938 cv
cp
ef
90.7249 512.369 mo
80.0203 512.369 li
79.5247 512.369 79.1189 511.963 79.1189 511.467 cv
79.1189 509.717 li
79.1189 509.222 79.5247 508.817 80.0203 508.817 cv
90.7249 508.817 li
91.22 508.817 91.6248 509.222 91.6248 509.717 cv
91.6248 511.467 li
91.6248 511.963 91.22 512.369 90.7249 512.369 cv
cp
ef
90.4167 507.91 mo
80.3264 507.91 li
79.6628 507.91 79.1189 507.367 79.1189 506.702 cv
79.1189 504.357 li
79.1189 503.692 79.6628 503.15 80.3264 503.15 cv
90.4167 503.15 li
91.0818 503.15 91.6248 503.692 91.6248 504.357 cv
91.6248 506.702 li
91.6248 507.367 91.0818 507.91 90.4167 507.91 cv
cp
ef
103.208 507.91 mo
94.0056 507.91 li
93.3401 507.91 92.7986 507.367 92.7986 506.702 cv
92.7986 504.357 li
92.7986 503.692 93.3401 503.15 94.0056 503.15 cv
103.208 503.15 li
103.872 503.15 104.415 503.692 104.415 504.357 cv
104.415 506.702 li
104.415 507.367 103.872 507.91 103.208 507.91 cv
cp
ef
103.513 512.369 mo
93.699 512.369 li
93.2024 512.369 92.7986 511.963 92.7986 511.467 cv
92.7986 509.717 li
92.7986 509.222 93.2024 508.817 93.699 508.817 cv
103.513 508.817 li
104.01 508.817 104.415 509.222 104.415 509.717 cv
104.415 511.467 li
104.415 511.963 104.01 512.369 103.513 512.369 cv
cp
ef
104.185 420.297 mo
104.196 420.368 104.201 420.44 104.201 420.513 cv
104.185 420.297 li
cp
105.825 420.297 mo
104.185 420.297 li
104.08 419.598 103.473 419.056 102.746 419.056 cv
100.187 419.056 li
99.8391 419.056 99.5178 419.18 99.2659 419.387 cv
96.8401 421.1 li
96.4993 421.339 96.2512 421.651 96.1067 422.012 cv
90.6077 422.012 li
89.7209 422.012 88.9958 422.736 88.9958 423.624 cv
88.9958 424.686 li
88.9958 425.574 89.7209 426.297 90.6077 426.297 cv
95.9626 426.297 li
96.0042 427.095 96.4709 427.77 97.2122 428.091 cv
99.5603 429.11 li
99.6106 429.133 li
99.7878 429.21 99.9832 429.253 100.187 429.253 cv
102.746 429.253 li
103.547 429.253 104.201 428.597 104.201 427.796 cv
105.814 427.796 li
105.762 425.285 105.766 422.809 105.825 420.297 cv
105.825 420.297 li
cp
.619532 .538659 .52932 .256565 cmyk
ef
95.9626 570.996 mo
90.6077 570.996 li
89.7209 570.996 88.9958 571.719 88.9958 572.608 cv
88.9958 573.668 li
88.9958 574.556 89.7209 575.28 90.6077 575.28 cv
96.1067 575.28 li
96.2507 575.641 96.4993 575.953 96.8401 576.194 cv
99.2561 577.898 li
99.2659 577.907 li
99.5183 578.112 99.8391 578.236 100.187 578.236 cv
102.746 578.236 li
103.473 578.236 104.08 577.696 104.185 576.996 cv
105.825 576.996 li
105.766 574.484 105.762 572.008 105.814 569.497 cv
104.201 569.497 li
104.201 568.695 103.547 568.04 102.746 568.04 cv
100.187 568.04 li
99.9832 568.04 99.7883 568.082 99.6111 568.16 cv
97.2122 569.201 li
96.4709 569.524 96.0037 570.198 95.9626 570.996 cv
cp
ef
240.087 492.901 mo
239.945 490.402 li
239.945 489.818 240.027 489.254 240.179 488.722 cv
240.9 486.204 243.207 484.378 245.963 484.353 cv
257.015 484.504 li
260.385 485.876 263.147 487.909 264.935 490.624 cv
266.21 492.559 266.99 494.84 267.141 497.476 cv
262.534 497.523 li
262.903 497.524 262.696 497.767 262.696 498.135 cv
262.696 499.04 li
262.696 499.408 262.903 499.768 262.534 499.771 cv
267.141 499.816 li
266.99 502.453 266.21 504.735 264.935 506.669 cv
263.147 509.384 260.385 511.416 257.015 512.788 cv
255.667 512.809 254.317 512.83 252.966 512.849 cv
252.964 512.849 252.961 512.849 252.959 512.849 cv
252.879 512.85 252.799 512.852 252.719 512.853 cv
252.718 512.853 252.716 512.853 252.714 512.853 cv
251.363 512.872 250.01 512.89 248.657 512.908 cv
247.779 512.918 246.9 512.929 246.02 512.939 cv
243.239 512.939 240.906 511.106 240.179 508.571 cv
240.027 508.039 239.945 507.475 239.945 506.891 cv
239.945 504.391 li
239.945 502.829 li
239.945 494.465 li
239.945 492.901 li
240.087 492.901 li
cp
.0704051 .0445258 .0503853 0 cmyk
ef
267.041 497.477 mo
262.648 497.522 li
262.649 497.526 262.649 497.531 262.649 497.535 cv
262.853 497.588 262.696 497.815 262.696 498.135 cv
262.696 499.04 li
262.696 499.36 262.853 499.675 262.649 499.753 cv
262.649 499.759 262.649 499.766 262.648 499.772 cv
267.141 499.816 li
275.285 499.771 li
275.653 499.768 275.951 499.466 275.951 499.099 cv
275.951 498.195 li
275.951 497.827 275.653 497.524 275.285 497.523 cv
267.141 497.476 li
267.041 497.477 li
cp
.619532 .538659 .52932 .256565 cmyk
ef
367.201 497.76 mo
364.845 498.448 365.364 499.043 367.419 499.592 cv
369.374 500.116 372.34 500.303 374.116 499.876 cv
376.124 499.396 376.137 497.904 374.124 497.417 cv
372.281 496.974 369.149 497.192 367.201 497.76 cv
cp
ef
656.548 150.442 mo
656.548 171.226 li
656.548 173.718 654.51 175.756 652.019 175.756 cv
650.953 175.756 li
648.461 175.756 646.423 173.718 646.423 171.226 cv
646.423 150.442 li
646.423 147.95 648.461 145.912 650.953 145.912 cv
652.019 145.912 li
654.51 145.912 656.548 147.95 656.548 150.442 cv
cp
ef
796.799 150.442 mo
796.799 171.226 li
796.799 173.718 798.837 175.756 801.328 175.756 cv
802.394 175.756 li
804.886 175.756 806.923 173.718 806.923 171.226 cv
806.923 150.442 li
806.923 147.95 804.886 145.912 802.394 145.912 cv
801.328 145.912 li
798.837 145.912 796.799 147.95 796.799 150.442 cv
cp
ef
726.321 146.673 mo
724.777 146.673 li
719.759 146.673 li
715.286 146.673 711.41 144.031 709.614 140.228 cv
702.165 140.228 li
699.547 140.228 li
698.917 140.228 698.405 139.716 698.405 139.086 cv
698.405 136.543 li
698.405 136.014 698.754 135.565 699.268 135.437 cv
701.225 134.944 li
701.225 134.761 li
701.225 134.612 701.254 134.483 701.32 134.349 cv
708.673 119.19 li
707.206 119.044 li
676.696 115.996 li
677.777 123.102 675.971 129.408 672.972 133.55 cv
672.569 134.108 671.975 134.41 671.285 134.41 cv
669.181 134.41 li
668.539 135.155 667.851 135.858 667.119 136.515 cv
663.093 140.13 657.77 142.329 651.933 142.329 cv
646.194 142.329 640.952 140.203 636.95 136.696 cv
633.561 133.725 631.062 129.762 629.906 125.262 cv
628.366 125.01 li
627.331 124.84 626.574 123.998 626.513 122.952 cv
626.269 118.732 626.83 114.815 628.022 111.133 cv
590.659 107.401 li
554.602 103.8 li
480.263 96.373 li
479.586 96.3057 478.7 96.1729 477.685 95.9927 cv
470.912 94.7935 458.351 91.5112 463.135 91.6914 cv
477.685 92.2358 li
517.135 93.7124 li
554.602 95.1162 li
590.659 96.4658 li
633.217 98.0591 li
643.533 98.4448 li
646.132 97.4116 648.966 96.8433 651.933 96.8433 cv
655.502 96.8433 658.88 97.6655 661.886 99.1323 cv
673.602 99.5718 li
707.206 100.829 li
712.302 101.021 li
712.617 99.9741 712.972 98.9458 713.365 97.9346 cv
647.014 86.1602 li
646.571 86.083 641.175 85.1299 638.275 83.9907 cv
633.784 82.2275 631.983 80.1401 638.321 81.1133 cv
705.981 91.5029 li
714.798 92.8574 li
714.615 91.188 714.566 89.6182 714.645 88.1558 cv
714.686 87.3818 714.764 86.6382 714.876 85.9253 cv
715.509 81.9502 717.249 78.9385 720.014 77.0698 cv
720.07 77.0322 720.21 76.9683 720.339 76.9087 cv
720.339 75.0415 li
720.339 74.5239 720.761 74.1001 721.279 74.1001 cv
721.563 74.1001 li
722.082 74.1001 722.504 74.5239 722.504 75.0415 cv
722.504 75.8188 li
722.84 75.6816 li
722.942 75.6465 723.044 75.6128 723.146 75.5806 cv
723.446 64.5161 723.249 49.0181 723.651 36.415 cv
723.65 36.397 723.651 36.3789 723.652 36.3608 cv
723.657 35.9883 723.669 35.6274 723.688 35.2788 cv
723.907 29.0249 724.287 23.561 724.966 19.8228 cv
725.368 17.6074 725.837 16.2568 726.321 15.7554 cv
726.321 15.6001 li
726.681 15.4287 726.827 15.583 727.026 15.7554 cv
727.509 16.2568 727.979 17.6074 728.38 19.8228 cv
729.059 23.561 729.439 29.0249 729.658 35.2788 cv
729.677 35.6274 729.689 35.9883 729.696 36.3608 cv
729.696 36.3789 729.697 36.397 729.696 36.415 cv
730.097 49.0181 729.901 64.5161 730.201 75.5806 cv
730.303 75.6128 730.405 75.6465 730.506 75.6816 cv
730.842 75.8188 li
730.842 75.0415 li
730.842 74.5239 731.265 74.1001 731.783 74.1001 cv
732.068 74.1001 li
732.585 74.1001 733.007 74.5239 733.007 75.0415 cv
733.007 76.9087 li
733.136 76.9683 733.277 77.0322 733.332 77.0698 cv
736.097 78.9385 737.837 81.9502 738.47 85.9253 cv
738.583 86.6382 738.661 87.3818 738.701 88.1558 cv
738.781 89.6182 738.731 91.188 738.549 92.8574 cv
747.366 91.5029 li
815.026 81.1133 li
821.364 80.1401 819.563 82.2275 815.072 83.9907 cv
812.171 85.1299 806.776 86.083 806.332 86.1602 cv
739.983 97.9346 li
740.374 98.9458 740.729 99.9741 741.044 101.021 cv
746.141 100.829 li
779.744 99.5718 li
791.461 99.1323 li
794.467 97.6655 797.844 96.8433 801.413 96.8433 cv
804.38 96.8433 807.214 97.4116 809.813 98.4448 cv
820.129 98.0591 li
862.687 96.4658 li
898.745 95.1162 li
936.211 93.7124 li
975.661 92.2358 li
990.211 91.6914 li
994.995 91.5112 982.435 94.7935 975.661 95.9927 cv
974.646 96.1729 973.76 96.3057 973.083 96.373 cv
898.745 103.8 li
862.687 107.401 li
825.324 111.133 li
826.516 114.815 827.077 118.732 826.833 122.952 cv
826.772 123.998 826.016 124.84 824.98 125.01 cv
823.442 125.262 li
822.284 129.762 819.785 133.725 816.397 136.696 cv
812.394 140.203 807.153 142.329 801.413 142.329 cv
795.577 142.329 790.254 140.13 786.227 136.515 cv
785.495 135.858 784.807 135.155 784.166 134.41 cv
782.062 134.41 li
781.371 134.41 780.778 134.108 780.374 133.55 cv
777.375 129.408 775.571 123.102 776.651 115.996 cv
746.141 119.044 li
744.673 119.19 li
752.028 134.349 li
752.092 134.483 752.121 134.612 752.121 134.761 cv
752.121 134.944 li
754.078 135.437 li
754.592 135.565 754.942 136.014 754.942 136.543 cv
754.942 139.086 li
754.942 139.716 754.43 140.228 753.8 140.228 cv
751.181 140.228 li
743.733 140.228 li
741.936 144.031 738.06 146.673 733.587 146.673 cv
726.321 146.673 li
cp
0 0 0 0 cmyk
ef
725.762 180.107 mo
724.14 179.839 722.896 178.422 722.896 176.728 cv
722.896 165.992 li
722.896 164.364 724.041 162.995 725.567 162.65 cv
727.026 162.566 li
728.912 162.566 730.451 164.105 730.451 165.992 cv
730.451 176.728 li
730.451 178.613 728.912 180.153 727.026 180.153 cv
725.762 180.107 li
cp
.619532 .538659 .52932 .256565 cmyk
ef
641.266 108.847 mo
639.058 111.352 637.718 114.641 637.718 118.244 cv
637.718 122.981 640.036 127.179 643.601 129.763 cv
645.942 131.458 648.821 132.458 651.933 132.458 cv
654.98 132.458 657.803 131.499 660.117 129.867 cv
663.766 127.293 666.149 123.046 666.149 118.244 cv
666.149 114.419 664.638 110.947 662.182 108.392 cv
659.595 105.702 655.959 104.027 651.933 104.027 cv
647.684 104.027 643.87 105.892 641.266 108.847 cv
cp
ef
791.325 108.391 mo
788.868 110.946 787.359 114.418 787.359 118.244 cv
787.359 123.047 789.741 127.294 793.39 129.867 cv
795.703 131.5 798.527 132.458 801.573 132.458 cv
804.685 132.458 807.564 131.458 809.905 129.762 cv
813.471 127.18 815.79 122.982 815.79 118.244 cv
815.79 114.642 814.45 111.353 812.242 108.847 cv
809.637 105.892 805.823 104.027 801.573 104.027 cv
797.547 104.027 793.912 105.701 791.325 108.391 cv
cp
ef
714.644 88.1558 mo
714.566 89.6182 714.615 91.188 714.798 92.8574 cv
715.644 92.9873 li
716.353 91.6636 717.127 90.3696 717.962 89.1035 cv
714.644 88.1558 li
cp
.0704051 .0445258 .0503853 0 cmyk
ef
722.504 75.8188 mo
722.504 84.7793 li
722.755 84.7344 723.015 84.7129 723.281 84.7129 cv
730.225 84.7129 li
730.491 84.7129 730.751 84.7344 731.003 84.7793 cv
731.003 75.0415 li
731.003 74.5239 731.426 74.1001 731.944 74.1001 cv
731.783 74.1001 li
731.265 74.1001 730.842 74.5239 730.842 75.0415 cv
730.842 75.7427 li
730.842 75.8188 li
730.506 75.6816 li
730.201 75.5806 li
730.2 75.5635 730.2 75.5469 730.199 75.5298 cv
727.815 74.8032 725.535 74.8203 723.146 75.5806 cv
722.84 75.6816 li
722.504 75.8188 li
cp
ef
736.57 86.5317 mo
738.477 85.9702 li
738.475 85.9551 738.472 85.9404 738.47 85.9253 cv
737.837 81.9502 736.097 78.9385 733.332 77.0698 cv
733.3 77.0479 733.24 77.0171 733.169 76.9839 cv
733.169 85.873 li
733.346 86.043 733.512 86.231 733.665 86.4365 cv
733.86 86.6963 734.051 86.9565 734.241 87.2183 cv
736.57 86.5317 li
cp
ef
735.544 89.1035 mo
736.379 90.3696 737.154 91.6636 737.864 92.9873 cv
738.708 92.8574 li
738.709 92.8496 738.709 92.8408 738.711 92.8325 cv
738.549 92.8574 li
738.729 91.2051 738.78 89.6504 738.704 88.2012 cv
735.544 89.1035 li
cp
ef
721.603 92.1138 mo
721.603 96.3711 li
731.905 96.3711 li
731.905 92.1138 li
731.905 91.7446 731.602 91.4419 731.232 91.4419 cv
722.275 91.4419 li
721.905 91.4419 721.603 91.7446 721.603 92.1138 cv
cp
ef
716.938 86.5317 mo
719.266 87.2183 li
719.454 86.9565 719.647 86.6958 719.841 86.4365 cv
719.995 86.231 720.161 86.0425 720.339 85.8721 cv
720.339 76.9087 li
720.21 76.9683 720.07 77.0322 720.014 77.0698 cv
717.249 78.9385 715.509 81.9502 714.876 85.9253 cv
716.938 86.5317 li
cp
ef
712.503 118.919 mo
712.357 120.089 713.236 120.871 714.413 120.871 cv
717.437 120.871 li
716.758 120.869 716.256 120.258 716.384 119.592 cv
716.705 117.927 717.354 116.512 718.231 115.35 cv
722.286 109.972 731.221 109.972 735.276 115.35 cv
736.153 116.512 736.801 117.927 737.123 119.592 cv
737.251 120.258 736.748 120.869 736.072 120.871 cv
739.072 120.871 li
740.249 120.871 741.15 120.089 741.005 118.919 cv
741.061 113 739.03 108.9 735.438 106.513 cv
734.764 106.065 734.035 105.678 733.255 105.35 cv
729.532 103.787 725.426 103.66 721.587 104.863 cv
720.29 105.27 719.114 105.819 718.069 106.513 cv
714.477 108.9 712.447 112.999 712.503 118.919 cv
cp
ef
730.652 132.853 mo
730.785 132.853 730.897 132.856 730.994 132.865 cv
730.652 132.853 li
cp
722.514 132.865 mo
722.611 132.856 722.722 132.853 722.855 132.853 cv
722.514 132.865 li
722.514 132.865 li
cp
731.774 138.381 mo
731.824 138.381 731.875 138.387 731.923 138.398 cv
731.774 138.381 li
731.774 138.381 li
cp
712.347 134.742 mo
712.347 133.81 li
712.347 133.345 712.727 132.965 713.192 132.965 cv
714.834 132.965 li
715.299 132.965 715.679 133.345 715.679 133.81 cv
715.679 134.742 li
715.679 136.431 li
715.679 136.894 715.299 137.274 714.834 137.274 cv
713.192 137.274 li
712.727 137.274 712.347 136.894 712.347 136.431 cv
712.347 134.742 li
712.347 134.742 li
cp
737.829 134.742 mo
737.829 133.81 li
737.829 133.345 738.209 132.965 738.674 132.965 cv
740.316 132.965 li
740.78 132.965 741.16 133.345 741.16 133.81 cv
741.16 134.742 li
741.16 136.431 li
741.16 136.894 740.78 137.274 740.316 137.274 cv
738.674 137.274 li
738.209 137.274 737.829 136.894 737.829 136.431 cv
737.829 134.742 li
737.829 134.742 li
cp
713.469 124.534 mo
715.514 128.359 718.183 131.263 721.741 133.239 cv
721.661 133.31 721.573 133.393 721.466 133.491 cv
721.051 133.875 720.701 134.28 720.158 134.824 cv
719.72 135.265 719.515 135.815 719.556 136.434 cv
719.633 137.579 720.638 138.132 721.583 138.398 cv
721.632 138.387 721.683 138.381 721.735 138.381 cv
721.583 138.398 li
721.285 138.468 721.063 138.735 721.063 139.053 cv
721.063 142.067 li
719.959 142.067 li
719.515 142.067 719.152 142.43 719.152 142.873 cv
719.152 144.547 li
719.152 144.992 719.515 145.353 719.959 145.353 cv
733.549 145.353 li
733.993 145.353 734.355 144.992 734.355 144.547 cv
734.355 142.873 li
734.355 142.43 733.993 142.067 733.549 142.067 cv
732.446 142.067 li
732.446 139.053 li
732.446 138.734 732.221 138.467 731.923 138.398 cv
732.87 138.132 733.875 137.579 733.952 136.434 cv
733.993 135.815 733.787 135.265 733.35 134.824 cv
732.807 134.28 732.456 133.875 732.041 133.491 cv
731.935 133.393 731.845 133.31 731.766 133.239 cv
735.323 131.263 737.994 128.359 740.037 124.534 cv
740.47 123.727 739.889 122.755 738.971 122.755 cv
735.944 122.755 li
717.564 122.755 li
714.535 122.755 li
713.619 122.755 713.037 123.727 713.469 124.534 cv
713.469 124.534 li
cp
.619532 .538659 .52932 .256565 cmyk
ef
.5 lw
1 lc
1 lj
2.6131 ml
[] 0 dsh
true sadj
161.806 143.148 mo
156.675 145.591 153.128 150.823 153.128 156.886 cv
153.128 165.285 159.938 172.095 168.338 172.095 cv
176.738 172.095 183.547 165.285 183.547 156.886 cv
183.547 151.098 180.315 146.067 175.556 143.496 cv
47.3777 176.433 mo
52.636 176.433 56.8992 172.171 56.8992 166.912 cv
56.8992 161.654 52.636 157.391 47.3777 157.391 cv
42.1189 157.391 37.8562 161.654 37.8562 166.912 cv
37.8562 172.171 42.1189 176.433 47.3777 176.433 cv
47.3777 176.433 li
cp
240.457 98.022 mo
240.457 99.8516 li
240.457 100.34 240.847 100.728 241.335 100.726 cv
243.597 100.713 li
244.077 100.711 244.466 100.319 244.466 99.8398 cv
244.466 98.1416 li
215.951 97.2974 mo
215.951 99.127 li
215.951 99.6152 216.342 100.003 216.83 100 cv
219.092 99.9883 li
219.571 99.9858 219.96 99.5942 219.96 99.1147 cv
219.96 97.4165 li
220.006 89.7808 mo
238.405 89.7808 li
276.073 84.4658 mo
276.073 83.1636 li
276.073 83.0518 276.163 82.9614 276.274 82.9614 cv
276.444 82.9614 li
276.552 82.9614 276.639 83.0454 276.646 83.1528 cv
276.711 84.332 li
263.61 87.083 mo
277.643 84.1367 li
277.93 84.0771 278.214 84.2588 278.278 84.5469 cv
278.372 84.9663 li
278.436 85.2534 278.255 85.5386 277.97 85.6064 cv
263.471 89.0239 li
240.589 90.0479 mo
249.203 89.9404 li
251.152 89.915 252.821 89.1567 254.121 87.7041 cv
259.708 81.4653 li
245.564 78.3291 mo
251.513 88.501 li
252.202 89.6787 252.51 90.855 252.487 92.2197 cv
252.413 96.3613 li
244.375 96.1235 mo
256.845 96.4927 li
257.612 96.5151 258.281 96.1675 258.703 95.5259 cv
259.294 94.6299 259.825 93.6938 260.268 92.7192 cv
264.091 84.333 259.225 77.8403 250.499 76.8076 cv
248.637 76.5874 246.978 77.0981 245.564 78.3291 cv
245.137 78.6997 li
240.249 82.9512 li
239.123 83.9297 238.763 85.3965 239.307 86.7856 cv
242.438 94.7598 li
242.76 95.5791 243.496 96.0967 244.375 96.1235 cv
244.375 96.1235 li
cp
243.815 77.1792 mo
243.815 74.2466 li
243.815 73.4697 244.45 72.8364 245.226 72.8364 cv
246.767 72.8364 li
247.545 72.8364 248.178 73.4697 248.178 74.2466 cv
248.178 74.8716 li
241.567 98.0552 mo
237.433 87.5225 li
236.576 85.3394 237.158 82.9683 238.927 81.4307 cv
244.241 76.8091 li
246.092 75.1997 248.299 74.5185 250.735 74.8081 cv
262.603 76.2114 268.259 86.8013 258.985 98.5703 cv
220.185 83.7515 mo
219.781 97.4111 li
264.739 98.7402 mo
264.666 105.665 li
263.669 126.801 mo
263.683 133.777 li
235.17 133.927 mo
264.815 134.459 294.237 132.784 323.502 129.526 cv
277.867 94.1533 mo
295.006 94.2485 311.073 95.2739 324.422 98.4019 cv
187.072 96.4434 mo
324.36 100.503 li
283.493 125.063 mo
289.887 125.063 li
291.021 125.063 291.948 124.135 291.948 123.002 cv
291.948 122.93 li
291.948 121.796 291.021 120.87 289.887 120.87 cv
283.493 120.87 li
282.359 120.87 281.432 121.796 281.432 122.93 cv
281.432 123.002 li
281.432 124.135 282.359 125.063 283.493 125.063 cv
283.493 125.063 li
cp
323.878 116.81 mo
280.299 116.81 li
280.299 105.829 mo
280.299 126.801 li
255.227 126.801 mo
323.587 126.801 li
228.764 105.288 mo
324.188 106.29 li
198.462 99.938 mo
230.176 104.82 253.546 109.701 245.792 114.583 cv
323.546 128.036 mo
381.695 119.053 li
324.26 103.885 mo
353.478 103.885 li
323.965 113.837 mo
382.023 113.837 li
365.42 20.6113 mo
366.284 20.6113 366.984 19.9116 366.984 19.0483 cv
366.984 18.1841 366.284 17.4844 365.42 17.4844 cv
364.556 17.4844 363.857 18.1841 363.857 19.0483 cv
363.857 19.9116 364.556 20.6113 365.42 20.6113 cv
365.42 20.6113 li
cp
333.587 90.6001 mo
334.569 90.6001 335.364 89.8062 335.364 88.8247 cv
335.364 87.8438 334.569 87.0483 333.587 87.0483 cv
332.606 87.0483 331.811 87.8438 331.811 88.8247 cv
331.811 89.8062 332.606 90.6001 333.587 90.6001 cv
333.587 90.6001 li
cp
352.061 29.0913 mo
337.567 91.7324 li
324.618 91.7324 mo
346.534 91.7324 li
333.08 80.1045 mo
362.632 80.9263 li
369.428 67.0644 mo
370.14 67.0644 li
370.705 67.0644 371.17 66.6011 371.17 66.0342 cv
371.17 62.375 li
371.17 61.8096 370.705 61.3447 370.14 61.3447 cv
369.428 61.3447 li
368.863 61.3447 368.398 61.8096 368.398 62.375 cv
368.398 66.0342 li
368.398 66.6011 368.863 67.0644 369.428 67.0644 cv
369.428 67.0644 li
cp
368.398 63.335 mo
364.49 63.335 li
368.398 65.3242 mo
364.385 65.3242 li
371.355 38.9443 mo
372.065 38.9443 li
372.632 38.9443 373.095 38.481 373.095 37.9141 cv
373.095 34.2549 li
373.095 33.688 372.632 33.2246 372.065 33.2246 cv
371.355 33.2246 li
370.788 33.2246 370.324 33.688 370.324 34.2549 cv
370.324 37.9141 li
370.324 38.481 370.788 38.9443 371.355 38.9443 cv
371.355 38.9443 li
cp
370.324 35.2139 mo
366.415 35.2139 li
370.324 37.2041 mo
366.311 37.2041 li
367.259 14.8701 mo
367.259 12.8188 li
367.259 12.5225 367.017 12.2812 366.721 12.2812 cv
362.691 12.2812 li
362.395 12.2812 362.154 12.5225 362.154 12.8188 cv
362.154 13.1997 li
362.154 13.4961 362.395 13.7373 362.691 13.7373 cv
363.569 13.7373 li
363.865 13.7373 364.107 13.979 364.107 14.2754 cv
364.107 15.3691 li
373.652 15.0615 mo
369.148 18.2437 366.911 22.478 366.716 27.8091 cv
366.045 46.186 364.676 64.7026 362.323 83.4155 cv
347.728 29.0913 mo
366.668 29.0913 li
400.748 88.4346 mo
392.646 88.4346 li
379.803 82.6299 mo
399.462 82.6299 li
374.978 77.2217 mo
398.246 77.2217 li
375.062 70.2617 mo
396.712 70.2617 li
395.406 64.5102 mo
401.802 93.1533 li
396.956 93.1533 mo
408.3 93.1533 li
402.339 64.5102 mo
375.135 64.5102 li
375.221 57.0391 mo
400.817 57.0391 li
375.3 50.5078 mo
399.433 50.5078 li
375.376 44.1094 mo
398.066 44.1094 li
375.46 37.1479 mo
396.648 37.1479 li
375.553 29.478 mo
394.048 29.478 li
375.619 23.9292 mo
390.175 23.9292 li
374.921 81.9673 mo
375.721 15.4502 li
401.007 102.064 mo
410.803 102.745 li
393.566 106.639 mo
411.236 106.639 li
382.364 107.834 mo
392.082 107.834 li
392.917 107.834 393.578 107.156 393.558 106.32 cv
393.517 104.577 li
382.549 104.734 mo
381.802 120.064 li
324.772 86.5464 mo
323.384 133.526 li
373.219 95.3452 mo
398.201 95.3452 li
378.26 93.1533 mo
396.956 93.1533 li
377.602 90.6958 mo
394.834 90.6958 li
377.039 88.5952 mo
392.646 88.5952 li
373.211 86.6353 mo
373.223 98.7402 li
364.046 85.7725 mo
353.793 96.6187 li
359.619 84.5923 mo
364.742 86.7285 376.323 87.0005 389.98 86.6714 cv
382.524 99.2739 mo
382.549 104.734 li
351.269 96.1567 mo
351.225 103.569 li
340.765 97.0859 mo
344.125 96.4448 347.014 95.0376 349.493 92.9448 cv
351.513 91.0649 mo
348.038 91.1499 336.317 93.4907 336.427 98.4443 cv
336.597 106.041 387.812 104.84 399.759 104.389 cv
400.704 104.353 401.368 103.462 401.135 102.546 cv
396.169 83.061 376.264 79.9556 364.437 82.7861 cv
359.113 84.061 353.79 87.6699 348.467 94.1611 cv
348.021 94.7026 348.301 95.5195 348.985 95.6748 cv
361.061 98.4204 379.885 99.375 400.335 99.8984 cv
150.908 66.2148 mo
347.728 29.0913 li
262.101 93.5557 mo
283.623 95.6284 303.523 92.3462 324.772 86.5464 cv
329.566 85.2388 333.039 81.7603 334.339 76.9644 cv
346.008 33.9258 li
353.865 4.94678 391.315 11.4673 396.4 35.9321 cv
408.279 93.0884 li
408.284 93.1147 408.291 93.1362 408.3 93.1611 cv
410.351 98.8428 411.527 104.743 411.314 110.991 cv
148.95 82.8608 mo
149.64 66.1963 li
149.67 65.4888 150.904 65.5019 150.908 66.2148 cv
150.976 82.8857 li
168.03 90.1235 mo
168.883 83.1104 li
148.068 86.9941 mo
148.068 82.8501 li
136.162 132.473 mo
137.026 132.473 137.725 131.773 137.725 130.909 cv
137.725 130.046 137.026 129.346 136.162 129.346 cv
135.298 129.346 134.598 130.046 134.598 130.909 cv
134.598 131.773 135.298 132.473 136.162 132.473 cv
136.162 132.473 li
cp
129.952 133.284 mo
139.017 133.284 li
130.222 128.808 mo
139.044 128.808 li
144.826 112.126 mo
144.771 117.474 li
139.153 111.583 mo
150.499 112.67 li
153.202 112.929 153.139 116.942 150.429 117.115 cv
139.114 117.834 li
151.284 135.924 mo
174.417 137.457 197.552 137.335 220.685 135.456 cv
139.028 131.479 mo
152.045 132.182 li
130.677 121.24 mo
139.093 121.167 li
139.196 104.697 mo
138.989 137.639 li
154.659 119.316 mo
183.921 119.695 li
156.03 112.571 mo
184.009 112.933 li
184.042 110.298 mo
221.314 111.268 li
184.07 108.161 mo
183.795 129.443 li
152.683 129.041 mo
220.828 129.921 li
157.064 107.481 mo
150.774 138.433 li
221.002 123.232 mo
245.534 123.909 li
245.792 114.583 mo
245.342 130.899 li
221.464 105.489 mo
220.65 136.797 li
104.542 126.643 mo
110.837 129.375 119.632 130.63 130.096 130.899 cv
105.007 117.123 mo
112.437 118.306 121.077 119.084 130.781 119.509 cv
105.646 104.088 mo
109.573 101.548 116.408 100.778 131.826 102.122 cv
131.826 102.122 mo
129.736 136.896 li
50.0222 137.937 mo
118.288 140.219 li
118.288 135.847 mo
118.288 141.973 li
54.4724 131.475 mo
106.969 132.398 li
50.7185 124.301 mo
104.599 125.466 li
51.1106 116.624 mo
96.7527 117.771 li
51.6467 106.128 mo
105.505 106.128 li
74.3367 88.064 mo
71.5071 89.9629 68.9055 92.3022 65.6765 94.002 cv
65.0388 94.3379 64.9983 95.2324 65.6038 95.624 cv
68.177 97.2891 71.2341 98.1509 74.8997 97.998 cv
75.4041 97.9771 75.801 97.5615 75.801 97.0581 cv
75.801 88.8447 li
75.801 88.0908 74.9626 87.6431 74.3367 88.064 cv
74.3367 88.064 li
cp
78.0754 83.9878 mo
78.0754 85.9316 li
78.0754 86.8691 78.843 87.6367 79.78 87.6367 cv
89.3015 87.6367 li
90.24 87.6367 91.0076 86.8691 91.0076 85.9316 cv
91.0076 82.1372 li
92.926 82.1611 mo
92.926 85.9316 li
92.926 86.8691 93.6936 87.6367 94.6311 87.6367 cv
104.152 87.6367 li
105.091 87.6367 105.858 86.8691 105.858 85.9316 cv
105.857 82.3218 li
79.78 98.5093 mo
89.3015 98.5093 li
90.24 98.5093 91.0076 97.7422 91.0076 96.8032 cv
91.0076 90.6929 li
91.0076 89.7544 90.24 88.9868 89.3015 88.9868 cv
79.78 88.9868 li
78.843 88.9868 78.0754 89.7544 78.0754 90.6929 cv
78.0754 96.8032 li
78.0754 97.7422 78.843 98.5093 79.78 98.5093 cv
79.78 98.5093 li
cp
94.6311 98.5093 mo
104.152 98.5093 li
105.091 98.5093 105.858 97.7422 105.858 96.8032 cv
105.858 90.6929 li
105.858 89.7544 105.091 88.9868 104.152 88.9868 cv
94.6311 88.9868 li
93.6936 88.9868 92.926 89.7544 92.926 90.6929 cv
92.926 96.8032 li
92.926 97.7422 93.6936 98.5093 94.6311 98.5093 cv
94.6311 98.5093 li
cp
61.6472 94.2739 mo
62.24 98.2637 67.8679 99.9209 76.2312 100.311 cv
108.214 96.6797 mo
108.214 82.3535 li
51.9587 100.003 mo
105.812 100.687 li
97.1604 110.715 mo
90.9011 110.345 li
87.1292 110.123 86.6301 116.765 90.4885 116.998 cv
96.7566 117.379 li
102.277 117.905 mo
104.963 118.037 li
102.693 111.046 mo
105.299 111.173 li
97.2278 109.945 mo
96.7527 117.771 li
96.6995 118.661 97.3831 119.435 98.2742 119.488 cv
100.547 119.625 li
101.438 119.68 102.211 118.995 102.264 118.105 cv
102.74 110.28 li
102.794 109.389 102.109 108.616 101.218 108.562 cv
98.9446 108.424 li
98.0549 108.369 97.2825 109.054 97.2278 109.945 cv
97.2278 109.945 li
cp
129.479 93.0815 mo
121.808 92.6143 114.745 93.8237 108.852 96.3545 cv
107.057 97.126 105.907 98.7354 105.812 100.687 cv
104.488 127.758 li
104.392 129.697 105.294 131.417 106.969 132.398 cv
112.744 135.782 119.34 135.978 125.999 136.57 cv
178.677 141.258 225.882 141.509 255.973 126.433 cv
258.134 125.35 258.385 122.383 256.437 120.952 cv
244.279 112.022 223.793 104.65 192.436 98.7603 cv
44.5022 96.2788 mo
43.6497 107.793 li
10.8225 106.538 mo
18.9622 103.336 33.0208 101.027 44.2161 100.145 cv
17.5012 131.408 mo
27.3069 131.408 li
28.2449 131.408 29.0125 130.641 29.0125 129.703 cv
29.0125 128.921 li
29.0125 127.984 28.2449 127.216 27.3069 127.216 cv
17.5012 127.216 li
16.5632 127.216 15.7961 127.984 15.7961 128.921 cv
15.7961 129.703 li
15.7961 130.641 16.5632 131.408 17.5012 131.408 cv
17.5012 131.408 li
cp
20.0051 101.332 mo
20.0051 117.751 li
20.0051 120.303 17.9236 122.385 15.3718 122.385 cv
4.45386 122.385 li
10.8225 127.715 mo
10.8225 104.969 li
.436768 115.54 mo
30.7654 115.54 li
51.5613 107.793 mo
10.6804 107.793 li
30.7654 98.5269 mo
30.7654 136.833 li
50.28 132.895 mo
49.9114 140.111 li
52.1926 95.4292 mo
50.6311 126.008 li
349.128 128.168 mo
359.171 126.858 372.968 126.008 382.445 123.437 cv
392.01 120.84 404.88 114.066 414.261 109.937 cv
51.5623 132.869 mo
42.074 133.127 35.781 131.874 33.0481 129.092 cv
31.9207 127.945 32.7327 126.008 34.3416 126.008 cv
53.3323 126.008 li
56.7922 126.008 56.0657 132.747 51.5623 132.869 cv
51.5623 132.869 li
cp
44.5022 96.2788 mo
44.8049 91.2881 li
44.8459 90.6079 46.0422 90.5986 46.1042 91.272 cv
46.5422 96.0303 li
236.888 83.96 mo
86.2117 82.0762 li
74.4368 81.9287 67.7483 94.1997 58.8279 94.8647 cv
20.6243 97.7139 4.5315 105.334 .436768 115.54 cv
.115479 116.341 .211182 117.18 .704835 117.888 cv
12.7415 135.138 36.5955 140.535 66.6013 140.974 cv
140.296 142.052 159.132 143.615 226.05 144.372 cv
280.741 144.989 370.585 125.848 414.261 109.937 cv
420.258 107.754 412.379 101.201 410.159 99.4229 cv
139.968 90.3135 mo
142.241 95.311 li
146.504 95.3984 mo
149.286 99.3696 li
165.767 99.3926 mo
173.789 108.312 li
153.115 89.8408 mo
168.247 108.187 li
145.228 90.2524 mo
159.495 107.689 li
134.557 90.1621 mo
135.015 94.311 135.49 97.7832 135.976 100.829 cv
129.612 92.7441 mo
135.045 95.8594 148.208 96.1182 166.383 94.1172 cv
128.886 96.2192 mo
138.475 99.4932 157.747 100.457 174.299 98.7588 cv
129.256 98.5786 mo
143.854 104.583 167.087 105.597 198.739 101.748 cv
131.267 89.9468 mo
140.734 90.7158 151.33 90.2417 162.693 88.9272 cv
153.755 87.5093 mo
167.094 93.9688 178.064 100.902 188.556 107.93 cv
138.085 86.8149 mo
163.585 86.0991 185.209 94.4414 204.928 104.93 cv
205.434 105.199 205.316 105.958 204.752 106.059 cv
183.719 109.855 151.346 108.827 134.281 103.332 cv
124.89 100.309 128.792 87.0747 138.085 86.8149 cv
138.085 86.8149 li
cp
0 0 0 1 cmyk
@
185.055 643.186 mo
196.68 643.186 li
183.491 652.993 mo
194.296 652.993 li
179.513 670.331 mo
186.249 670.331 li
177.949 679.496 mo
184.056 679.496 li
176.6 685.109 mo
182.683 685.109 li
167.718 732.502 mo
175.407 732.502 li
168.854 724.12 mo
177.403 724.12 li
170.773 715.237 mo
179.534 715.237 li
172.051 705.858 mo
181.75 705.858 li
174.04 697.543 mo
183.722 697.543 li
165.011 741.762 mo
173.17 741.762 li
164.093 749.984 mo
169.908 749.984 li
181.972 688.233 mo
179.192 688.233 li
178.933 688.233 178.721 688.021 178.721 687.762 cv
178.721 686.885 li
178.721 686.626 178.933 686.415 179.192 686.415 cv
182.354 686.415 li
188.385 661.46 mo
181.564 689.934 li
181.777 661.545 mo
192.79 661.404 li
199.197 553.135 mo
202.902 530.667 li
203.04 529.831 203.736 529.226 204.583 529.206 cv
225.198 528.702 li
218.791 556.749 mo
226.908 521.208 li
221.976 585.381 mo
221.976 559.208 li
247.982 578.214 mo
247.982 568.285 li
162.233 589.967 mo
208.264 590.339 li
209.158 590.347 209.928 590.122 210.677 589.633 cv
218.39 584.616 244.781 581.334 257.799 574.056 cv
258.391 573.724 258.394 572.868 257.803 572.533 cv
245.106 565.342 223.934 562.928 218.791 556.749 cv
218.085 555.899 217.202 555.397 216.111 555.226 cv
198.789 552.52 182.004 551.601 165.739 552.42 cv
178.987 632.548 mo
194.591 517.802 li
172.595 689.812 mo
185.684 689.99 li
172.418 656.572 mo
178.618 656.572 li
172.322 657.283 mo
178.499 657.283 li
164.865 656.039 mo
171.615 656.039 li
172.066 656.039 172.433 656.408 172.433 656.856 cv
172.433 656.998 li
172.433 657.449 172.066 657.816 171.615 657.816 cv
164.865 657.816 li
164.417 657.816 164.048 657.449 164.048 656.998 cv
164.048 656.856 li
164.048 656.408 164.417 656.039 164.865 656.039 cv
164.865 656.039 li
cp
145.522 559.613 mo
161.844 559.836 li
145.332 566.355 mo
146.703 517.373 li
149.554 553.435 mo
150.495 553.435 151.259 554.199 151.259 555.141 cv
151.259 556.082 150.495 556.846 149.554 556.846 cv
148.611 556.846 147.848 556.082 147.848 555.141 cv
147.848 554.199 148.611 553.435 149.554 553.435 cv
149.554 553.435 li
cp
150.255 543.452 mo
151.198 543.452 151.961 544.215 151.961 545.158 cv
151.961 546.099 151.198 546.863 150.255 546.863 cv
149.315 546.863 148.55 546.099 148.55 545.158 cv
148.55 544.215 149.315 543.452 150.255 543.452 cv
150.255 543.452 li
cp
149.198 624.846 mo
150.141 624.846 150.903 625.609 150.903 626.552 cv
150.903 627.494 150.141 628.257 149.198 628.257 cv
148.256 628.257 147.493 627.494 147.493 626.552 cv
147.493 625.609 148.256 624.846 149.198 624.846 cv
149.198 624.846 li
cp
143.8 582.707 mo
160.176 582.781 li
138.547 755.771 mo
143.908 579.145 li
163.129 580.849 mo
169.988 582.382 177.455 584.861 185.508 588.252 cv
139.499 579.725 mo
145.579 578.594 152.425 578.772 160.171 580.238 cv
139.5 564.199 mo
140.981 565.058 142.545 565.702 144.234 566.117 cv
154.711 568.684 168.291 563.862 189.577 554.682 cv
129.64 554.535 mo
131.834 557.467 133.967 559.933 136.226 561.86 cv
129.612 552.155 mo
162.434 552.155 li
139.499 569.873 mo
139.499 563.704 li
139.499 562.706 138.685 561.891 137.685 561.891 cv
131.895 561.891 li
132.008 583.938 mo
137.685 583.938 li
138.685 583.938 139.499 583.123 139.499 582.124 cv
139.499 576.035 li
132.469 576.206 mo
134.744 576.191 159.512 575.715 159.778 573.721 cv
160.171 570.76 134.31 569.538 132.381 569.458 cv
131.555 705.323 mo
169.693 705.323 li
152.388 590.527 mo
130.103 590.527 li
158.628 599.054 mo
152.388 599.054 li
151.981 599.054 151.649 598.723 151.649 598.315 cv
151.649 591.266 li
151.649 590.859 151.981 590.527 152.388 590.527 cv
153.042 590.527 li
153.449 590.527 153.781 590.195 153.781 589.787 cv
153.781 582.71 li
158.279 632.302 mo
174.728 632.302 li
177.665 632.302 180.169 632.601 183.024 633.289 cv
198.464 637.014 li
130.631 632.592 mo
155.887 632.592 li
169.056 516.919 mo
154.828 669.235 li
131.088 668.475 mo
176.212 669.918 li
165.361 516.923 mo
145.764 755.959 li
160.492 756.346 mo
162.766 743.847 li
162.801 743.657 162.959 743.521 163.151 743.515 cv
164.435 743.476 li
164.635 743.471 164.796 743.325 164.823 743.128 cv
165.011 741.762 li
165.046 741.511 164.847 741.293 164.594 741.304 cv
163.723 741.34 li
163.463 741.352 163.261 741.121 163.309 740.865 cv
172.595 689.812 li
172.654 689.488 172.933 689.257 173.262 689.259 cv
174.46 689.27 li
174.801 689.274 175.086 689.026 175.132 688.687 cv
175.352 687.036 li
175.405 686.636 175.102 686.284 174.698 686.275 cv
174.032 686.261 li
173.615 686.252 173.31 685.877 173.384 685.469 cv
190.588 590.883 li
142.799 517.551 mo
142.799 513.669 li
132.323 755.608 mo
165.403 756.475 li
149.02 767.601 mo
149.02 765.283 li
149.02 764.543 149.623 763.939 150.364 763.939 cv
157.034 763.939 li
96.0159 575.28 mo
90.6077 575.28 li
89.7209 575.28 88.9958 574.556 88.9958 573.668 cv
88.9958 572.608 li
88.9958 571.719 89.7209 570.996 90.6077 570.996 cv
96.0037 570.996 li
99.2659 577.907 mo
96.8401 576.194 li
96.2708 575.791 95.9597 575.191 95.9597 574.493 cv
95.9597 571.111 li
95.9597 570.263 96.4353 569.539 97.2122 569.201 cv
99.6111 568.16 li
104.201 569.497 mo
105.814 569.497 li
104.185 576.996 mo
105.825 576.996 li
100.187 568.04 mo
102.746 568.04 li
103.547 568.04 104.201 568.695 104.201 569.497 cv
104.201 576.779 li
104.201 577.581 103.547 578.236 102.746 578.236 cv
100.187 578.236 li
99.387 578.236 98.7307 577.581 98.7307 576.779 cv
98.7307 569.497 li
98.7307 568.695 99.387 568.04 100.187 568.04 cv
100.187 568.04 li
cp
107.479 585.124 mo
107.479 560.043 li
106.338 560.411 mo
111.461 557.969 118.862 556.914 129.67 556.747 cv
106.187 584.556 mo
111.311 586.997 119.264 588.308 130.072 588.475 cv
129.585 550.175 mo
120.407 550.175 106.897 549.229 106.108 562.386 cv
105.668 569.704 105.674 576.213 106.094 583.484 cv
106.867 596.845 120.845 594.935 130.151 594.935 cv
80.0203 508.815 mo
90.7249 508.815 li
91.22 508.815 91.6248 509.22 91.6248 509.716 cv
91.6248 511.466 li
91.6248 511.962 91.22 512.369 90.7249 512.369 cv
80.0203 512.369 li
79.5247 512.369 79.1189 511.962 79.1189 511.466 cv
79.1189 509.716 li
79.1189 509.22 79.5247 508.815 80.0203 508.815 cv
80.0203 508.815 li
cp
93.699 508.815 mo
103.513 508.815 li
104.01 508.815 104.415 509.22 104.415 509.716 cv
104.415 511.466 li
104.415 511.962 104.01 512.369 103.513 512.369 cv
93.699 512.369 li
93.2024 512.369 92.7986 511.962 92.7986 511.466 cv
92.7986 509.716 li
92.7986 509.22 93.2024 508.815 93.699 508.815 cv
93.699 508.815 li
cp
80.3264 503.148 mo
90.4167 503.148 li
91.0818 503.148 91.6248 503.692 91.6248 504.357 cv
91.6248 506.702 li
91.6248 507.366 91.0818 507.91 90.4167 507.91 cv
80.3264 507.91 li
79.6628 507.91 79.1189 507.366 79.1189 506.702 cv
79.1189 504.357 li
79.1189 503.692 79.6628 503.148 80.3264 503.148 cv
80.3264 503.148 li
cp
94.0056 503.148 mo
103.208 503.148 li
103.872 503.148 104.415 503.692 104.415 504.357 cv
104.415 506.702 li
104.415 507.366 103.872 507.91 103.208 507.91 cv
94.0056 507.91 li
93.3401 507.91 92.7986 507.366 92.7986 506.702 cv
92.7986 504.357 li
92.7986 503.692 93.3401 503.148 94.0056 503.148 cv
94.0056 503.148 li
cp
70.7654 506.488 mo
75.032 506.488 li
76.0315 506.488 76.8459 507.303 76.8459 508.301 cv
76.8459 513.347 li
105.579 508.393 mo
146.752 508.393 li
106.78 513.145 mo
145.476 513.32 li
17.9812 499.311 mo
29.6516 499.311 li
9.34595 503.24 mo
30.4954 510.212 50.9314 512.788 73.5969 512.938 cv
223.311 521.219 mo
223.311 516.144 li
184.748 517.258 mo
184.748 512.566 li
129.178 518.136 mo
129.67 556.747 li
129.703 559.398 132.275 560.981 132.308 563.63 cv
132.538 581.778 li
132.573 584.554 130.036 585.699 130.072 588.475 cv
132.158 752.781 li
132.514 780.745 167.152 767.162 173.49 740.542 cv
209.276 590.237 li
233.313 517.523 mo
228.748 520.385 li
227.249 521.324 225.648 521.634 223.907 521.324 cv
196.049 516.355 164.01 515.976 130.642 518.269 cv
129.128 518.373 128.344 517.824 127.12 517.133 cv
240.18 508.571 mo
219.292 508.571 li
219.292 502.829 mo
239.945 502.829 li
264.935 506.669 mo
281.864 506.669 li
248.657 512.908 mo
244.483 511.214 242.363 507.672 241.979 504.391 cv
239.945 504.391 mo
266.102 504.391 li
257.015 512.788 mo
262.787 510.439 266.777 506.151 267.141 499.816 cv
268.086 512.587 mo
268.086 517.614 li
219.292 513.115 mo
255.669 513.059 291.404 512.269 326.456 510.698 cv
326.456 507.502 mo
326.456 515.301 li
328.479 502.669 mo
342.516 502.767 li
385.964 515.741 mo
385.964 501.907 li
379.107 532.761 mo
379.637 532.761 380.067 533.191 380.067 533.721 cv
380.067 534.25 379.637 534.679 379.107 534.679 cv
378.577 534.679 378.147 534.25 378.147 533.721 cv
378.147 533.191 378.577 532.761 379.107 532.761 cv
379.107 532.761 li
cp
379.107 538.517 mo
379.637 538.517 380.067 538.946 380.067 539.475 cv
380.067 540.006 379.637 540.435 379.107 540.435 cv
378.577 540.435 378.147 540.006 378.147 539.475 cv
378.147 538.946 378.577 538.517 379.107 538.517 cv
379.107 538.517 li
cp
375.147 537.552 mo
382.44 537.552 li
375.147 535.883 mo
382.491 535.883 li
366.476 578.442 mo
354.967 518.436 li
379.624 578.442 mo
381.191 578.442 li
363.173 578.442 mo
377.42 578.442 li
378.45 575.678 mo
378.594 575.678 li
379.159 575.678 379.624 576.142 379.624 576.708 cv
379.624 581.79 li
379.624 582.356 379.159 582.821 378.594 582.821 cv
378.45 582.821 li
377.885 582.821 377.42 582.356 377.42 581.79 cv
377.42 576.708 li
377.42 576.142 377.885 575.678 378.45 575.678 cv
378.45 575.678 li
cp
379.621 591.428 mo
375.994 588.54 375.147 580.975 375.147 576.531 cv
375.147 518.436 li
352.551 518.436 mo
352.084 503.043 li
343.717 513.838 mo
336.985 508.483 341.632 504.877 354.608 502.553 cv
336.437 500.433 mo
338.415 501.049 352.076 500.635 359.896 500.737 cv
347.163 518.436 mo
383.027 518.436 li
382.255 544.235 mo
399.633 544.235 li
382.035 551.267 mo
398.175 551.267 li
381.806 558.585 mo
396.587 558.585 li
381.575 565.977 mo
394.683 565.977 li
381.363 572.727 mo
392.62 572.727 li
381.164 579.124 mo
390.469 579.124 li
395.753 522.992 mo
382.932 522.992 li
382.688 530.381 mo
395.753 530.381 li
395.753 537.198 mo
395.753 515.741 li
382.476 537.198 mo
400.878 537.198 li
380.792 591.049 mo
383.078 517.887 li
383.115 516.693 384.098 515.741 385.293 515.741 cv
403.733 515.741 li
343.556 508.689 mo
344.428 509.804 345.151 510.865 345.57 512.445 cv
362.361 575.618 li
363.363 579.389 364.488 582.519 365.8 584.988 cv
371.432 595.593 385.179 593.434 389.535 581.79 cv
397.973 559.242 402.325 533.426 404.657 505.994 cv
404.829 503.969 405.74 502.948 406.986 501.895 cv
185.055 354.106 mo
196.68 354.106 li
183.491 344.301 mo
194.296 344.301 li
179.513 326.963 mo
186.249 326.963 li
177.949 317.797 mo
184.056 317.797 li
176.6 312.183 mo
182.683 312.183 li
167.718 264.79 mo
175.407 264.79 li
168.854 273.174 mo
177.403 273.174 li
170.773 282.057 mo
179.534 282.057 li
172.051 291.436 mo
181.75 291.436 li
174.04 299.749 mo
183.722 299.749 li
165.011 255.531 mo
173.17 255.531 li
164.093 247.31 mo
169.908 247.31 li
181.972 309.06 mo
179.192 309.06 li
178.933 309.06 178.721 309.272 178.721 309.53 cv
178.721 310.407 li
178.721 310.667 178.933 310.878 179.192 310.878 cv
182.354 310.878 li
188.385 335.832 mo
181.564 307.358 li
181.777 335.748 mo
192.79 335.89 li
199.197 444.157 mo
202.902 466.626 li
203.04 467.461 203.736 468.067 204.583 468.088 cv
225.198 468.591 li
218.791 440.544 mo
226.908 476.085 li
221.976 411.912 mo
221.976 438.085 li
247.982 419.079 mo
247.982 429.007 li
162.233 407.326 mo
208.264 406.953 li
209.158 406.946 209.928 407.171 210.677 407.661 cv
218.39 412.676 244.781 415.958 257.799 423.238 cv
258.391 423.569 258.394 424.424 257.803 424.759 cv
245.106 431.95 223.934 434.364 218.791 440.544 cv
218.085 441.393 217.202 441.896 216.111 442.066 cv
198.789 444.773 182.004 445.692 165.739 444.873 cv
178.987 364.746 mo
194.591 479.491 li
172.595 307.48 mo
185.684 307.302 li
172.418 340.721 mo
178.618 340.721 li
172.322 340.01 mo
178.499 340.01 li
164.865 341.254 mo
171.615 341.254 li
172.066 341.254 172.433 340.886 172.433 340.437 cv
172.433 340.294 li
172.433 339.845 172.066 339.477 171.615 339.477 cv
164.865 339.477 li
164.417 339.477 164.048 339.845 164.048 340.294 cv
164.048 340.437 li
164.048 340.886 164.417 341.254 164.865 341.254 cv
164.865 341.254 li
cp
145.522 437.679 mo
161.844 437.457 li
145.332 430.938 mo
146.703 479.918 li
149.554 443.857 mo
150.495 443.857 151.259 443.095 151.259 442.152 cv
151.259 441.21 150.495 440.448 149.554 440.448 cv
148.611 440.448 147.848 441.21 147.848 442.152 cv
147.848 443.095 148.611 443.857 149.554 443.857 cv
149.554 443.857 li
cp
150.255 453.841 mo
151.198 453.841 151.961 453.077 151.961 452.135 cv
151.961 451.194 151.198 450.429 150.255 450.429 cv
149.315 450.429 148.55 451.194 148.55 452.135 cv
148.55 453.077 149.315 453.841 150.255 453.841 cv
150.255 453.841 li
cp
149.198 372.446 mo
150.141 372.446 150.903 371.684 150.903 370.741 cv
150.903 369.8 150.141 369.037 149.198 369.037 cv
148.256 369.037 147.493 369.8 147.493 370.741 cv
147.493 371.684 148.256 372.446 149.198 372.446 cv
149.198 372.446 li
cp
143.8 414.585 mo
160.176 414.511 li
138.547 241.522 mo
143.908 418.147 li
163.129 416.445 mo
169.988 414.91 177.455 412.431 185.508 409.041 cv
139.499 417.568 mo
145.579 418.698 152.425 418.521 160.171 417.054 cv
139.5 433.094 mo
140.981 432.236 142.545 431.591 144.234 431.177 cv
154.711 428.61 168.291 433.432 189.577 442.612 cv
129.64 442.757 mo
131.834 439.826 133.967 437.359 136.226 435.434 cv
129.612 445.138 mo
162.434 445.138 li
139.499 427.419 mo
139.499 433.588 li
139.499 434.586 138.685 435.402 137.685 435.402 cv
131.895 435.402 li
132.008 413.354 mo
137.685 413.354 li
138.685 413.354 139.499 414.169 139.499 415.167 cv
139.499 421.259 li
132.469 421.085 mo
134.744 421.101 159.512 421.578 159.778 423.572 cv
160.171 426.533 134.31 427.754 132.381 427.834 cv
131.555 291.971 mo
169.693 291.971 li
152.388 406.765 mo
130.103 406.765 li
158.628 398.239 mo
152.388 398.239 li
151.981 398.239 151.649 398.571 151.649 398.977 cv
151.649 406.027 li
151.649 406.433 151.981 406.765 152.388 406.765 cv
153.042 406.765 li
153.449 406.765 153.781 407.097 153.781 407.505 cv
153.781 414.582 li
158.279 364.99 mo
174.728 364.99 li
177.665 364.99 180.169 364.692 183.024 364.003 cv
198.464 360.279 li
130.631 364.7 mo
155.887 364.7 li
169.056 480.374 mo
154.828 328.059 li
131.088 328.817 mo
176.212 327.375 li
165.361 480.37 mo
145.764 241.333 li
160.492 240.947 mo
162.766 253.447 li
162.801 253.635 162.959 253.772 163.151 253.779 cv
164.435 253.816 li
164.635 253.822 164.796 253.967 164.823 254.165 cv
165.011 255.531 li
165.046 255.782 164.847 256 164.594 255.989 cv
163.723 255.954 li
163.463 255.941 163.261 256.171 163.309 256.429 cv
172.595 307.48 li
172.654 307.806 172.933 308.035 173.262 308.033 cv
174.46 308.022 li
174.801 308.019 175.086 308.268 175.132 308.606 cv
175.352 310.258 li
175.405 310.656 175.102 311.009 174.698 311.017 cv
174.032 311.032 li
173.615 311.041 173.31 311.415 173.384 311.825 cv
190.588 406.41 li
142.799 479.741 mo
142.799 483.624 li
132.323 241.686 mo
165.403 240.819 li
149.02 229.692 mo
149.02 232.009 li
149.02 232.75 149.623 233.353 150.364 233.353 cv
157.034 233.353 li
96.0159 422.012 mo
90.6077 422.012 li
89.7209 422.012 88.9958 422.736 88.9958 423.624 cv
88.9958 424.686 li
88.9958 425.574 89.7209 426.297 90.6077 426.297 cv
96.0037 426.297 li
99.2659 419.387 mo
96.8401 421.1 li
96.2708 421.5 95.9597 422.102 95.9597 422.799 cv
95.9597 426.182 li
95.9597 427.03 96.4353 427.754 97.2122 428.091 cv
99.6111 429.132 li
104.201 427.796 mo
105.814 427.796 li
104.185 420.297 mo
105.825 420.297 li
100.187 429.253 mo
102.746 429.253 li
103.547 429.253 104.201 428.597 104.201 427.796 cv
104.201 420.513 li
104.201 419.712 103.547 419.056 102.746 419.056 cv
100.187 419.056 li
99.387 419.056 98.7307 419.712 98.7307 420.513 cv
98.7307 427.796 li
98.7307 428.597 99.387 429.253 100.187 429.253 cv
100.187 429.253 li
cp
107.479 412.169 mo
107.479 437.249 li
106.338 436.881 mo
111.461 439.325 118.862 440.378 129.67 440.545 cv
106.187 412.737 mo
111.311 410.294 119.264 408.986 130.072 408.818 cv
129.585 447.118 mo
120.407 447.118 106.897 448.063 106.108 434.906 cv
105.668 427.589 105.674 421.08 106.094 413.808 cv
106.867 400.448 120.845 402.358 130.151 402.358 cv
80.0203 488.477 mo
90.7249 488.477 li
91.22 488.477 91.6248 488.072 91.6248 487.577 cv
91.6248 485.827 li
91.6248 485.331 91.22 484.925 90.7249 484.925 cv
80.0203 484.925 li
79.5247 484.925 79.1189 485.331 79.1189 485.827 cv
79.1189 487.577 li
79.1189 488.072 79.5247 488.477 80.0203 488.477 cv
80.0203 488.477 li
cp
93.699 488.477 mo
103.513 488.477 li
104.01 488.477 104.415 488.072 104.415 487.577 cv
104.415 485.827 li
104.415 485.331 104.01 484.925 103.513 484.925 cv
93.699 484.925 li
93.2024 484.925 92.7986 485.331 92.7986 485.827 cv
92.7986 487.577 li
92.7986 488.072 93.2024 488.477 93.699 488.477 cv
93.699 488.477 li
cp
80.3264 494.144 mo
90.4167 494.144 li
91.0818 494.144 91.6248 493.602 91.6248 492.937 cv
91.6248 490.592 li
91.6248 489.927 91.0818 489.384 90.4167 489.384 cv
80.3264 489.384 li
79.6628 489.384 79.1189 489.927 79.1189 490.592 cv
79.1189 492.937 li
79.1189 493.602 79.6628 494.144 80.3264 494.144 cv
80.3264 494.144 li
cp
94.0056 494.144 mo
103.208 494.144 li
103.872 494.144 104.415 493.602 104.415 492.937 cv
104.415 490.592 li
104.415 489.927 103.872 489.384 103.208 489.384 cv
94.0056 489.384 li
93.3401 489.384 92.7986 489.927 92.7986 490.592 cv
92.7986 492.937 li
92.7986 493.602 93.3401 494.144 94.0056 494.144 cv
94.0056 494.144 li
cp
77.7336 496.963 mo
77.7336 496.077 78.4578 495.352 79.3459 495.352 cv
89.8708 495.352 li
90.759 495.352 91.4841 496.077 91.4841 496.963 cv
91.4841 500.329 li
91.4841 501.216 90.759 501.94 89.8708 501.94 cv
79.3459 501.94 li
78.4578 501.94 77.7336 501.216 77.7336 500.329 cv
77.7336 496.963 li
77.7336 496.963 li
cp
104.965 495.318 mo
94.2668 495.318 li
93.3801 495.318 92.655 496.041 92.655 496.929 cv
92.655 500.364 li
92.655 501.252 93.3801 501.976 94.2668 501.976 cv
104.965 501.976 li
75.866 492.187 mo
76.0852 492 76.4197 492.156 76.4197 492.443 cv
76.4197 504.85 li
76.4197 505.137 76.0852 505.292 75.866 505.107 cv
72.9304 502.626 72.9304 494.666 75.866 492.187 cv
75.866 492.187 li
cp
70.7654 490.806 mo
75.032 490.806 li
76.0315 490.806 76.8459 489.991 76.8459 488.992 cv
76.8459 483.947 li
105.579 488.899 mo
146.752 488.899 li
106.78 484.149 mo
145.476 483.973 li
63.7717 490.806 mo
67.6619 485.723 72.0906 483.956 78.303 483.888 cv
106.78 484.149 li
107.372 484.154 107.717 484.815 107.383 485.303 cv
105.341 488.291 105 490.495 104.966 494.027 cv
104.937 497.096 104.937 500.231 104.968 503.301 cv
105.003 506.812 105.347 509.011 107.383 511.989 cv
107.717 512.478 107.372 513.139 106.78 513.145 cv
78.303 513.405 li
72.0906 513.336 67.6619 511.569 63.7717 506.488 cv
63.0256 492.867 mo
63.0256 504.427 li
70.5217 493.873 mo
70.5217 493.318 70.0691 492.867 69.5139 492.867 cv
62.5886 492.867 li
62.1448 492.867 61.782 492.502 61.782 492.059 cv
61.782 491.611 li
61.782 491.166 62.1448 490.806 62.5886 490.806 cv
70.7654 490.806 li
71.7273 490.806 72.5115 491.589 72.5115 492.55 cv
72.5115 504.742 li
72.5115 505.705 71.7273 506.488 70.7654 506.488 cv
62.5886 506.488 li
62.1448 506.488 61.782 506.125 61.782 505.682 cv
61.782 505.234 li
61.782 504.79 62.1448 504.427 62.5886 504.427 cv
69.5139 504.427 li
70.0691 504.427 70.5217 503.974 70.5217 503.419 cv
70.5217 493.873 li
70.5217 493.873 li
cp
17.9812 497.981 mo
29.6516 497.981 li
17.9812 486.258 mo
17.9812 511.036 li
9.34595 494.053 mo
30.4954 487.082 50.9314 484.504 73.5969 484.356 cv
42.2556 481.963 mo
42.2556 515.331 li
52.3792 481.039 mo
52.3792 516.254 li
29.6516 483.689 mo
29.6516 513.604 li
9.34595 489.459 mo
9.34595 507.832 li
163.463 496.526 mo
163.463 500.768 li
167.406 496.526 mo
162.366 496.526 li
161.737 496.526 161.225 497.039 161.225 497.667 cv
161.225 499.625 li
161.225 500.255 161.737 500.768 162.366 500.768 cv
167.406 500.768 li
146.752 484.12 mo
146.752 513.174 li
167.406 485.166 mo
167.406 512.125 li
223.311 476.074 mo
223.311 481.149 li
184.748 480.034 mo
184.748 484.727 li
129.178 479.158 mo
129.67 440.545 li
129.703 437.896 132.275 436.313 132.308 433.662 cv
132.538 415.514 li
132.573 412.738 130.036 411.593 130.072 408.818 cv
132.158 244.512 li
132.514 216.549 167.152 230.13 173.49 256.751 cv
209.276 407.056 li
233.313 479.77 mo
228.748 476.909 li
227.249 475.968 225.648 475.659 223.907 475.968 cv
196.049 480.938 164.01 481.318 130.642 479.024 cv
129.128 478.919 128.344 479.469 127.12 480.16 cv
240.18 488.722 mo
219.292 488.722 li
219.292 494.465 mo
239.945 494.465 li
264.935 490.624 mo
281.864 490.624 li
248.657 484.386 mo
244.483 486.079 242.363 489.622 241.979 492.901 cv
255.693 492.901 mo
255.693 504.391 li
252.966 484.443 mo
244.434 490.93 244.434 506.363 252.966 512.849 cv
239.945 492.901 mo
266.102 492.901 li
262.696 497.453 mo
275.285 497.523 li
275.653 497.524 275.951 497.827 275.951 498.195 cv
275.951 499.099 li
275.951 499.466 275.653 499.768 275.285 499.771 cv
262.696 499.841 li
257.015 484.504 mo
262.787 486.854 266.777 491.143 267.141 497.476 cv
252.714 484.441 mo
259.695 484.441 262.682 492.701 262.682 498.646 cv
262.682 504.593 259.695 512.853 252.714 512.853 cv
246.02 484.353 mo
242.655 484.353 239.945 487.037 239.945 490.402 cv
239.945 506.891 li
239.945 510.255 242.655 512.939 246.02 512.939 cv
281.864 485.025 mo
281.864 512.269 li
268.086 484.707 mo
268.086 479.679 li
219.292 484.179 mo
255.669 484.234 291.404 485.025 326.456 486.594 cv
219.292 481.671 mo
219.292 515.622 li
326.456 489.791 mo
326.456 481.993 li
328.479 494.624 mo
342.544 494.524 li
287.415 497.989 mo
326.456 489.791 li
327.505 489.571 328.479 490.363 328.479 491.435 cv
328.479 505.858 li
328.479 506.931 327.505 507.722 326.456 507.502 cv
287.415 499.304 li
286.709 499.156 286.709 498.137 287.415 497.989 cv
287.415 497.989 li
cp
414.1 494.858 mo
414.081 502.449 li
404.62 490.852 mo
421.224 496.117 421.224 501.175 404.62 506.441 cv
385.964 481.551 mo
385.964 495.386 li
379.107 464.533 mo
379.637 464.533 380.067 464.102 380.067 463.573 cv
380.067 463.042 379.637 462.613 379.107 462.613 cv
378.577 462.613 378.147 463.042 378.147 463.573 cv
378.147 464.102 378.577 464.533 379.107 464.533 cv
379.107 464.533 li
cp
379.107 458.776 mo
379.637 458.776 380.067 458.346 380.067 457.817 cv
380.067 457.288 379.637 456.858 379.107 456.858 cv
378.577 456.858 378.147 457.288 378.147 457.817 cv
378.147 458.346 378.577 458.776 379.107 458.776 cv
379.107 458.776 li
cp
375.147 459.74 mo
382.44 459.74 li
375.147 461.41 mo
382.491 461.41 li
366.476 418.85 mo
354.967 478.856 li
379.624 418.85 mo
381.191 418.85 li
363.173 418.85 mo
377.42 418.85 li
378.45 421.615 mo
378.594 421.615 li
379.159 421.615 379.624 421.15 379.624 420.584 cv
379.624 415.503 li
379.624 414.936 379.159 414.473 378.594 414.473 cv
378.45 414.473 li
377.885 414.473 377.42 414.936 377.42 415.503 cv
377.42 420.584 li
377.42 421.15 377.885 421.615 378.45 421.615 cv
378.45 421.615 li
cp
379.621 405.866 mo
375.994 408.751 375.147 416.319 375.147 420.762 cv
375.147 478.856 li
352.551 478.856 mo
352.084 494.249 li
343.717 483.456 mo
336.985 488.81 341.632 492.415 354.608 494.739 cv
336.437 496.86 mo
338.415 496.245 352.076 496.659 359.896 496.556 cv
367.201 497.76 mo
369.149 497.192 372.281 496.974 374.124 497.417 cv
376.137 497.904 376.124 499.396 374.116 499.876 cv
372.34 500.303 369.374 500.116 367.419 499.592 cv
365.364 499.043 364.845 498.448 367.201 497.76 cv
367.201 497.76 li
cp
373.578 495.108 mo
367.087 495.156 362.374 495.761 359.052 496.804 cv
354.413 498.259 354.184 498.931 358.932 500.452 cv
362.261 501.518 367.008 502.138 373.578 502.184 cv
337.054 496.24 mo
339.663 494.098 345.066 494.407 347.936 494.524 cv
366.171 495.261 395.681 494.898 406.455 496.911 cv
411.386 497.833 412.103 499.277 406.707 500.332 cv
396.152 502.401 366.317 502.025 347.936 502.77 cv
345.172 502.881 340.065 503.171 337.359 501.283 cv
335.35 499.882 335.117 497.83 337.054 496.24 cv
337.054 496.24 li
cp
347.163 478.856 mo
383.027 478.856 li
382.255 453.058 mo
399.633 453.058 li
382.035 446.027 mo
398.175 446.027 li
381.806 438.708 mo
396.587 438.708 li
381.575 431.315 mo
394.683 431.315 li
381.363 424.565 mo
392.62 424.565 li
381.164 418.168 mo
390.469 418.168 li
395.753 474.302 mo
382.932 474.302 li
382.688 466.912 mo
395.753 466.912 li
395.753 460.095 mo
395.753 481.551 li
382.476 460.095 mo
400.878 460.095 li
380.792 406.244 mo
383.078 479.406 li
383.115 480.601 384.098 481.551 385.293 481.551 cv
403.733 481.551 li
343.556 488.604 mo
344.428 487.489 345.151 486.428 345.57 484.847 cv
362.361 421.676 li
363.363 417.904 364.488 414.774 365.8 412.305 cv
371.432 401.701 385.179 403.859 389.535 415.503 cv
397.973 438.052 402.325 463.868 404.657 491.299 cv
404.829 493.325 405.74 494.344 406.986 495.398 cv
345.945 483.681 mo
312.605 480.229 275.312 479.513 237.118 479.42 cv
236.11 479.419 235.251 479.482 234.253 479.63 cv
195.216 485.465 152.212 487.924 129.747 480.802 cv
127.938 480.229 126.324 479.958 124.428 479.913 cv
54.7405 478.29 14.5359 482.672 3.97925 493.095 cv
.123292 496.9 .43921 501.002 4.40015 504.597 cv
15.572 514.732 55.634 518.982 124.428 517.379 cv
126.324 517.335 127.938 517.064 129.747 516.491 cv
152.212 509.368 195.216 511.827 234.253 517.662 cv
235.251 517.812 236.11 517.874 237.118 517.872 cv
275.312 517.78 312.605 517.064 345.945 513.612 cv
@
673.602 99.5718 mo
673.602 112.571 li
629.906 125.262 mo
628.366 125.01 li
627.331 124.84 626.574 123.998 626.513 122.952 cv
626.269 118.732 626.83 114.815 628.022 111.133 cv
676.286 113.854 mo
678.123 121.827 676.27 128.996 672.972 133.55 cv
672.569 134.107 671.975 134.41 671.285 134.41 cv
668.74 134.41 li
707.206 116.47 mo
673.892 113.651 li
707.206 100.829 mo
707.206 120.022 li
633.217 98.0591 mo
633.217 106.452 li
590.659 96.4658 mo
590.659 107.401 li
554.602 95.1157 mo
554.602 103.824 li
631.824 108.952 mo
517.135 97.8613 li
477.685 92.2358 mo
477.685 96.0161 li
517.135 93.7124 mo
517.135 99.9937 li
676.697 115.996 mo
708.673 119.19 li
674.353 115.762 mo
674.355 115.762 li
643.534 98.4458 mo
463.135 91.6914 li
457.634 91.4844 475.069 95.8555 480.263 96.373 cv
630.709 111.403 li
713.779 101.076 mo
661.886 99.1323 li
702.165 140.228 mo
699.547 140.228 li
698.917 140.228 698.405 139.716 698.405 139.086 cv
698.405 136.543 li
698.405 136.014 698.754 135.565 699.268 135.437 cv
701.225 134.944 li
708.986 118.547 mo
701.32 134.349 li
701.254 134.483 701.225 134.612 701.225 134.761 cv
701.225 139.288 li
701.225 139.806 701.647 140.228 702.165 140.228 cv
709.728 140.228 li
652.019 175.756 mo
650.953 175.756 li
648.461 175.756 646.423 173.718 646.423 171.226 cv
646.423 150.442 li
646.423 147.95 648.461 145.912 650.953 145.912 cv
652.019 145.912 li
654.51 145.912 656.548 147.95 656.548 150.442 cv
656.548 171.226 li
656.548 173.718 654.51 175.756 652.019 175.756 cv
652.019 175.756 li
cp
726.321 162.566 mo
724.435 162.566 722.896 164.105 722.896 165.992 cv
722.896 176.728 li
722.896 178.613 724.435 180.153 726.321 180.153 cv
643.601 129.763 mo
636.95 136.696 li
641.266 108.847 mo
634.996 104.409 li
667.643 103.142 mo
662.182 108.392 li
660.117 129.867 mo
667.119 136.515 li
651.933 142.329 mo
639.373 142.329 629.192 132.145 629.192 119.586 cv
629.192 107.027 639.373 96.8433 651.933 96.8433 cv
664.493 96.8433 674.676 107.027 674.676 119.586 cv
674.676 132.145 664.493 142.329 651.933 142.329 cv
651.933 142.329 li
cp
651.933 132.458 mo
644.082 132.458 637.718 126.093 637.718 118.244 cv
637.718 110.391 644.082 104.027 651.933 104.027 cv
659.783 104.027 666.149 110.391 666.149 118.244 cv
666.149 126.093 659.783 132.458 651.933 132.458 cv
651.933 132.458 li
cp
651.933 120.907 mo
650.462 120.907 649.268 119.715 649.268 118.244 cv
649.268 116.772 650.462 115.578 651.933 115.578 cv
653.406 115.578 654.598 116.772 654.598 118.244 cv
654.598 119.715 653.406 120.907 651.933 120.907 cv
651.933 120.907 li
cp
708.546 126.993 mo
708.893 128.472 709.374 129.872 710.152 131.101 cv
711.363 133.015 711.031 132.777 710.942 135.007 cv
710.916 135.629 710.737 136.157 710.378 136.665 cv
709 138.618 li
715.679 134.742 mo
712.347 134.742 li
714.834 137.274 mo
713.192 137.274 li
712.727 137.274 712.347 136.894 712.347 136.431 cv
712.347 133.81 li
712.347 133.345 712.727 132.965 713.192 132.965 cv
714.834 132.965 li
715.299 132.965 715.679 133.345 715.679 133.81 cv
715.679 136.431 li
715.679 136.894 715.299 137.274 714.834 137.274 cv
714.834 137.274 li
cp
722.514 132.865 mo
722.514 138.381 li
717.962 89.1035 mo
714.645 88.1558 li
719.266 87.2183 mo
714.61 85.8467 li
720.201 80.2236 mo
718.767 81.6353 717.667 83.7144 716.938 86.5317 cv
720.311 76.8765 mo
715.903 79.6543 713.962 85.2041 714.798 92.8574 cv
722.504 84.7793 mo
722.504 75.0415 li
722.504 74.5239 722.082 74.1001 721.563 74.1001 cv
721.279 74.1001 li
720.761 74.1001 720.339 74.5239 720.339 75.0415 cv
720.339 86.0776 li
705.981 91.5029 mo
705.981 96.6172 li
715.644 92.9873 mo
638.321 81.1133 li
631.983 80.1401 633.784 82.2275 638.275 83.9907 cv
641.175 85.1299 646.571 86.083 647.014 86.1602 cv
713.365 97.9346 li
718.258 115.368 mo
713.615 112.218 li
722.459 112.078 mo
713.779 101.076 li
717.564 122.755 mo
714.535 122.755 li
713.619 122.755 713.037 123.727 713.469 124.534 cv
715.514 128.359 718.183 131.263 721.741 133.239 cv
779.906 99.5718 mo
779.906 112.571 li
823.602 125.262 mo
825.141 125.01 li
826.175 124.84 826.934 123.998 826.994 122.952 cv
827.239 118.732 826.677 114.815 825.487 111.133 cv
777.222 113.854 mo
775.384 121.827 777.238 128.996 780.534 133.55 cv
780.94 134.107 781.531 134.41 782.221 134.41 cv
784.767 134.41 li
746.302 116.47 mo
779.615 113.651 li
746.302 100.829 mo
746.302 120.022 li
820.291 98.0591 mo
820.291 106.452 li
862.849 96.4658 mo
862.849 107.401 li
898.906 95.1157 mo
898.906 103.824 li
821.682 108.952 mo
936.373 97.8613 li
975.822 92.2358 mo
975.822 96.0161 li
936.373 93.7124 mo
936.373 99.9937 li
776.812 115.996 mo
744.833 119.19 li
779.155 115.762 mo
779.153 115.762 li
809.973 98.4458 mo
990.372 91.6914 li
995.874 91.4844 978.438 95.8555 973.244 96.373 cv
822.798 111.403 li
739.728 101.076 mo
791.622 99.1323 li
751.342 140.228 mo
753.961 140.228 li
754.589 140.228 755.103 139.716 755.103 139.086 cv
755.103 136.543 li
755.103 136.014 754.754 135.565 754.24 135.437 cv
752.283 134.944 li
744.523 118.547 mo
752.189 134.349 li
752.254 134.483 752.283 134.612 752.283 134.761 cv
752.283 139.288 li
752.283 139.806 751.86 140.228 751.342 140.228 cv
743.781 140.228 li
801.489 175.756 mo
802.555 175.756 li
805.046 175.756 807.085 173.718 807.085 171.226 cv
807.085 150.442 li
807.085 147.95 805.046 145.912 802.555 145.912 cv
801.489 145.912 li
798.998 145.912 796.958 147.95 796.958 150.442 cv
796.958 171.226 li
796.958 173.718 798.998 175.756 801.489 175.756 cv
801.489 175.756 li
cp
727.186 162.566 mo
729.073 162.566 730.612 164.105 730.612 165.992 cv
730.612 176.728 li
730.612 178.613 729.073 180.153 727.186 180.153 cv
809.906 129.763 mo
816.557 136.696 li
812.242 108.847 mo
818.512 104.409 li
785.865 103.142 mo
791.326 108.392 li
793.39 129.867 mo
786.389 136.515 li
801.573 142.329 mo
814.134 142.329 824.317 132.145 824.317 119.586 cv
824.317 107.025 814.134 96.8433 801.573 96.8433 cv
789.015 96.8433 778.832 107.025 778.832 119.586 cv
778.832 132.145 789.015 142.329 801.573 142.329 cv
801.573 142.329 li
cp
801.573 132.458 mo
809.425 132.458 815.79 126.093 815.79 118.244 cv
815.79 110.391 809.425 104.027 801.573 104.027 cv
793.723 104.027 787.359 110.391 787.359 118.244 cv
787.359 126.093 793.723 132.458 801.573 132.458 cv
801.573 132.458 li
cp
801.573 120.907 mo
803.046 120.907 804.239 119.715 804.239 118.244 cv
804.239 116.772 803.046 115.578 801.573 115.578 cv
800.103 115.578 798.91 116.772 798.91 118.244 cv
798.91 119.715 800.103 120.907 801.573 120.907 cv
801.573 120.907 li
cp
744.962 126.993 mo
744.615 128.472 744.133 129.872 743.357 131.101 cv
742.146 133.015 742.478 132.777 742.567 135.007 cv
742.592 135.629 742.77 136.157 743.129 136.665 cv
744.508 138.618 li
737.829 134.742 mo
741.16 134.742 li
738.674 137.274 mo
740.316 137.274 li
740.781 137.274 741.16 136.894 741.16 136.431 cv
741.16 133.81 li
741.16 133.345 740.781 132.965 740.316 132.965 cv
738.674 132.965 li
738.209 132.965 737.829 133.345 737.829 133.81 cv
737.829 136.431 li
737.829 136.894 738.209 137.274 738.674 137.274 cv
738.674 137.274 li
cp
730.994 132.865 mo
730.994 138.381 li
729.858 36.415 mo
729.68 24.8374 723.828 24.8374 723.651 36.415 cv
730.363 75.5806 mo
729.902 58.6255 730.608 31.2637 728.547 19.8569 cv
727.517 14.1489 726.015 14.0454 724.966 19.8228 cv
722.899 31.209 723.607 58.6099 723.146 75.5806 cv
735.544 89.1035 mo
738.863 88.1558 li
734.241 87.2183 mo
738.897 85.8467 li
733.307 80.2236 mo
734.74 81.6353 735.839 83.7144 736.57 86.5317 cv
730.928 78.6079 mo
728.674 77.6255 724.833 77.6255 722.58 78.6079 cv
733.196 76.8765 mo
737.605 79.6543 739.546 85.2041 738.708 92.8574 cv
730.924 75.772 mo
728.085 74.7388 725.423 74.7388 722.584 75.772 cv
731.003 84.7793 mo
731.003 75.0415 li
731.003 74.5239 731.426 74.1001 731.944 74.1001 cv
732.228 74.1001 li
732.745 74.1001 733.169 74.5239 733.169 75.0415 cv
733.169 86.0776 li
747.526 91.5029 mo
747.526 96.6172 li
737.864 92.9873 mo
815.186 81.1133 li
821.526 80.1401 819.724 82.2275 815.233 83.9907 cv
812.332 85.1299 806.937 86.083 806.494 86.1602 cv
740.142 97.9346 li
739.728 101.076 mo
733.457 82.6855 720.051 82.6855 713.779 101.076 cv
742.994 112.407 mo
742.773 102.417 739.281 93.9355 733.665 86.4365 cv
732.827 85.3159 731.625 84.7129 730.225 84.7129 cv
723.281 84.7129 li
721.883 84.7129 720.68 85.3159 719.841 86.4365 cv
714.225 93.9355 710.736 102.417 710.514 112.407 cv
731.905 96.3706 mo
731.905 92.1138 li
731.905 91.7446 731.602 91.4419 731.232 91.4419 cv
722.275 91.4419 li
721.905 91.4419 721.603 91.7446 721.603 92.1138 cv
721.603 96.3706 li
733.547 96.6548 mo
733.547 91.3677 li
733.547 90.4063 732.763 89.6201 731.801 89.6201 cv
721.706 89.6201 li
720.744 89.6201 719.959 90.4063 719.959 91.3677 cv
719.959 96.6548 li
741.645 102.584 mo
739.682 101.121 734.263 96.3706 732.089 96.3706 cv
721.418 96.3706 li
719.245 96.3706 713.826 101.121 711.863 102.584 cv
733.749 146.673 mo
739.924 146.673 744.962 141.636 744.962 135.46 cv
744.962 124.438 li
744.962 115.357 741.848 104.507 732.996 101.352 cv
729.327 100.045 723.621 100.099 720.007 101.543 cv
711.54 104.924 708.546 115.532 708.546 124.438 cv
708.546 135.46 li
708.546 141.636 713.583 146.673 719.759 146.673 cv
733.749 146.673 li
733.749 146.673 li
cp
741.005 118.919 mo
741.072 111.889 738.195 107.425 733.255 105.35 cv
729.532 103.787 725.426 103.66 721.587 104.863 cv
715.835 106.668 712.43 111.277 712.503 118.919 cv
735.249 115.368 mo
739.894 112.218 li
731.048 112.078 mo
739.728 101.076 li
735.458 120.871 mo
739.072 120.871 li
740.249 120.871 741.15 120.089 741.005 118.919 cv
740.385 113.923 736.855 109.688 731.65 108.013 cv
728.652 107.048 725.209 107.014 722.19 107.911 cv
716.803 109.51 713.136 113.817 712.503 118.919 cv
712.357 120.089 713.236 120.871 714.413 120.871 cv
718.028 120.871 li
735.944 122.755 mo
738.971 122.755 li
739.889 122.755 740.47 123.727 740.037 124.534 cv
737.994 128.359 735.323 131.263 731.766 133.239 cv
736.072 120.871 mo
736.748 120.869 737.251 120.258 737.123 119.592 cv
734.991 108.558 718.516 108.558 716.384 119.592 cv
716.256 120.258 716.758 120.869 717.437 120.871 cv
736.072 120.871 li
736.072 120.871 li
cp
731.351 130.845 mo
734.115 129.566 736.215 127.094 736.987 124.099 cv
737.161 123.414 736.651 122.755 735.944 122.755 cv
717.564 122.755 li
716.858 122.755 716.345 123.414 716.522 124.099 cv
717.293 127.094 719.393 129.566 722.156 130.845 cv
731.29 132.853 mo
731.29 127.763 li
731.29 126.579 730.324 125.614 729.142 125.614 cv
724.366 125.614 li
723.183 125.614 722.218 126.579 722.218 127.763 cv
722.218 132.853 li
731.923 138.398 mo
732.87 138.132 733.875 137.579 733.952 136.434 cv
733.993 135.815 733.787 135.265 733.35 134.824 cv
732.807 134.28 732.456 133.875 732.041 133.491 cv
731.459 132.955 731.384 132.853 730.652 132.853 cv
722.855 132.853 li
722.123 132.853 722.048 132.955 721.466 133.491 cv
721.051 133.875 720.701 134.28 720.158 134.824 cv
719.72 135.265 719.515 135.815 719.556 136.434 cv
719.633 137.579 720.638 138.132 721.583 138.398 cv
732.446 142.067 mo
732.446 139.053 li
732.446 138.683 732.143 138.381 731.774 138.381 cv
721.735 138.381 li
721.365 138.381 721.063 138.683 721.063 139.053 cv
721.063 142.067 li
733.549 145.353 mo
733.993 145.353 734.355 144.992 734.355 144.547 cv
734.355 142.873 li
734.355 142.43 733.993 142.067 733.549 142.067 cv
719.959 142.067 li
719.515 142.067 719.152 142.43 719.152 142.873 cv
719.152 144.547 li
719.152 144.992 719.515 145.353 719.959 145.353 cv
733.549 145.353 li
733.549 145.353 li
cp
@
0 lc
0 lj
4 ml
466.781 191.406 mo
988.873 191.406 li
.749721 .679194 .670497 .901457 cmyk
@
467.679 191.406 mo
468.775 189.605 li
468.713 189.564 li
465.776 190.731 li
464.752 190.956 463.729 191.181 462.705 191.406 cv
463.729 191.631 464.752 191.856 465.776 192.082 cv
468.713 193.249 li
468.775 193.218 li
467.679 191.406 li
cp
f
987.976 191.406 mo
986.88 189.605 li
986.942 189.564 li
989.879 190.731 li
990.903 190.956 991.926 191.181 992.949 191.406 cv
991.926 191.631 990.903 191.856 989.879 192.082 cv
986.942 193.249 li
986.88 193.218 li
987.976 191.406 li
cp
f
413.043 185.008 mo
4.51733 185.008 li
@
412.145 185.008 mo
411.05 186.81 li
411.111 186.85 li
414.049 185.684 li
415.072 185.458 416.095 185.233 417.119 185.008 cv
416.095 184.783 415.072 184.558 414.049 184.333 cv
411.111 183.166 li
411.05 183.196 li
412.145 185.008 li
cp
f
5.4148 185.008 mo
6.5105 186.81 li
6.44898 186.85 li
3.51148 185.684 li
2.48804 185.458 1.4646 185.233 .441163 185.008 cv
1.4646 184.783 2.48804 184.558 3.51148 184.333 cv
6.44898 183.166 li
6.5105 183.196 li
5.4148 185.008 li
cp
f
%%IncludeResource: font ArialMT
/JDLAFM+ArialMT /ArialMT findfont ct_VMDictPut/JDLAFM+ArialMT*1 [49{/.notdef}rp /one /.notdef /three /four /.notdef /six /.notdef /eight /nine 198{/.notdef}rp]JDLAFM+ArialMT nfJDLAFM+ArialMT*1 [11 0 0 -11 0 0 ]msf188.386 203.403 mo(1463)sh706.633 207.481 mo(1869)[6.11719 6.11719 6.11719 0 ]xsh681.615 794.469 mo
681.546 794.504 681.429 794.57 681.265 794.664 cv
681.1 794.76 680.892 794.851 680.641 794.938 cv
680.39 795.025 680.108 795.103 679.796 795.171 cv
679.484 795.241 679.146 795.276 678.781 795.276 cv
678.418 795.276 678.075 795.223 677.755 795.12 cv
677.434 795.016 677.153 794.86 676.909 794.652 cv
676.667 794.444 676.477 794.193 676.338 793.898 cv
676.198 793.603 676.13 793.256 676.13 792.858 cv
676.13 782.665 li
674.232 782.665 li
674.232 781.6 li
676.13 781.6 li
676.13 776.971 li
677.43 776.971 li
677.43 781.6 li
680.575 781.6 li
680.575 782.665 li
677.43 782.665 li
677.43 792.545 li
677.43 793.048 677.603 793.425 677.949 793.676 cv
678.296 793.928 678.687 794.053 679.12 794.053 cv
679.656 794.053 680.121 793.962 680.511 793.781 cv
680.901 793.598 681.139 793.482 681.226 793.429 cv
681.615 794.469 li
cp
f
694.953 795.12 mo
693.654 795.12 li
693.654 787.58 li
693.654 784.235 692.535 782.562 690.299 782.562 cv
689.744 782.562 689.202 782.665 688.674 782.873 cv
688.146 783.081 687.652 783.376 687.193 783.757 cv
686.733 784.139 686.329 784.585 685.984 785.096 cv
685.636 785.608 685.376 786.159 685.203 786.747 cv
685.203 795.12 li
683.904 795.12 li
683.904 776.139 li
685.203 776.139 li
685.203 784.824 li
685.758 783.766 686.525 782.925 687.504 782.301 cv
688.484 781.677 689.536 781.366 690.663 781.366 cv
691.408 781.366 692.05 781.504 692.587 781.782 cv
693.124 782.059 693.571 782.457 693.926 782.978 cv
694.281 783.497 694.541 784.126 694.706 784.863 cv
694.87 785.599 694.953 786.427 694.953 787.345 cv
694.953 795.12 li
cp
f
709.929 787.839 mo
709.877 787.042 709.698 786.315 709.396 785.656 cv
709.092 784.997 708.702 784.429 708.226 783.953 cv
707.749 783.476 707.198 783.104 706.574 782.834 cv
705.95 782.566 705.283 782.431 704.573 782.431 cv
703.862 782.431 703.195 782.566 702.571 782.834 cv
701.947 783.104 701.397 783.476 700.92 783.953 cv
700.443 784.429 700.062 785.001 699.776 785.668 cv
699.49 786.336 699.321 787.06 699.269 787.839 cv
709.929 787.839 li
cp
704.625 795.379 mo
703.671 795.379 702.787 795.193 701.973 794.821 cv
701.157 794.448 700.451 793.937 699.854 793.287 cv
699.256 792.636 698.787 791.887 698.449 791.038 cv
698.112 790.189 697.943 789.279 697.943 788.308 cv
697.943 787.355 698.112 786.457 698.449 785.617 cv
698.787 784.776 699.251 784.039 699.841 783.407 cv
700.43 782.774 701.128 782.276 701.934 781.912 cv
702.74 781.547 703.611 781.366 704.547 781.366 cv
705.5 781.366 706.384 781.552 707.198 781.924 cv
708.013 782.297 708.715 782.8 709.305 783.433 cv
709.894 784.066 710.354 784.802 710.683 785.643 cv
711.012 786.484 711.177 787.372 711.177 788.308 cv
711.177 788.395 711.177 788.502 711.177 788.632 cv
711.177 788.762 711.168 788.845 711.151 788.879 cv
699.295 788.879 li
699.347 789.66 699.529 790.383 699.841 791.05 cv
700.153 791.718 700.547 792.294 701.024 792.78 cv
701.5 793.265 702.051 793.647 702.675 793.923 cv
703.299 794.201 703.966 794.339 704.677 794.339 cv
705.145 794.339 705.604 794.275 706.055 794.145 cv
706.505 794.014 706.926 793.837 707.316 793.612 cv
707.706 793.386 708.052 793.114 708.356 792.792 cv
708.658 792.472 708.898 792.122 709.071 791.74 cv
710.215 792.051 li
710.024 792.537 709.742 792.984 709.369 793.391 cv
708.997 793.798 708.564 794.149 708.07 794.444 cv
707.575 794.739 707.033 794.968 706.445 795.132 cv
705.856 795.297 705.249 795.379 704.625 795.379 cv
cp
f
713.751 788.646 mo
713.751 787.45 li
721.24 787.45 li
721.24 788.646 li
713.751 788.646 li
cp
f
731.067 794.209 mo
731.864 794.209 732.592 794.045 733.25 793.715 cv
733.909 793.386 734.477 792.949 734.953 792.403 cv
735.43 791.857 735.803 791.237 736.072 790.543 cv
736.34 789.85 736.475 789.139 736.475 788.412 cv
736.475 787.649 736.349 786.916 736.098 786.214 cv
735.846 785.512 735.49 784.888 735.031 784.342 cv
734.573 783.796 734.027 783.359 733.394 783.03 cv
732.761 782.701 732.064 782.536 731.301 782.536 cv
730.729 782.536 730.192 782.635 729.689 782.834 cv
729.186 783.034 728.722 783.298 728.298 783.627 cv
727.872 783.957 727.491 784.338 727.154 784.772 cv
726.816 785.206 726.533 785.656 726.309 786.123 cv
726.309 790.595 li
726.361 791.098 726.551 791.571 726.881 792.012 cv
727.21 792.455 727.604 792.836 728.064 793.157 cv
728.523 793.478 729.022 793.733 729.559 793.923 cv
730.096 794.115 730.599 794.209 731.067 794.209 cv
cp
731.326 795.379 mo
730.269 795.379 729.281 795.103 728.363 794.547 cv
727.444 793.993 726.725 793.283 726.204 792.415 cv
726.204 795.12 li
725.009 795.12 li
725.009 776.139 li
726.309 776.139 li
726.309 784.538 li
726.949 783.602 727.708 782.839 728.583 782.249 cv
729.459 781.661 730.469 781.366 731.613 781.366 cv
732.566 781.366 733.428 781.57 734.199 781.977 cv
734.971 782.384 735.62 782.921 736.15 783.588 cv
736.678 784.256 737.086 785.01 737.371 785.851 cv
737.657 786.692 737.801 787.545 737.801 788.412 cv
737.801 789.347 737.636 790.236 737.307 791.077 cv
736.977 791.917 736.523 792.654 735.942 793.287 cv
735.361 793.919 734.676 794.426 733.888 794.808 cv
733.099 795.189 732.245 795.379 731.326 795.379 cv
cp
f
741.025 776.139 mo
742.351 776.139 li
742.351 792.442 li
742.351 792.945 742.493 793.343 742.78 793.637 cv
743.066 793.932 743.46 794.08 743.963 794.08 cv
744.154 794.08 744.383 794.058 744.652 794.014 cv
744.92 793.971 745.167 793.907 745.393 793.82 cv
745.653 794.86 li
745.358 794.981 744.993 795.081 744.561 795.159 cv
744.127 795.237 743.755 795.276 743.443 795.276 cv
742.715 795.276 742.13 795.054 741.688 794.613 cv
741.245 794.17 741.025 793.577 741.025 792.831 cv
741.025 776.139 li
cp
f
751.84 795.379 mo
748.963 795.379 747.525 793.386 747.525 789.4 cv
747.525 781.6 li
748.824 781.6 li
748.824 789.217 li
748.824 792.545 749.959 794.209 752.23 794.209 cv
752.802 794.209 753.357 794.11 753.894 793.911 cv
754.431 793.711 754.934 793.434 755.403 793.079 cv
755.87 792.723 756.281 792.294 756.637 791.791 cv
756.992 791.289 757.275 790.735 757.483 790.127 cv
757.483 781.6 li
758.782 781.6 li
758.782 793.299 li
758.782 793.733 758.964 793.95 759.328 793.95 cv
759.328 795.12 li
759.241 795.136 759.163 795.146 759.094 795.146 cv
759.025 795.146 758.973 795.146 758.938 795.146 cv
758.591 795.146 758.283 795.038 758.015 794.821 cv
757.746 794.604 757.613 794.314 757.613 793.95 cv
757.613 791.921 li
757.023 793.013 756.212 793.863 755.181 794.469 cv
754.15 795.077 753.036 795.379 751.84 795.379 cv
cp
f
773.966 787.839 mo
773.914 787.042 773.736 786.315 773.433 785.656 cv
773.129 784.997 772.74 784.429 772.263 783.953 cv
771.786 783.476 771.236 783.104 770.612 782.834 cv
769.988 782.566 769.321 782.431 768.61 782.431 cv
767.899 782.431 767.232 782.566 766.608 782.834 cv
765.984 783.104 765.434 783.476 764.957 783.953 cv
764.48 784.429 764.099 785.001 763.813 785.668 cv
763.527 786.336 763.358 787.06 763.306 787.839 cv
773.966 787.839 li
cp
768.662 795.379 mo
767.708 795.379 766.824 795.193 766.01 794.821 cv
765.195 794.448 764.489 793.937 763.891 793.287 cv
763.293 792.636 762.824 791.887 762.487 791.038 cv
762.149 790.189 761.98 789.279 761.98 788.308 cv
761.98 787.355 762.149 786.457 762.487 785.617 cv
762.824 784.776 763.288 784.039 763.878 783.407 cv
764.467 782.774 765.165 782.276 765.971 781.912 cv
766.777 781.547 767.648 781.366 768.584 781.366 cv
769.537 781.366 770.421 781.552 771.236 781.924 cv
772.05 782.297 772.752 782.8 773.342 783.433 cv
773.931 784.066 774.391 784.802 774.72 785.643 cv
775.049 786.484 775.214 787.372 775.214 788.308 cv
775.214 788.395 775.214 788.502 775.214 788.632 cv
775.214 788.762 775.205 788.845 775.188 788.879 cv
763.332 788.879 li
763.384 789.66 763.566 790.383 763.878 791.05 cv
764.19 791.718 764.584 792.294 765.061 792.78 cv
765.537 793.265 766.088 793.647 766.712 793.923 cv
767.336 794.201 768.003 794.339 768.714 794.339 cv
769.182 794.339 769.641 794.275 770.092 794.145 cv
770.542 794.014 770.963 793.837 771.353 793.612 cv
771.743 793.386 772.089 793.114 772.393 792.792 cv
772.696 792.472 772.935 792.122 773.108 791.74 cv
774.252 792.051 li
774.061 792.537 773.78 792.984 773.406 793.391 cv
773.034 793.798 772.601 794.149 772.107 794.444 cv
771.613 794.739 771.071 794.968 770.482 795.132 cv
769.893 795.297 769.286 795.379 768.662 795.379 cv
cp
f
784.366 794.209 mo
785.146 794.209 785.857 794.045 786.498 793.715 cv
787.139 793.386 787.685 792.949 788.136 792.403 cv
788.587 791.857 788.933 791.233 789.176 790.531 cv
789.418 789.829 789.54 789.114 789.54 788.385 cv
789.54 787.606 789.402 786.865 789.124 786.163 cv
788.847 785.46 788.461 784.841 787.967 784.303 cv
787.473 783.766 786.897 783.337 786.239 783.017 cv
785.579 782.696 784.877 782.536 784.132 782.536 cv
783.664 782.536 783.165 782.635 782.637 782.834 cv
782.109 783.034 781.611 783.302 781.142 783.641 cv
780.674 783.979 780.276 784.365 779.947 784.797 cv
779.616 785.231 779.426 785.691 779.374 786.175 cv
779.374 790.622 li
779.599 791.124 779.885 791.592 780.232 792.026 cv
780.578 792.459 780.969 792.84 781.403 793.169 cv
781.835 793.499 782.303 793.754 782.806 793.937 cv
783.309 794.119 783.828 794.209 784.366 794.209 cv
cp
784.678 795.379 mo
783.517 795.379 782.481 795.072 781.572 794.456 cv
780.661 793.841 779.929 793.091 779.374 792.207 cv
779.374 800.658 li
778.074 800.658 li
778.074 781.6 li
779.27 781.6 li
779.27 784.303 li
779.824 783.437 780.557 782.731 781.467 782.185 cv
782.377 781.638 783.352 781.366 784.392 781.366 cv
785.328 781.366 786.195 781.565 786.992 781.963 cv
787.789 782.363 788.474 782.886 789.046 783.537 cv
789.618 784.187 790.064 784.937 790.385 785.786 cv
790.705 786.635 790.866 787.501 790.866 788.385 cv
790.866 789.322 790.719 790.214 790.424 791.064 cv
790.129 791.914 789.709 792.659 789.163 793.299 cv
788.617 793.941 787.963 794.448 787.2 794.821 cv
786.437 795.193 785.597 795.379 784.678 795.379 cv
cp
f
800.382 782.77 mo
799.169 782.804 798.108 783.164 797.198 783.848 cv
796.287 784.534 795.651 785.473 795.286 786.669 cv
795.286 795.12 li
793.987 795.12 li
793.987 781.6 li
795.235 781.6 li
795.235 784.927 li
795.702 783.974 796.322 783.199 797.093 782.601 cv
797.865 782.002 798.693 781.661 799.576 781.574 cv
799.749 781.556 799.906 781.547 800.044 781.547 cv
800.183 781.547 800.295 781.547 800.382 781.547 cv
800.382 782.77 li
cp
f
802.852 795.12 mo
802.852 781.6 li
804.152 781.6 li
804.152 795.12 li
802.852 795.12 li
cp
802.852 778.532 mo
802.852 776.139 li
804.152 776.139 li
804.152 778.532 li
802.852 778.532 li
cp
f
819.283 795.12 mo
817.984 795.12 li
817.984 787.58 li
817.984 785.829 817.737 784.555 817.242 783.757 cv
816.748 782.96 815.964 782.562 814.889 782.562 cv
814.318 782.562 813.749 782.665 813.187 782.873 cv
812.623 783.081 812.098 783.376 811.614 783.757 cv
811.128 784.139 810.703 784.585 810.339 785.096 cv
809.975 785.608 809.706 786.159 809.533 786.747 cv
809.533 795.12 li
808.234 795.12 li
808.234 781.6 li
809.455 781.6 li
809.455 784.824 li
809.733 784.303 810.074 783.831 810.483 783.407 cv
810.889 782.982 811.349 782.618 811.861 782.315 cv
812.371 782.011 812.913 781.778 813.486 781.613 cv
814.057 781.448 814.647 781.366 815.253 781.366 cv
816.727 781.366 817.767 781.881 818.373 782.913 cv
818.98 783.944 819.283 785.421 819.283 787.345 cv
819.283 795.12 li
cp
f
829.111 794.469 mo
829.041 794.504 828.924 794.57 828.76 794.664 cv
828.595 794.76 828.387 794.851 828.136 794.938 cv
827.885 795.025 827.603 795.103 827.291 795.171 cv
826.979 795.241 826.641 795.276 826.277 795.276 cv
825.913 795.276 825.571 795.223 825.25 795.12 cv
824.929 795.016 824.648 794.86 824.405 794.652 cv
824.162 794.444 823.972 794.193 823.833 793.898 cv
823.694 793.603 823.625 793.256 823.625 792.858 cv
823.625 782.665 li
821.727 782.665 li
821.727 781.6 li
823.625 781.6 li
823.625 776.971 li
824.925 776.971 li
824.925 781.6 li
828.071 781.6 li
828.071 782.665 li
824.925 782.665 li
824.925 792.545 li
824.925 793.048 825.098 793.425 825.445 793.676 cv
825.791 793.928 826.182 794.053 826.615 794.053 cv
827.152 794.053 827.616 793.962 828.006 793.781 cv
828.396 793.598 828.634 793.482 828.721 793.429 cv
829.111 794.469 li
cp
f
835.689 795.379 mo
834.649 795.379 833.652 795.206 832.698 794.86 cv
831.745 794.513 830.913 793.993 830.202 793.299 cv
830.853 792.415 li
831.58 793.075 832.334 793.56 833.115 793.872 cv
833.895 794.184 834.752 794.339 835.689 794.339 cv
836.866 794.339 837.816 794.092 838.535 793.598 cv
839.254 793.105 839.615 792.415 839.615 791.532 cv
839.615 791.116 839.524 790.764 839.341 790.479 cv
839.159 790.193 838.886 789.95 838.523 789.75 cv
838.158 789.551 837.707 789.373 837.17 789.217 cv
836.633 789.062 836.009 788.897 835.298 788.723 cv
834.535 788.55 833.872 788.377 833.31 788.204 cv
832.746 788.031 832.282 787.823 831.918 787.58 cv
831.554 787.337 831.281 787.042 831.099 786.696 cv
830.917 786.349 830.826 785.907 830.826 785.37 cv
830.826 784.694 830.956 784.105 831.216 783.602 cv
831.477 783.099 831.836 782.683 832.295 782.354 cv
832.754 782.025 833.283 781.778 833.881 781.613 cv
834.48 781.448 835.116 781.366 835.792 781.366 cv
836.85 781.366 837.785 781.543 838.601 781.899 cv
839.415 782.254 840.047 782.709 840.498 783.263 cv
839.771 783.965 li
839.32 783.446 838.735 783.055 838.015 782.795 cv
837.296 782.536 836.529 782.406 835.714 782.406 cv
835.211 782.406 834.74 782.457 834.297 782.562 cv
833.856 782.665 833.469 782.831 833.14 783.055 cv
832.811 783.281 832.551 783.572 832.361 783.926 cv
832.169 784.282 832.074 784.703 832.074 785.188 cv
832.074 785.586 832.139 785.907 832.27 786.15 cv
832.4 786.392 832.608 786.6 832.894 786.774 cv
833.179 786.947 833.547 787.098 833.998 787.229 cv
834.448 787.359 834.987 787.501 835.611 787.658 cv
836.459 787.866 837.213 788.065 837.872 788.255 cv
838.531 788.447 839.081 788.68 839.524 788.957 cv
839.965 789.235 840.303 789.565 840.537 789.946 cv
840.772 790.327 840.888 790.813 840.888 791.402 cv
840.888 792.615 840.416 793.581 839.471 794.3 cv
838.527 795.02 837.266 795.379 835.689 795.379 cv
cp
f
843.618 795.12 mo
843.618 792.91 li
844.762 792.91 li
844.762 795.12 li
843.618 795.12 li
cp
f
847.57 788.308 mo
847.57 787.355 847.735 786.453 848.064 785.604 cv
848.393 784.754 848.853 784.018 849.442 783.394 cv
850.031 782.77 850.733 782.276 851.548 781.912 cv
852.363 781.547 853.255 781.366 854.226 781.366 cv
855.456 781.366 856.539 781.643 857.476 782.198 cv
858.411 782.752 859.114 783.524 859.581 784.511 cv
858.308 784.927 li
857.908 784.182 857.341 783.597 856.605 783.172 cv
855.867 782.748 855.058 782.536 854.174 782.536 cv
853.428 782.536 852.735 782.683 852.094 782.978 cv
851.452 783.273 850.894 783.679 850.417 784.2 cv
849.94 784.719 849.563 785.331 849.285 786.033 cv
849.008 786.735 848.869 787.493 848.869 788.308 cv
848.869 789.122 849.013 789.889 849.299 790.609 cv
849.585 791.328 849.966 791.952 850.443 792.481 cv
850.919 793.009 851.483 793.429 852.133 793.742 cv
852.782 794.053 853.472 794.209 854.199 794.209 cv
854.668 794.209 855.131 794.14 855.591 794.001 cv
856.05 793.863 856.475 793.681 856.865 793.456 cv
857.255 793.231 857.593 792.966 857.879 792.663 cv
858.164 792.36 858.36 792.043 858.464 791.713 cv
859.738 792.078 li
859.565 792.545 859.3 792.984 858.945 793.391 cv
858.589 793.798 858.169 794.149 857.684 794.444 cv
857.198 794.739 856.66 794.968 856.072 795.132 cv
855.483 795.297 854.876 795.379 854.252 795.379 cv
853.298 795.379 852.414 795.193 851.6 794.821 cv
850.784 794.448 850.078 793.937 849.481 793.287 cv
848.883 792.636 848.414 791.887 848.076 791.038 cv
847.739 790.189 847.57 789.279 847.57 788.308 cv
cp
f
862.909 788.438 mo
862.909 789.235 863.048 789.985 863.325 790.687 cv
863.603 791.388 863.98 791.999 864.457 792.52 cv
864.934 793.039 865.492 793.452 866.134 793.754 cv
866.775 794.058 867.46 794.209 868.188 794.209 cv
868.916 794.209 869.601 794.058 870.241 793.754 cv
870.883 793.452 871.447 793.031 871.932 792.494 cv
872.417 791.956 872.798 791.336 873.075 790.634 cv
873.353 789.933 873.491 789.174 873.491 788.36 cv
873.491 787.563 873.353 786.813 873.075 786.111 cv
872.798 785.409 872.417 784.793 871.932 784.264 cv
871.447 783.736 870.887 783.316 870.255 783.003 cv
869.622 782.692 868.942 782.536 868.214 782.536 cv
867.486 782.536 866.801 782.692 866.159 783.003 cv
865.519 783.316 864.959 783.741 864.483 784.278 cv
864.006 784.815 863.625 785.444 863.339 786.163 cv
863.053 786.882 862.909 787.64 862.909 788.438 cv
cp
868.214 795.379 mo
867.26 795.379 866.381 795.193 865.574 794.821 cv
864.769 794.448 864.071 793.941 863.482 793.299 cv
862.893 792.659 862.433 791.914 862.104 791.064 cv
861.775 790.214 861.61 789.322 861.61 788.385 cv
861.61 787.432 861.779 786.531 862.116 785.681 cv
862.454 784.832 862.918 784.087 863.508 783.446 cv
864.097 782.804 864.795 782.297 865.601 781.924 cv
866.406 781.552 867.278 781.366 868.214 781.366 cv
869.15 781.366 870.016 781.552 870.814 781.924 cv
871.611 782.297 872.309 782.804 872.906 783.446 cv
873.505 784.087 873.973 784.832 874.311 785.681 cv
874.649 786.531 874.818 787.432 874.818 788.385 cv
874.818 789.322 874.649 790.214 874.311 791.064 cv
873.973 791.914 873.509 792.659 872.92 793.299 cv
872.33 793.941 871.633 794.448 870.826 794.821 cv
870.021 795.193 869.15 795.379 868.214 795.379 cv
cp
f
897.801 795.12 mo
896.501 795.12 li
896.501 787.58 li
896.501 785.864 896.237 784.598 895.708 783.784 cv
895.18 782.969 894.369 782.562 893.278 782.562 cv
892.723 782.562 892.194 782.665 891.692 782.873 cv
891.189 783.081 890.73 783.372 890.314 783.745 cv
889.898 784.118 889.537 784.559 889.235 785.071 cv
888.931 785.582 888.693 786.15 888.52 786.774 cv
888.52 795.12 li
887.219 795.12 li
887.219 787.58 li
887.219 785.846 886.959 784.577 886.44 783.771 cv
885.919 782.964 885.114 782.562 884.022 782.562 cv
883.466 782.562 882.943 782.662 882.448 782.861 cv
881.954 783.06 881.499 783.346 881.083 783.718 cv
880.667 784.091 880.299 784.534 879.979 785.044 cv
879.657 785.556 879.41 786.123 879.238 786.747 cv
879.238 795.12 li
877.938 795.12 li
877.938 781.6 li
879.159 781.6 li
879.159 784.824 li
879.714 783.732 880.442 782.882 881.343 782.276 cv
882.244 781.669 883.241 781.366 884.333 781.366 cv
885.478 781.366 886.405 781.704 887.115 782.379 cv
887.826 783.055 888.25 783.94 888.39 785.032 cv
889.672 782.587 891.44 781.366 893.694 781.366 cv
895.166 781.366 896.22 781.89 896.853 782.939 cv
897.485 783.988 897.801 785.456 897.801 787.345 cv
897.801 795.12 li
cp
f
gsave
620.85 798.504 mo
620.85 782.913 li
620.85 779.021 li
620.85 779.021 li
620.85 772.242 li
620.85 772.152 620.858 772.067 620.873 771.986 cv
620.873 771.979 620.877 771.973 620.878 771.966 cv
620.894 771.892 620.912 771.821 620.941 771.753 cv
620.984 771.646 621.049 771.545 621.126 771.448 cv
621.154 771.413 621.179 771.376 621.211 771.342 cv
621.241 771.313 621.274 771.286 621.307 771.26 cv
621.309 771.258 621.311 771.256 621.312 771.255 cv
621.314 771.253 621.315 771.252 621.317 771.251 cv
621.417 771.172 621.523 771.11 621.631 771.065 cv
621.776 771.005 621.938 770.975 622.116 770.975 cv
633.411 770.975 li
634.633 770.975 635.761 771.188 636.795 771.616 cv
637.573 771.936 638.301 772.378 638.983 772.942 cv
639.21 773.13 639.432 773.331 639.65 773.546 cv
640.509 774.412 641.153 775.364 641.58 776.399 cv
641.632 776.526 641.681 776.653 641.727 776.783 cv
641.741 776.824 641.754 776.866 641.768 776.907 cv
641.798 776.996 641.827 777.084 641.855 777.174 cv
641.869 777.223 641.882 777.273 641.896 777.322 cv
641.919 777.406 641.943 777.49 641.963 777.575 cv
641.976 777.63 641.988 777.685 642 777.742 cv
642.013 777.797 642.027 777.853 642.038 777.909 cv
642.037 777.903 642.035 777.896 642.035 777.89 cv
642.043 777.936 li
642.043 777.936 li
642.043 777.936 li
642.043 777.937 642.043 777.937 642.042 777.937 cv
642.043 777.94 642.043 777.944 642.045 777.948 cv
642.071 778.08 642.094 778.213 642.115 778.348 cv
642.116 778.363 642.119 778.377 642.121 778.392 cv
642.141 778.524 642.156 778.657 642.17 778.79 cv
642.171 778.81 642.174 778.829 642.177 778.849 cv
642.189 778.977 642.198 779.106 642.204 779.235 cv
642.206 779.262 642.208 779.289 642.209 779.315 cv
642.217 779.47 642.221 779.625 642.221 779.784 cv
642.221 780.193 642.191 780.6 642.132 781.004 cv
642.073 781.412 641.983 781.823 641.865 782.241 cv
641.813 782.423 li
641.781 782.532 li
641.787 782.539 li
641.62 783.039 641.407 783.532 641.161 783.997 cv
640.951 784.395 640.718 784.771 640.471 785.109 cv
639.857 785.775 li
638.985 786.718 638.014 787.424 636.945 787.892 cv
635.877 788.36 634.698 788.593 633.411 788.593 cv
631.546 788.593 li
630.927 788.593 li
630.927 789.212 li
630.927 792.894 li
628.395 792.894 li
628.395 787.336 li
628.392 787.327 li
628.39 787.236 li
628.392 787.236 li
628.392 784.015 li
628.392 779.617 li
628.39 778.518 li
628.454 778.516 li
633.411 778.516 li
633.566 778.516 633.702 778.542 633.828 778.583 cv
633.854 778.592 633.883 778.596 633.907 778.606 cv
634.015 778.651 634.118 778.714 634.216 778.794 cv
634.248 778.82 634.279 778.849 634.312 778.879 cv
634.362 778.932 634.404 778.985 634.445 779.04 cv
634.449 779.048 634.456 779.056 634.462 779.064 cv
634.497 779.117 634.529 779.172 634.556 779.227 cv
634.559 779.232 634.562 779.237 634.565 779.242 cv
634.588 779.295 li
634.649 779.443 634.678 779.606 634.678 779.784 cv
634.678 779.966 634.649 780.132 634.589 780.277 cv
634.587 780.277 li
634.527 780.425 634.434 780.564 634.311 780.689 cv
634.189 780.811 634.054 780.902 633.908 780.96 cv
633.762 781.019 633.596 781.05 633.411 781.05 cv
631.546 781.05 li
630.927 781.05 li
630.927 781.669 li
630.927 784.063 li
630.927 785.44 li
630.927 786.06 li
631.546 786.06 li
633.411 786.06 li
634.277 786.06 635.082 785.905 635.825 785.595 cv
636.567 785.288 637.241 784.827 637.848 784.212 cv
638.154 783.908 638.422 783.587 638.652 783.249 cv
638.652 783.249 li
638.879 782.914 639.071 782.561 639.224 782.193 cv
639.532 781.45 639.687 780.646 639.687 779.784 cv
639.687 779.622 639.68 779.463 639.667 779.305 cv
639.665 779.272 639.663 779.239 639.661 779.206 cv
639.648 779.055 639.63 778.907 639.607 778.759 cv
639.601 778.727 639.595 778.695 639.588 778.662 cv
639.568 778.544 639.542 778.429 639.515 778.314 cv
639.504 778.263 639.492 778.213 639.48 778.164 cv
639.44 778.012 639.395 777.863 639.343 777.714 cv
639.343 777.712 639.343 777.712 639.342 777.71 cv
639.322 777.651 639.295 777.592 639.272 777.533 cv
639.047 776.949 638.733 776.395 638.323 775.875 cv
638.322 775.873 li
638.32 775.871 li
638.056 775.541 637.77 775.25 637.464 774.99 cv
637.302 774.852 637.135 774.724 636.961 774.605 cv
636.901 774.564 636.843 774.519 636.78 774.479 cv
636.756 774.464 636.73 774.452 636.705 774.436 cv
636.362 774.224 635.993 774.048 635.604 773.907 cv
635.367 773.821 635.127 773.743 634.875 773.683 cv
634.875 773.681 li
634.759 773.653 634.64 773.629 634.516 773.607 cv
634.512 773.607 634.509 773.606 634.505 773.605 cv
634.437 773.593 634.366 773.585 634.296 773.576 cv
634.237 773.568 634.179 773.558 634.118 773.55 cv
634.094 773.548 634.07 773.548 634.045 773.545 cv
633.799 773.521 633.549 773.508 633.296 773.508 cv
624.002 773.508 li
624.002 773.508 li
624.002 773.508 li
623.383 773.508 li
623.383 774.126 li
623.383 779.302 li
623.383 783.457 li
623.383 796.754 li
623.383 797.372 li
624.002 797.372 li
633.411 797.372 li
634.532 797.372 635.576 797.173 636.543 796.773 cv
637.51 796.374 638.389 795.778 639.182 794.985 cv
639.976 794.194 640.573 793.313 640.972 792.348 cv
641.372 791.38 641.573 790.333 641.573 789.212 cv
641.573 788.651 641.515 788.096 641.398 787.547 cv
641.337 787.257 641.259 786.971 641.164 786.686 cv
641.664 786.13 642.129 785.451 642.519 784.712 cv
642.624 784.512 642.726 784.307 642.82 784.098 cv
643.125 784.654 643.377 785.227 643.573 785.817 cv
643.929 786.884 644.107 788.017 644.107 789.212 cv
644.107 792.169 643.06 794.694 640.969 796.767 cv
640.967 796.77 li
639.925 797.816 638.777 798.602 637.519 799.124 cv
636.265 799.646 634.895 799.906 633.411 799.906 cv
622.116 799.906 li
620.854 799.906 li
620.85 798.504 li
cp
clp
640.924 797.524 mo
639.893 798.305 li
638.737 798.993 li
637.174 799.555 li
635.674 800.055 li
633.612 800.18 li
631.026 800.243 li
631.026 797.149 li
634.44 797.008 li
636.58 796.524 li
638.205 795.555 li
639.862 793.993 li
640.737 792.243 li
641.268 789.774 li
641.157 787.326 li
643.265 784.241 li
643.799 785.274 li
644.205 786.493 li
644.475 788.305 li
644.475 790.993 li
643.518 794.18 li
642.487 795.743 li
640.924 797.524 li
cp
.922759 .654536 .143832 .0126955 cmyk
f
634.931 781.049 mo
630.927 781.077 li
630.927 793.188 li
.671504 .275761 0 0 cmyk
f
631.007 773.743 mo
630.927 770.805 li
621.612 770.805 li
620.987 771.055 li
620.58 771.68 li
620.58 786.06 li
623.643 786.073 li
623.643 773.743 li
631.007 773.743 li
cp
f
634.987 780.524 mo
635.08 779.805 li
635.049 779.18 li
634.549 778.524 li
633.549 778.192 li
628.174 778.192 li
628.174 788.489 li
631.463 788.501 li
631.463 781.368 li
633.549 781.352 li
634.424 781.024 li
634.987 780.524 li
cp
.0654612 .276554 1 0 cmyk
f
628.295 786.07 mo
620.643 786.07 li
620.643 800.149 li
631.026 800.149 li
631.026 788.556 li
628.278 788.556 li
628.295 786.07 li
cp
.163333 .0175174 .98996 0 cmyk
f
640.424 786.055 mo
638.268 788.024 li
635.203 788.857 li
630.937 788.961 li
630.937 788.595 li
628.291 788.6 li
628.332 786.058 li
630.937 786.06 li
630.937 781.18 li
634.018 781.178 li
634.799 780.555 li
634.978 779.96 li
634.549 778.868 li
633.956 778.447 li
630.937 778.461 li
630.937 770.734 li
635.55 770.746 li
638.362 771.774 li
640.205 773.399 li
641.549 775.305 li
642.549 777.211 li
642.768 779.024 li
642.362 782.055 li
641.573 784.15 li
640.424 786.055 li
cp
.0862135 .994842 .98291 .0115358 cmyk
f
grestore
143.496 794.889 mo
86.803 794.889 li
86.803 780.716 li
143.496 780.716 li
143.496 794.889 li
cp
f
0 0 0 0 cmyk
%%IncludeResource: font ArialMT
/JDLAFM+ArialMT*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /.notdef /three /four /.notdef /six /.notdef /eight /nine /colon 24{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 147{/.notdef}rp]JDLAFM+ArialMT nfJDLAFM+ArialMT*1 [9 0 0 -9 0 0 ]msf90.9976 790.78 mo(Sca)sh106.505 790.78 mo(le: 1:100)[2 5.00586 2.5 2.5 5.00586 2.5 5.00586 5.00586 0 ]xsh.749721 .679194 .670497 .901457 cmyk
%%IncludeResource: font ArialMT
/JDLAFM+ArialMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /.notdef /three /four /.notdef /six /.notdef /eight /nine /colon 6{/.notdef}rp /A 17{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n 3{/.notdef}rp /r /s /t /u 138{/.notdef}rp]JDLAFM+ArialMT nfJDLAFM+ArialMT*1 [9 0 0 -9 0 0 ]msf212.166 794.786 mo(All measurements in centimeters.)sh%%IncludeResource: font ArialMT
/JDLAFM+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /.notdef /six /.notdef /eight /nine /colon 6{/.notdef}rp /A 2{/.notdef}rp /D 3{/.notdef}rp /H 10{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 137{/.notdef}rp]JDLAFM+ArialMT nfJDLAFM+ArialMT*1 [18 0 0 -18 0 0 ]msf86.9424 15.4468 mo(Douglas )sh156.991 15.4468 mo(A-20 Havoc \(1941\))sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/JDLAFM+ArialMT*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 23.0.4%%For: (Onno van Braam) ()%%Title: (04136.eps)%%CreationDate: 26/07/2019 10:56%%Canvassize: 16383%AI9_DataStream%Gb"-6kB^l'Z7u44!;A`4(lX$2K-T'h`WdBP,@M0X1niBZpY*B^dRjXPp[k!)1["#efm?(<WDk?IQF$o%e"c`Cfc@NMUYkdX]'AC&%c-(/hn'u^>'+CIUYDqdES%,D2&iP\iS=jA-/hW$]%UHHOU2VUSbDmM4JME[[-_lDNSRt@id:BiOc2:leH7s#MGZ+,s)#aHt=)YZW%C\1k;ntY.PR\hFf>5t>^H>mR89r#8s3)u'to%h$B+&)sIR9,5d#SZ*/aI=W;"iK>4"KQHp!C/-SC^0J31se4L\Tg*[bbqepJD($c%r>1g5iH"4h>.Vq'2-'<],1&=7jiussF)Eh6Ll'/8?U,<,-!_7Y7pJoBTb;e3!!XNeNgF;,)c"XjUJ*/\Lh&mNW8H(3dI'bBPM3*"%)STV"<'asAXr-1;K>UCWJ79RS.4F&SdAkIg1H(KLBa#Sk&MFT!)C&W^SJ7G;:]Hh&0u&9qE(g5MGl5>*D"SHj(;-ACU1)4+/.Ni-%k6gC;A9]SkmJ/F)LQP,4go<(GpM2R;,Z<44\EoK+29neQi]"2$L^1?KFj;Ln>$U&t&Hl8/WZ]R]KsbuTf(c(Wr4;&S2/5iq_IP2T%R8phJJ2$L5b[1JMJgsF[g%E!r9Q#Sj'MKQ63a7At;:F`u+Ms6/f1>13Z_Y?=K5,8O2J/V$U])67@F(uok+g,qTNM*I5TSiE2F;+o%%'-.-+uCWcMH:U&k.h!]%^Qfo"[36]NiU,4#C4EAYjoq+AZ-1O@^5E\JfkDncQ[<S=9`Uk9tK`[E)0<@\>JOP$mmBB'cJcc3gk)Z%N^B^s=(?a-`8[6OO)Fo)'*)XgB#`3Y%kkS,/mO:U`@i]+5]55uN!?dA;tuX_OWT18og`lmbl1:3T_j-'H1Hc;ic@;P),n?$2nZ_b%BMWBX(s%b+WnB6Vn77sf'/FAO1(C#3mItCQ>cf`Q)2ZO>\)0"T-**F]EF\aAYpM?FQDc[P'+gO3htSd#F5!kt2+$0(O;l]uP;$*?%_q!;A]65(g/o/pY[HZC^L4nEI(pULoeop+h40mV$(b'OWFO$?#SYi!sghtlJ[G/\Hd0'L[,LHL?-`/\0d`5KaN<Y8MU-A&?NEH=b%#2gDD'$t,b)`I#1i6m:[&R]B$)Pcik+>]Qk!j#>L(t9nG"J`dS/j:9"RRSfiasB[/IVmg/fV!564rna#F/P/nn*e7M0pjVH4Y,p$%In,]7b5bMtTn/g@[:s.-a"LJG)SjVF5Ng$#-eTL<3_UC*2>X]]I0Ag"2JR[(@/"DeAp9$2A@1O(eAblQlPlsoo8R_kHsLrT1S9\C%%3q!EMifcKc28rU(nllsRm9lg(skJmaM;7OC40MMl'hcf^h3>-/ddEZ1n3Y=p8?K;``=oTT8\S(dM/0gqF9[2M,kE>Cl/IVS/B.'%UF$<RXgOp:p"Ip"$)B6$FOh>SV][1T7*6gM3S3F.PDl#+>`Q(d^u,C*\/+F#"kKWj)O4S&XEg.7M]:7,`f9,84_itK9rHg#X#F7=%6*2k-Gm?Q!c"[\c#c?$DUHOIZI+YSrk(A,"4p*qf%?4\g;1j=hC5sjGI.gU3Jj\5_?G](l@`V7)L5ceb;g[@[1Q8TVRAY]A8m%.A%Z`$&C"CUi&mb[5>DH)*-)kJE`iD%kqnuA&W()W\8=s(I,M=.SO.PUbUV-#]oC&iG)W8U)&(D!_>W*c4T1Dm^VD7(!As+!Fh`-=%P%c5WGT?,/Ee3sOn+4]*+7m@)YElZ*&k*H_P@XI?)ITu1dq'tT^P)LVne"C<he'GTjDA(W]T;/t6u%jLmOq0c']p"pDKhh@KAN-0'S%atg%#H3qpZ(nYJ[jo-5@SP2NEEFIK<H,?QCW,?jr^J#%hHPl:-l)XJq][e)n2YMl-#pN!>4+l[M^DQpsfS,X!q]9+T?Q7QC?@pqq%MI#^DjVl@`6&5u0g&2F8K"E)!C&Z'qB*nHi#-LJR%s/0g_;tQ'1qfa^#CHOT'M!cYJeK-4m1B_SO>./88!>n`l=RCl0ZD4W&Idah%f?pDgY@4R*N*2p^N7Wa^29[>2h<D`CmY6s'CDqVrniM*4+36gGJ^Mf^S"@j%*H-'Wl8rYq*nc-RJdI>%s"hYC;hndq#Tl+n7PYo6%Ns*ialgl2ZQJH303:QFPAW0:l+qG%4\rCjMXEe]EkC3-fQ3h0QLH&m\&&Z+BW6t/jfT2BT$S_]2l5-mHA"1WE2,O<^\%Zi=U`4\-%UjV%A]K7nh*fUA6XFYUHS_D^=A[biDCkOS?B"*8I`ATe1Sn!hK'nOJ%-DOq]@`600;t/uL=3o[>HW+F8P7ZXO%U[N>_Zt^@oh+'K%n'_[-D.<*P:J@$21!XR7m+#'qVds`H:k`82()N[WCdVJFejF9_6_kBP]7rNtKM\llC%gJj0#U1QdMuqmTTB@-MpMgh.D_XbLZc;d%Alnb#>=L$[FdX&-65WNs9S?;K'/Z:H"[P#^RKea?"ESlodj<iR.rh+Y"9t/;&[GR?!Xc`\L=:9B-(kh$Gel8:L1e%GV[Jr;&ZH[M%,XLrQ&tm6iS_"_\LKk<dBp(UeF)D!/"V\DiL;'SI\a]g[+@_l4]+iE>-GOp%!$ln)"c+MB+C:eA'CImnL5QZ4/i;Y%M)8o;6He/g%<pptTF,8/>XHg#I0)++F1mp@[e@=i["Sdo<i%HXqTVNp;%>\>+OT#(]D&*]HQ%$2NJ>^6E&uu9#`pX>d55as7=Q[0/1Go;Wb1)K%%7E%+WKP<K*>qDbf9\fjTAWYPh9,#\6aQ@-lN<V6@J'T:V=FH]qGiO`"/6KDRq);+6.oYmCImk8<ik6IPpj\=!5Hb%cX`Wmq$'rtN%^I&(^8Xp;7_58k.\`)%W"F_M6=W82#$].K"!',W'PSj[L%J%7,A$_!YmND[DEV@,e$ctpIr`qkk<jc4$UaSL:=sPXXORMltFFl]E%%cHub"q2DYdVh%s?.Z%Wq./s?G5B$Gl.WN!E"=`Boo+l9"T$n,:!C%r`,/8"&Yn$ed27E91hfgcRE6!.Qi'AF]sn%^/HE'3lg]^8%GYmr)]eh8l%>N8G-:=KDk36f[SGFlO/ppI)6a>,?$\C=aSf&!,&5IU=\%C\8A(bifrrSt"]>H#C3q,H;GTY^lO<n%/hubWhRL&8<%F1e10"Q;caHmBNKIjAdA;+"D2KO9rTRg`i:mAb'$7d_(&=DBbo%uSV]pG>!hgi#Z7[Oo3NZ2-[3p)atFO,8!QX9,pJLRYqaBd&IF%9-+mkN>'F"_ES+U>>55^/,j$]s08Zk/ZZ\c@p/i:XT)C'a0K^s[%]hibGrXhA0+@i0hfQ*<>Ba]5nhF_?u2Zh/F,NdoaAscs'o43%Z)mt-<l_N:M?s6W,(M07F>-S@Yo&"2WliGPk5N.p=l:CnqN#o-DdJ-Ibj.LUocNej$=#GWi6f4&\thn!R9)];aklTi%'.J][$#:V%,p$:[14K)?b5Pm^f3;BHq>3,'"Bk\!0_PJC<h#YC=C<Qg/EMGZ\8VAI=,8B>a=hS"s6DT@kB??Ed\QiB5&7tSnNSp%s19cZK8KO;%WO*qmJ#c1+R5^"0r[\f9=S2lZ`i4'f8Wje!j!8@H7s,\HQUH5>>Ep,`Y10[L,5'uqn6\kCc6VJ*:$4p]\&TE0[D"Ab))S%-h=HhG%>)^>[b?DiCq`d1nQak0I@Z2F%RVS[`r>/Nl%YgbTQ,[m^dLA$fo/G"D]emSS.\'8=JtVD/VUGcI^g17"f7j-^ej0mZ2@!)[q;oe<%%fXF/EAYIl)6nG@NT'5LQ7p&Tc>qWF%u]h)k'T`4\E]C+Q0"kIJ,S"@UA=hTcRRV`09D[1>5-:I[93r7F'7Db+P22[_XI48`QM--%=Sm'p)ua^$+2[&?D)Rl*lgpNeJh)tP9PXSh./j\N?*,$9DSJ1dL5Q;aXJbjFbW^Xp%Lo=S^XOUZI5"(I,Oorq6IT:VrOLGoiR9I6%%DdjgB@4@m_qk?=mXV>lI__?MW6mDi5N.ROEqf$n=1q9$P5-3D%>:KcbV!TBhp9X)qVS[XIutEB7S`kpr`qYAq%LUEG#eQS7;pOa%mJeV8s)52PHb]K'EnL$IUAR5'LO7Jg`eWdL5fJ1%NrS-c5r[a%@n?F1TV^,gYQ)Gqphs2c.3='?04/9P*WKl;p!F37FO=dHfII)R%ZHB4rra))<.hX5L78[JP)SVeZa2%T#5FJ7ro'`0;W,pijlITopf(mFXb_CW9P[^Z4.reQ*^RNgC5FKsgJ,aV$rEHQ(m74&F5Jm)W%c)ZfcPD2AA'`-R45Bs-ARtQ>IX#2%7qQ"`%J!#aVe#Y_17%@MAc'r7p*AQDdf.cDo/DaiQfUh+tna^@P2_hSN/4bA)pX/M/G(!>Z%1qa?E/Wnt^=K/,@bG+oW9AWm^BCKceT-M>,-ofCc?]sH_jbY]L-GLDSWq"i&DOT/Ah0sSA]5:D&d7.q,,#]H[;Oc[HK1o!D1*MZj%):t<OS"jfP6#G=[U1?;+R=(@FZ%28a;SQDMCFZc-fpLp3)n/m&<UaJ:c$Na6=16bgICh6E^UXNn=9@IK:.P(c->7'hC;-VmX#Lp_%+?lDlC;];G#*Rg;*L<GSoM0m2T53]*+L!dE20u%n%%<2-JTNd"^#Ri!R)#)AH(Tu"lW4O?BNOZ\8V16*`99?ASO36l?YOUT&Edo8%=!#0X@nW+W^DN.h<X5P'FLsUkqV<mM'6C)/]_Je'd;Z[kJ*md[>2.[_o^W3)^"0@r)f$3bEHS5iB3d13:2RRker*k/@e<H31LNQN%hZZs":?h"(Iq#l<NZ,;hQ;u^Wh$pC*66+N\E6Ski>]6^Z4/6`G(e!J7S(VCe6X'sHh+bZD0usO4+36O??++Ye`+hC:@piJ;?A`fD%c=K=hWBu'jmouN,$Zt?#fk-FZ]=cF4k3\k`nBAO?4j'?F9'h6dmF[lOhWO%66YoKodX3qW"k_U?++)YP?;%#s]IER;ID?B@-(Hq@%nM.&anV')hWA1+d\P"JYDJL*pYU=94Z4ZK2f,`I/5C/7MC:P4]Bs$:MN!sM7R_\C5)roa`LU?NiZt;+:fl1t'\>aU/WoG$,]T2!!%cX/"0mbu1Q5q``5B/E,\<h(IFVT\nC3PO6`]%h\h>S`IJVZmDu)S[n11jA]iD&f1na(Qp"^NR1E@l3&\eEO'\\7J?gDFI\SANYgU%&u+V7jn3+:S'4l#;crDFN/Hqss6f:$FX3\pY]m',Wk=?p30bgXA^8@REOrf+-"''B"AIkNY?H)=XZ[&-[;K<Qi=$Q1T?\WF'pa]?%dB5jh^p2"dDeLq@``qB]3hse=Rh^m]`3eBl%;Hh.!ZQ%n"WQ9rea79YBq4S?g9glH_I8JeUA\n>a3CgB+ZH9X`m@lk]U?NH'j.eG%hhZK*f^>)E<G:/-5eu9$(alBLApJF!4s!`$U92&oJT&d7hq@YQJ+mP&i2.l/BFK'+.,hSYK]!7)^7-4nI#%OTTU_"])mfV@3h!E-%Y'qf\#/+-6q&Lg?6bbOff(.R=)b.eYZYnZ\^q\e[d`*-`aT%!lTJ!S=lrunm9O(7qhZUW"(L39Z/2""_CtKHO"lh/#Jbt!aE[9TK%NG%.39DM#i2OXQs+5/](d+0B6#E?JQ[FBH\3`P[XNBoAXm%^k)Fp6.iGg[M`$&Z7L'D<S+gCP6bY8iWWhaeHgX*6:7fnaBVZtgN7%J&;Lp@<3uF>q>F8O>8FX^*<;?bK4eJ0A8]c!"(c.nq&MA!?jU<'160LfDIm]i"\0\LhRf>D(>qeHHK?9A%,\fERX\,AR>j.)E1.C%1mi/_,APSqD]f1WG=Dr%5o)36V[K9QSI\scb?"]\N3G;B?j"W.%G0=;ji=`\YCa3'_Y'Z9ZJ'7Wg?=3gPrntMli.30X$Y/Mr4X=-%JVK0hLMu1;\G+:IHSZm;6(6ZnE946%IZAZ&&\\TDE?J?TZRu`C2Ah*jQOA6mZW_NnS#/'3Fc=FsQ5$T_qi/jTT[0B5WECNt0+a+5%e*`Z8Gb$5>k^/WtmB7_VVD7JHLUHS?,]$l:VoC&b7Emm]B'Yc(%V4m;Ac3Qq`]!o[EMJGql/-=F)Z<7_Y$ffM:&^X:DY?!@_Qm&!%d;4I*_>1A>@+cq]B#Z:#M^p`pe>QK=c;J7X?-'<a<_]uBHU=V5f=WaG*a,\=?RbO0hVlPTk]sd-Wn=$;=YEEh]q8$gV@$oM-Ga#n%l:lb.V5(IFZf4rl4U]#XXgD&$F:ZE=F61P?a&<OR$Hn""A]M)I;[1F.)7(l>m4M&71ptE.\>sEC14dVIpr;#la>XpY>k>feekGH-%@2O8/``_(JTXfG)j/$?po8rh^jamnCD(;r#N!i0.]7A"dltNKWY8CAbYRg)s]2i2c<QPp^R[c5R\AJU`I6M"UY*[J_Dn_"%,;GZ9%Sa-+J>&\MLY-]e_7</@UkF:7H^6!G_S_P_AB6lLdnbe/CHC/pITp+L2O$EX5q',91T5SAsn+27Zr19Q.(NZE;SH$DR4s;qs.e)q9%CP#oo.J9OnLC_3Oprfk3Um&e)d1bg'F#eOCneluhgY;?XpYI<giR`MSRMN=0A,KM>NN8,"4oF$,Y:8j2*5dQ9+)rBu[.6]p5",tO%CXj(\foDtRiU[O;nmA!lH^>q(g:bG]\P.3N:#K(s<6iLe@oN.6j6:8A@n])VlOA<&jkc%^_t]o0J*CuWkgV!PQ0+eCAVrThT'%o3%Qbu%P7qLJteZ53)Iup5!iaVG&7nb:>j](no)U.Bm3s+n4r0"+!m6,#bgS_mSq-8:nQ4YoA:QUqc9a,nb+^5L2K^@:=*qt-,?iTXd%BY62o.`to'X]/d@O$_,.9.)cQUStRASfn#,98ndQdkV_XVt\8_Y,>J;?qnFtI#boQ&:+HR%&UR`rX.Rif4sX/_pp3L_3;aD6`iu/%P.mq9CZ=qsS3KS04C4qgS&_4E/eO2,SoD@@q&7L!oaZ&:dJ_?^qH8)>p\(&faj5`[g*K?$ee6%AicRu1)<uXI#,ClSIul=J']luI%S*:ucmR;1576^NmgeacV@fB7;\)rZ7r^c\,c@+*8fgI\X1d'Mc<HaSD9XiiJH%P>>q'_glVT3H>Z'A*4pF\[VM=XbI;?p"qbn;lM%qh=9K.9G\UkGe'.5RUW`,FXYW=&7L9Z`rg'VYeKLR-r/6\uI*S/MT+s'_l?;ImNbs?_,$S`DNWjpN<4pSBs;gnWR'3RG"a@Zrl+U%D8i*cD#3/NBR*2&>5gfCr.cp:iFBS%`*GQVoCTr`bMGf5Z]g?oGC2;93rS2E7<W#8^<#F7Vf-3Dh]Wl8FbLU.`eIji>9G"/C"sfQ%?*#,B:*XTb+2q'bI3G4IoWmWflt.o!>=,^b$`]l2Tu3$%ZG4)nSbU(Br?kqt<uLgWcM-A5k`nC"gV&$Kou3MD+22t_(@`^)h*W8C%-sufFWG;4H^hh1Ac>ODh*'-(N.D(.4T?=oCHs6)-o]^Yce@0Y^HhHbbn?nLp_pFt>4$#DQq2TA(gV2a1O8@:O4'>qQ.IcKCKdL$<%I/,S_3t74BI>-*/i&d"E;nc]mpu]1NN^eEXOAbRRePfa\V/RURDRfQ_hsL?Zn%0\/k'W5.LE.5nq>NkV]jCB(IIC0]f2o`#Y5"I[%j"4W=GuXEY+S>C#6JSPYYkRYO)jTD1^<agTVf0!oSGIYfg>!beV_@tAF<KWTGOBDIdEF?.O%k8qIdWr=mhbeXJLBZJ5PED#g?!M1%^V;^Tp)e/'%fFGj_l#`J\ZY`!YNM(`n5AKIMpJ:IJ#R]:q60Zs6iYEt[d&A#!7,_dn+XRsHuK#\!(Lkn(Bf6^"qV1Eitqa*X;,--%g%LC<n5gr@JWP!/#t2At]0NHlS-F6.5mtaW0cJCC[;"RWID6Lf?@P'AZBo4#^hJMG#E!`=_a+%n8d\N^%V('F5\)tGU6#8(>.HNt%)"#Hgn0+<OG_1M*Ff#h>L/RCjJ*FJN[Cr&DDae#/3a:D=q8\ff],>GLcYoF[8*=C><[Q".Dk2cbf[`L`:>WS=SK;\)`V3-9SeJTp%XkI+>BrcArhV%2-:ZksBfh"<igRfR6K#,h4AMG$mDa+L&bM"YKbYljH_.DgYR-%S;i(<+3'>-:hN!(YG4;iP9cgHFhrSD1kq9`2o%+)gW0i4.;SKRD%5'\_t4Y<qd+?lY>/s*eXbbWgfEh,N#?%%SfUkFmh2hCqn<m2h!'Y>4AV)V:6@D*raZ%C:9Kco`)SgC?sH@bWU^%EPF*]^;RMTYP+Tte)qri]25La\'*)fa4kgon9FhQhRV9V.1ahn6*]pf4mODT_>\9n*W!YCQ@9oVFCd+Qpn>sL\buGTp]@O+\2p^E%_U$Q97_!_%/r'7;:'o7pkPiPGg1WkeR:nUT(5k\Fj4A!-Eq5Wh7`t7-1NIu2\Vn+]I-6X[;&)QWI.fFC-^ajkm_hIgJK<huqmgcq%.eRs[`@YT_.Q"0m4H,6N*Jj'SGC&)3Vk)N)m3rs1ZsTPZ2L:;LTDIm$loWgV?LDG&dCY>68[RWP#,<7V>!+k;?`TdVDYPfFhA,U8%bM@g'k\2t7c$+A)NG2epiMA*n2VuF.m\&FKMtr.Y?7ZjSMT4/Z==TWJr4IrYpKOEFXo'`ihOj6h@_MPZ-T5m-Eq*i>kp!9`lMYt5%1PScdkI9E^phfP/.pb<P3K<dZLAcf*9KYkaY-7-tXVm36RJH)_U9lim'9>(bY6bb.3Up7$X`NH?l@9Od!^5sRY3!4#=ZO:R[^10_%rCW<b+cOSL$fRg-aRba\"FjO1FSJ1^]ARTsWkd6^b_R@4Q>_K8B/_+BLYG\bBU%fjkF'p,iI3/'+uG::.XW!6gL;F4)2a:cGo&:-%qi+]Ydq@Zu^6KBsMJZ)Yhj$/s:eJqe;<dR8%7t1C;874fZSdr*LTRO4't:&\['qiTofL\WT4B]Cq'JsraGj;kP<X88<+T\iIB7,[%ql,`S-Rqa]](2`Jqr,9[WBZ'cSS(MkoggkLrp8_=r*I'"&pe;61>5U':%U"RV*")&oQ71*B@;t:GdMt"FjH6nHD$K:FMTpilfld`%=MN"$%eOsT$hR^df\P<H5$[LBjo%BI=iVn:%n:3Ef<$*+4i.*!oDWE1b+.PeZe=a1IPq"#gi)&?D=>ecgt_uI%`emsbX_E#gh@H4%C>*aii3W+OIMb.qa;c8g1a@dB[8,cOm<7gnE-s!j8%U/3PG?$3rT386I&CrUp36V=Il-SR6cZH6VK[E03I*V;NJloY>(/DW4;lcC%A>41/8>]@+4';jpIECWE2bs0T?[=0+p=)guRLef8?2LdiqUhrndb>#?O0j?n+/I6'ga)ie4pe%*P=F%8beu/Y`(WcO*b?h-fib1P%5Io$Vh9VQn[<+FRSsA=*m)rZ^Po[VH<-!iB;)aimFs=JdB4!.?h&/?9\*lMXq>E]OcX.U(Rs_n+S"BEK,)7Od9RAoO6nVo4PF#\;%ioDm6R@J<oH0-qfT(GeH41V-8_+qaNfWC_e'iL188)`U0OXY\A-^1mX>dumX1'5k09""82f"!YucGQKVl1s;ulg=MU;:E?fG%\du%2L-\l^'SLLYZTRRm1_Xk:ELAbhKO<de4jR.W]+5BiZl/*]8WcWc=KVi4^HpdJ]l6Q_/m%!^W>l1ZEKcpHLfC+9:rcOG$4%Y!p.;h%o=XuZH_"I<?<ZqN/O/f5Q1T%B'>/'KQ,n)-;<G$B`=MY<<_FE>%k_eG.L@>A;`RESf.4&$aLLO,5=_bXp%Y1`h@#[Mm9-K=ZdZDn%gn^RfpMM$&afCn&Fh`,N^E2sT(S.=ZgK#`sE>M2J,Z!n^eSa3u4_d:_h5#1X]2qa7542(knG[jJGL:Yk^2Kt]fpA3)_on7:4o/pL%f&L)7Gl1\"h&AKeEfo>phjWsqSVumeVrhdnkW*\9n3(E9h8e^AqY99npC\!^JhR"fHhE_pX%Mnn<:-`i;G@J1Q@+aqf<2]+o+o*O%ah8G+]_^3hmmQ%X;ITQr)=kK8f;DcH[T07jf8c'(GI>J%\Pen5b#e97lZ0ObgUo,i-Th"eL3>Sho`Q5!.K@m7SJQ$8A[hWc]P;DL%k2>q^@Rt.%Cm5GPdmcR.J)(`559$`Qh>P":CF-s..#<S#W=jMmpSK0B8%]c.GKPcYD5Z9\9Y/YnAA<J6ZhMri?5=^\r(tOq_FN]J%3qsQ$$\pl.e8P%uZRN:@r>=/_#Iu@es"NVqJcC1<1e8Ze#(ou#Il?'lleB>42ZGmU,e1b>Xr<plc;)?j;5\kb0G_/r?sKkI]oPZ\%hjGkeWP'CqT6H!XJ)V.%`ZuFO\XgD#W$g%bYbhB7,J.2*3+k_'X;^?Jd]#beb4:_VY&g[$FUm$6nn!An2=1<SoZP7MAQUf4lW5=:%Gr(N%]r_nDmDJ&N_V(l*r@FZngY\5a9?3mU;tT#9E-o?C^O%;^9!NJYE\ckF[>2K&]PfaASa"_bdk0\D1oCKMOuFaY(Xhh[nTk!U%3LMhUHqq2uJhZWna%`l^g%I&-Q/$kKmj&Eea4',A>Y'*kao.rP@Pp39V;%nL`T2S\<$94AC1QApmIn\!`T@8]Ve5P:4n\>UQMl&"%996>`8<SkZ<1u)57$!SJ4J.nIma<3Um5n)tgZ$NDCQWJ5H:trbH?r=d1\'5'#BdN1HV#:Nnh8+uBm^K:mKVkMn4BtJ#njT8mr,%J%[e4[=@WHS*f1L7!R?%-b0<jJ"P\op/cf>,F:CIbq4O(OI?UsT7oSNC/0-/M*[SiAm@*!#kY;PL7T`,O`2KB9&.\,`oDu0d=TGWQ`%06c;.Z+>K[I_KlFHPYg12Grf!Vf"?C.X'Ic4I<"GPO@$!?MF,oRI1<@[ptWco/p$SKKbOt894a3".?[)J,>C&%3+&Ski'L0!n,*+%mQurCa4hFMfsBopYYEq3e2re.mWC=B)QYTAE>X`')X4t>*j?ME'SFM$i?3*+gXTlVc*E$N-#fYl7^(3lgZHtV:_12Mg7r'f-?Q'M%"E6r(PWRuALjV6UpEE5R'[>BEOlKdM(YM4D+I)Uh+"'%*Je)/o$T7GW\[oNudHB^jrkSGRE0iY!bqluBGD8e9&.0PkpK[@S.(:^;%O5#F:T"DmmrT;/^/$5UA0]4IXATJQ!PWlD[G]=#I_hZjraH-ZSqpO.V@Pt%AP4GQ!1fDlj7l8smS:B[9[I(*';STcjbJF(F<%4"`%B3UYhBCbY*Y72AYoMBsGb^<BYO1@25HCL5g;l+m8j6eMJrD4.(X[01^ca7k?@,TGEWa7VSc?NOSF)[^#'mIspfgt_)n]##pPC6R3%ff4Eq4he%HZ3_O#=tR9lSbZ47Ze9_KC.k(>n\JCbqh`Wc<<:>nAK]IH4Z7q0iVh[obN5@[,)O+Oqa!CRd]p+t9onqujgA:QXF"BX%Kj^'bgjug>\HHtnoBE?$P'T4M8R`1(j8J_"\9/igE<k#a+gUce^^+(RLGHWqNI3]BNat2nFY=O_`q,4dJc\&nd)&b&9pF!M.+KFC%;[YuKm7qQ!mPf$d;sL,s\%Dq,e,J_9DZ<9\[ThA8/W&=?c82&"Wd<'OJqZ55Zg$I:D]Q78daddH6#D2$j9/4;OY0Z\B3*;Jb5M9d%<dkaW7jma[a?f3=_5nQWHnHqMBdHfk-%clo:N(Gkctq]i]T`>^2$`CFn91%rG4)g>`Hfs&0[B'G/qn[$VEUiZ>FfWpp(BtJd:.l6%b6ZZ"'qfa"@9,(+H[fduE#@O2V(1VkmDF9-nF,&Ae@A6."<5h/G+mE.or5-CoOA,:d2YXVUH$RiBA>ea(ERel#:FoOA_S<1GA;#e%J1km[CS%TQF5b$_43,f$4U"CecdXk7B2hp'C[][L_R'I^]+L.Rr4N&oWk=s8bbodP4aD"8M*mL$>He1J:mum(^SNFOWoQ:=`aHge%0M"qWHQfh$DZ*6k*#t;#6hS%@%eKAFS!4c\D<4Tk1]0hAR)Dcjgt<!`a;OZa@t$A,3OW?d:(L.IBh;/!RRU5CToSbFW>(%:I!Wk[%>6ACIQ=e39#I1oka0O=6gZ(8K9b+*VIYEa'-81@</fd&j'HD$'7FEO^aR6</9otf!O^q6H7>*q'Mpl2M7\\E'ksZ=qqh302Khs>,%a<GnT;#4qeX-f[7]rB=A5,W*74057?6ltCJYe>NtZ_0Y_Zq!,Y=uoda`J%L%[/\!0/1lK7$L<>gEcBJaLeirq32B\;?O<,`o#Vdg%P&'6$o_jq,P3J0iOU\nsQ&,ZHriZIb9<l:P7=/'qW2sPG4TJ&[A_&#o.qt$_N^II)fXS;KWCr[p1[pKGCh]?VPJ'C!a,AGXm#d]0%0+CO5*N]E8G#iBe<KA-!V<5jUe/D??[j`l_`e+RH4YV#Nd/J;kDjD2K3H:08RkhFt!7KA5ebjJtaHjcq+_E<_`bS$',:33)fT4K(%ipj4m`R&NN<P:O;k*+Oh'dEUBi-#r`C'_PZ?-L&j4RD0X4)sb!3%rPIp9?3*>dD'(?/VTNl+XkXF,f$hLq,9B3$HVj?`,^JYTnHa%kmZW^M[9h)RVg(ha"6j5(F%1cO'B]6\3TU#ZKb+rIf5Ws5Q=Eh-^9'9;V/g&.9Uqee7m6B^b:]\V;,MJP3]k'`8:*\jeiE7j9_!r%gMsC$>>:oY>p8@Q)u4ThSMbS2VbV&^Oj_ofG8OgZ@F&-!Q+FMY#Y7ZE\(1BO;2^-@.gYPhkS>*`0!:gF8/FZd&?X-:IjI,N6#)"6%dU,[CIZU"c;4fG60q9.TR29o$f:J2"B`7_ee6IWq@*admma';q`]AKf;#T:o/1?Xhnu:+$m!2dfL&iLkoMtHr-[c_WR8Gr&VF"S+%-[.10@Xk2Da0UI1[H=\&1(.W_ao9fZ<5%Z8X/XOl3J]b1-PK71OKXfS`m5kufs):M,i)PU:DEbSJkl6Y8uPV0T(IU=W7TQ#(,[$"%Bm4_Up=FFM\h@>AU+LhVU`=2,$ZhK2oTN/9h>ZISf>f0\H/mAu9XVHA!4.""2bCdRfF)4Ncb;Obq!H=0rKfK;2\*EkmTi4(&Lk17%>=%s:0mHFeKL;C'^_V*2Y;tff\4gNC3O4gn+69$R2AS1MqQ^dUkD"')8g1,D1aZA;>DX_%D%t=E=61]PMhf-F8a-'qR(Bl1gg[F'%4h1A#9cf?^SD'Iab?T$,n"39H`aido;_+3SrcaFi$/-Sk:JN7-)end#m[+42kDo;o0tYVJ/Nm$Oi@^,=VeKk:k4mc%WGc2SSmG@l%rcu_::mF6)h%\s[\_Z>bIs.:<M<miBY3mFIfkh584'h%@D\6=]B.>5=lEA+dh,Q;=f83P>i;E3XP&lt4?7B9P`j06@STcDjWtOI9%*O1p=r[o>jRJ$t[.RY<hlS.5\YNQZ@2f#UT&Cb#W"\5[gGM6'$WXsNgk0A">R3deVaRWVMYC,9=/aX8rHo^XoP<E7D6-Ps^4HsKX%o*<"OQLXJBZC,P>oNb,b_LBSTO1B)h1r,VYCud[8ZU+YmT%tF0HcCER0_ofo:8IdWCEAR<L(nfUJo&BK)snsGp)8;[inM3.BDOK%%H`W5ZG@5QYXWVRL0;-X*kN[oEmU?Sl(Air/GLKn8gCPg5G8K;^U@2\GeH7O=jBbLP2i(3%dGVAU\OMg1:.\mm$I%Cu`aSsiGVP:B%35,]1$\RkG>/%\2Vlk3cmF689$CSk)nDm#4p\<mh*NCfKEgXo`Sr,THCg9mPYg*K=Fi8(GcrMIm('m'6>JRFa?ea;ZSqSCt$>s\9%Vb!O&m"%jorr(DKV6ac1$(U5P1`+tF>&O(hCGgQ6^F!m.Ai"ep+tR`gVp(%oCQN);)NQI4g@fN?Viq2rL$`6H6@87MC@-/QY:^rn%gJ-e9&#VMTVRFiHNd?<S0;GH.9oX%7eB>j\BrT4gnJ^Xh*Gt8N^#.*%NZNJMN&%$*aSD0d_/*a'gO30>AjqRY;t)(L*>Z^9/,(EZ%bKTADP&-Mt(DG[>K[$.@YfOp^=*/,Mio7c1]<N_S)^&qI+:e6nXsf)$cdRM_^F200YdoRn!FN98GopV/r[euj>:QJ(7to>O)8^M^%Tdu*@A,W-ei)?Jcgj*p)4a'?P-=mG@j<UVKd3^5>l:^_(gX=sm\OU-F>2lIZ1"i^]hg^&FNB3mVi7Od.f\mHkI<LDOU5fU6.60Fg%`,u-UpJSP:9%C*oCjaF7Y,:->RAhm>4UpI.WL%clPAFTuDB8;%Pb.*8ei-1fHmEX2Kj+Hu4*+7$Q8meumbJcJUc+gW;-e3b'M.G2%BWXOWb+50MP_FC@=:S+&(PCq6H?'Aljn!Kl_-SN%$tX=6Abmp=NfR$-[T/m1E$$NAo5+?9)5EC=Y2C<!W[e#G0Oo"6f]r=$_X'-C%!:RD4rp>0/A%]N[X>V=_4&/H?m-3hXRbb+/EsIi0i!mce_e49l3g*S+jiS,%X7qF4dQS`W4!t1T<3%@OXm-%P4g$Y]BjbBGnpV4q%qp(Ch_!<Q+)GT4,"BGc2foG"Ic@%n*3Yib/1%Q1i%TG!tZ4JP$FoTkN"M*.+Sf@nC#VgFTeR0?*O&I"bIQh"MhI1I#N&KZZCE0ur%W\BJp$)"]L,OU40RQT9<K;e"p,?<aP,,Eo4^#[#W38i@V.h%#*c%M"5giW9f3P(>n.62R#Knb1d*JGCDTs&a8]%/8)o>P.@+V/#B%=?NmD=kbC5Efl,7GUTIZWE+9B.)>Y"m4/lZLn;-MhF1BH:Ke5'I\`qN@aEWe/&A]Qn(\>9\2m<'_K#P^K^,,O2'+)b2L.@_Zl8Cn%0VD@3+ItV?qm:?V7MjIiZc=j<GJNOWV#+nIMc'k&,?)G'"a+I<p>UBOeiK2N1Nf$,/l!Wr]&+UE0.$+JN4I_e4]geV[bVP.M,@[l%;Z3&8]+P/"XPm(/UZ*i:>P`/>O]$+8;sj931eK1Jn1-/RanR4YS9B=l*,L"o?5G%fhJWii+\:?P'IOZ"'*2?g`QlG:Z!ik+0ua,t%/m?th!Wue>S(\lgJ/Y"t_8uHI\rf-AHgJB*5sHH2a5G.^.UVK^WpjZ`18hmN6\ujY+*GU`K!iNG*JUaA&"'%q-G"cA"#HUX)WflQ%#mG.@dSHn;m9E7FREfd;4-gDL`GRL0c!\,$m"GWtkNdqNjJ1$%7?M8INuQ*5[@F/%qRGp5$"RusYA0sHl]&FQf%cWDS)2Of2W<q0%D[_iVG_4'cY?)k'Y2o2r2@+S>?>Y-E^Bu:#`!=Kg/jOgP"GfPX0!'-I4%&`j,b2Ebh#GA(8OGbA/;Y1QUS3g9HHi=-Hh29YWQ1FU%9]rD>`sg.`4Lc#2ZfgKVIXADG\JrIsq-#25gjckcYZ&5mEl.6W"0DE1%t&81S@\.3G7-mMG+Y9ometi11D.PhO<1S]W7J,"q,+9.%c%hl5[*0M%gTog'fUY6NQ(uZr*+V>sTD=+e_j!XF51ugTZ:Uo6S!lo;3>=VMWr=Q?*<8E412<XG3e1mk]_*1aMOSt;Atupbe99"!%IZ1J%gcsX+@9mJZVjbYp>e\ePq=g5$LJG0SDA4&X<[CoTpL84=C30!fH6RM;$\&gb%I<D\D;,g[^'Xu5JZ^dE$YXH%G^Z+b"!<,&%eun/\;^Q!uWToIHFa0hYOrm,[q;?.aA;OQ?^B590k,'Tqi,\1aM%[/CgBZ9q:,gQ[fR5_TVmP7]iX9m;/u5Ok5kGfSXi3">]Gq&Q%ksh[pIYumVm0D^)YX$X%+.RuRZsUEaI6dLpaF+3_3ITE%^#!sN^u3-PehhkXDG!\HVM-J]T>/=8O3I;f\V:`Zdhe-;<ui'ZU6pcj%=/2t7mpG.b6(GD*F0PtPSX/]^QtuB,YIj1$2*9Vk50n#bLQEI1+h9Yl(WWkell:VkeG"9EfpD+o^a3YP*_Pb7k7#'k+^S_@a_!).%k\'=L>WsN?4U:Q:o<\_f;L[CA\`UY'#?P`bd)Go]cIJsUfs-JD,<oYqE8%+>[8eAqe>]<s3O6^`(MbXM\_?r$DJFF_/*Gg-0*3W@%F8!i0iZ.M?gi'CnL!o4nZ?LdsLUe7I1IM@C1TeV6f7qh20J<J04M,D%b$O#f7n8JJr@OJMM!CXUd9Y+ml87*P3X&JAU%+FtPC)$3%gNS`("(eB4Q]JnYWh%-<Bj<W\k<AY&SAnLX`B0%H<bi6*XhBtmUULqkT*kPrS6f_[RX"jdGO)?Fb)^c2b1Z^I`Fq5GF=*c6OWFB]%A?Vh9ILXl>/([gOlZI_1,4V4S5ZssBAo@n?/mi[)_BU0Ep-(*VM:uo\*biPAPXk\TFo-IO.uJfT^:-hC3189FGNOD3*LaG?"^0O*%MghS!$C!SE^8X+&P&Xh.i/Fu0AJ39*GdG$JI`::_b=QN_R2U21\*A;,aejpD'\:P,X1+3n*NPCli1`-oh0j@$g6!%pKbJWLXqUCG%7C+bQ:Q8M+1n7k3"mese'<n?PrfG@mNq@6r6!TSl"l,'/8LaY-<-Rr!E,,IFVJOfU50&Y@o'MA1rY0d7->6>ee[=6gn:O$AI`(.l%0j83Y**K#fNiWnj+2,+$rC]f7C[M]bQbXl0XA!'T!6YO/gnn[^5>mmX?-rU[2r<*0<r]4Gbu&1@pqjJAR:?8)acrfdX;AWfm^o:Q%bFQC*Defg5g,JY+h+I=*L-,_D34`HeP@"*tQfrkNo@gH$S#'M,QN)gE9/S&kH>Q]arGG_U30H1[M),)gA#18]bJ/V?7Jjbih`83M%K^U98A]6D(l*o"j=[[M[mMmb].dP?tO5AI`kP/*6oY.AE?4"6c4@%O+d19+L;q#];K@FL&[5/oSLUD%"8%.83d,i:!qgA:`er:.J%=FOo4DnF#mhbV1>D8l6o_,FhpYi4sr$bDn;?TY]QpQ\lufS%?B#N5r%CVbJmg(u^p@^Glf:/g)O*=uC-G]N8S@sH8-(j\KT0]\dN%J*e(?n$McrY$,]+`MbbJh5pCBY3ON6prp9rA%e3hmY1->n\X0^lF)6:pX.bXL4Ih_Z>ZraRttH3g\;_]h'$q4\t\_#0+;Xj+2U^a%ZOu22(u?mYSYbK9f;RHmpe'c(GRRKn1i,3kFHG4n0M??UEH&1&fk@%!F.dd-EiA4t^%5YCIjHiK[5kIe\2!6.IqG`5$O/*Yr=W<H%lDF:U=`%l,e).eMe05c^\aaq)HOL_;<]@`TEM7)do*bF2g:D^m"thUB?0eW,OOaJt=l,+./2"V'AbjTuQ!nP&-/lMLl"ZX`A`l^)%66=a5eiWH(<gDDQ%.dW;5I2">pY1En>Nhp:j4\NC#ENqY3j=:m_eS*+(%UV^7DI)>_fBVi4]_&#>Knd?"::IA7d%d%\<_/_V75dP%H-Se8FJJ07lq_Rt4D]tFm]!efXafA/\_UEqW3'/$J:he"X/`t@1sMtFh(/F>3u--RJ20tLHCt5ki7m\<hS/SoLLRs2+)?A6pu2-9%l/L#W#4YbA;4:b);FuuirQqP:USth,n_t(WiZAnbk#4`_Z0hpr:EnZTcpP!MT<7o@TpnC"]B?#&X:W=`6,OZ-"^++A)iTG7^O#p\%Vs+%L-df0fgR7B+;SB`9fmd7;<?P\bZHs+QZ^Q>=*_.=Obg54YI^bZa+-.-r3Nd<&n'sfP/oiH1*I%]YN_?Z%"&+_j4=>K6!/&=d%-4rqjhc`I9)Wq5to4kQBQP<#s@'U"3A22B1]^?L[/M?7Ka:Lbj<"l"iXIgbRhM_\JU*>F&^FJJu9,+54,3p_oUq"R(]F!%59r3#j%$lqb2+ENuB1Q[_=&Z<JJ$;FL[JdC!tM2r%7W-C2p+DHMM!D.9fQ^2$"SC]dWM\(lF%1l6q"G#G!=A,Xr61bf69GSXNO^Pa+1qS&8%To(&)Z.fhR#/iqa+C5]@WhqJ]?p^<X&PO!P*dZhiFHJk"<<e6pk64^0#V]:K>VZ_i8dH*'TAgS#0!;619MgDn*+qT[%G.&0bGqRM%2cYOmjE0BC&)9Ve*#Js:Y4BaiL!sEr!0LiaXeMQU!^RMh:`KbYYDIkt^_e\0e9,t2$)C5E(ke5MLa]O9QT8%j>QE5qKkM2)9d*as%[,[S0aM9,9-LrFs!!<@1KRi.,"MkIG%&,FT4>/J^+H6_`'7tMn+DqT&/L\I]:/P.a$0;@6]E$YR_oXa*#l;?4"B_eJ3ktk]Y)(H.%82*J%((.8g)QkVV":g8)'VGY3<n9QKENKD+)ib\7OamS)[/dP\3KSNOMfT6(,sim(5U$61UX%S\gsU3@3ItQV%hF5?(`+Gn'@aNA%Miq-SKK-/S3#VM,9;k&fN/U!N9_7:U'cLe+<FDjRlJMjlOTSaZe^?\c'V$koFBqBHlaRFT)h\XhUMt8sD5'W6<D[th9LW#r1lu*B%8,K'4hMYnP&>gm+YXMLM'(kZcW&#&9SYjA's!:Vp*_+^;(f&Hr.LfD_;<]Rg"Efr>^a[Hi=6Et%I%@aB!)Ye]?KX_\90=u^"Tu"2%bCq4O@>Y7l,XMXp)+&F2"<(+-J3Ppl;8LDRYZ<Xj:r/<p@%COC!J4dTK0A@JiWT<2=iTJ+!P:0%&Hfj)MONIG@0W3pK!`).2^(^*%83!M?%]i2T&00*R'BUaC0'"q+,_0<4+L"m-\I(o*5\CeN:G=@=o[Dg8=.)?>[O%3"EtWndFWJ^J6<$fm0M.&VYfIq;TS3X`_1hqX%7&kC<:t/,O^ffk>/LJM*j<Nns`d"k03Z9&E,TZ8#H6d;XBXGF`!oa`1K*IQkBd$OBn52W"JlPeR?6P\R8uIU`SjP]`kV5pf;&s4J%&1s9HR4qBAJOudE#Qs#h0+0J$V$)YUNR;+--M(V"<!JI2(!HfaK8h7l"Ub>^"lg"ZK/@gap]lKUS9#ZN7g&h=/>;n#:bbCm3XKdl%6.?km$']O.$rI81Uk1L<i9>cg3[hFm0bd^t6"3L'!@<7he\TcZF!)<-$DdfJ2%C%G,b_DA&H[9^K=mn\.87o&N)UK7S8:N:'>fB]%2;9f@6(Z7-MZa5%]G9o>$m&(^g`Hr[KF8d$ZN(!P%fGR90P0`I5a#*N2^5aO;<A_Q<-0Eoi4L6h)3bp[;B,`?nnfL1i+NjWaZPB5%TReUn@#Ya"X.X_AO?=O7#=)*';.'N,AJ#2E!PAPh'f:r]@TXFS%epVPKP)G:oWqs;r.%4j<\Ok6!)aP7!>18,^;,n_`7kje-\Jr2%Wa)ZFHGhf_P7;MkkJ1JZ_)Xh4E0,rJ>iBW2"gAR!e8]Xe0;oS5Tk=rD"Qi\Q$=K/CoE(&R$B*aD*lM2]1kL6_@kUY>!W3.P5_qi?%:[fXR0-Na5J=!p#MkRI8+H4B8#Qhj*#cs;kK#%U*KVb#L0lamP$u[i@Ut(aOPk4,;FANiTituVqBSseQfdJ3Ta8i.mLPl72PS`Bd%8@hLb!JcdZN.Ct(6qn79,!an6\cC]CL8#i1-mbP[U5J(6oG-^+%Y^n_Cda7-B?Z"&#s<NOSdZBXj*;U[`mAtg"6d62_?_hP(mXW!%6c&!hKH(S&AI;OYC9VG.7N"<V_4YM(4J7pHjG$,(KFuZ>YWsBnGRehGU(\S11^5W6d8=7q;.3cONJT+df6N<^F`cd(eS.=B(BfB'%/kY3q7?BVc9F(aNPpd.$5dR/^BUL?#-isLD<`:qO;[F1.D:Ajd,EdK96'bK<-P/\WCbZZe-jL=ersKD-=rP^#"@S5[!\!1Wejojh%!cnOk-o1k'(Dq:&3%fc4Y"%!AQO5WTA+l/("-P6p:b]cF<!a^/#cGmU-*S:U2u5RhDuij1eeD5+kXT&8=F:r\7DC@Y+BW'X`.P]X%RP6IZ_$0?OMiaX2P^Fk\6%E4#@gNl<J0aVlfgL]p9a_84!rE3_MG,]\glORj=-I/N'b`G/>>EM%SsBWBT@[X.__='o#Zq*L^_e7\%!,DU=`aLd%_SWL*JFnqYfSNiiRLVUah_Y=>6C]0K#hUh;7^K(gaT;A&5keOq@$ANp^]K(`P#0UJ6mu$Q97&W+K!MF5:[,4fVF!4#%-6(qQkC>+PCd^2;/$mD1dl<VF!!a@W6)Z1S7lX=+n.1U.@p">&%"&%JVs)E]"a5G*K(2<JJPa6^.lIZER[49[WiIZNCuT:CI":"6%pGut5e4!\`o?)_?N<QMpcjH(;6i64XZ66=/Clh)KKuYNdBk#.3`ufk15Yd'N+[A^$ekL3n![W$RBIGeS>l^HbrTH+5&?M.K$'g,I%]b:>@X#$+HJSp!(PgHSfXT/C`_@@n3iYp*n=Z"g!CpI+hLJr@6AWGFU=CK7cS$8UpB).=YX7&*:dhbKY9t4u'2(dEh[/7"Y/W>:<%'M#;nA"bT8,*Jec#mROK`!'D$.[$jL:_K5/Y^t7:.DB+I!oaHeiKmu2@p5*^p)u0R,>`4`?'Hn@/Dc).:ErJVd<'2d!.Nnl<i@Np%f$%QFSh$%:4KD5>bs7OB=pLDr"0nFEJGHJ3l!tPFeKPbU\]0!"GkcE$J-1H!6(nVdp4TXXVhB=#jR.h06HMYsLpHZtb#r7,8YFb"%&\E^6A],=p1@#*fS[bb(\-7RBB90&8a*!Y)KY.`;5L4@C,#$H#MPaKa!1IZ6aEWFn/2.YEQQ./^p)&H=qdC+5&2SFeZ/-e3<]jE]%5d)>AQ6hurW.:.:N:F\8@6XuD@',3`42u\(CWBp?Jg9Ol)\Xi!`^"c)%ooZTeQO1$"4'#U.q>_YQ<A.E2OYUUo):4\`c?Gdn>sWl%7F.E1F#>"EN`s1qA4Y&]T'7iFGT$agOP)B5+IQW!7C)o-J:Q/XJO2;S#MG7h)A":>1^+$d)dG(oX?&e@<#rpDLf5R"UJk\MQjVD-%<*#b-=`>jp^m/A=PQHO%Qp"A=/[FG)O]ePPPlqF,J-#o9!,[81iPZmd'rVlL&1Yk4:^^<'2q&$9@hBdJ//h[p^r0Z0AcY4e;s\/7%FI%%`>qk>l@ZC`i02I-Va((.>_CIC:.q(5Q:ua8QAoY//Pt558=C.oR/&WqTggfKGWFd<:"dY7Bb+c`dLab68o"%R@@^QYI]0<a6%@04t;Mf'*QN0Q[s%LJ'3VLt^VU];5`3tRAF0h'Z9#6q[pn54f"mV-;;(31A0#[!]YX>$Z81##=g0NaZN\3Ta-*KW^E%KrN*YmJqa%=?:k=MO=:aW%>)#$BQN+Wb^1E.`F86(W;d&]!SBs_N2ZVQ+9na%L\$PS&AJQB0Mu3<#]mE+FR1eT]UiW#m!8p^^1E;Gg426oV"%A%\r-V'ioYmtF)f%u3V0[u]-&F((+TZ&;He1[bkX6>bpfjeMJ8;$KJ!bg_Wp-R/^cNbD6^QQkWg+'3\Z>C%a8CUKAGO\6\EWN(TfS+%*JLbF>2!@/[fJAp*K\N3#@u*!_/.A@Kia[lMu1t#U05l7J=r'9(cWe7)abH@2`*gb;o%$&XWW/f0sHrOYnP6["SNOf_ApdXk6,j4%JjuRgR%S/D26:Pm$mo1)3KD]n!K;UYR(\4h$i"VM!$1Yug]YKOSjIE&_'Ckm*(1+cOhmEmjZ"HJMKc'15q]$63&e^1&Djd%\r$Yf%eqt,P,$YB!8B"<uTOU]VLPN5KJ?9MSAe5,>*XsdGZ9YqDLK*,oA]s4dIo-KK#aY%<jEONTO9Z0u+f.m1P;Fc9$daOTGQsop>mB<m%Q.=8N=:kpq\HFMrGn6R#[QngA+]L_=T[D1"J8Ju$X?B^oPo]J4(H^r`]A]g&jq_cQDgcd.I<eMNm@Ce#[1EbbXB(6\$d+s]c;&A*%V1?7^be70g?S.X`/?@OEpXK?DROUK(6r[nfO9"5Z&-^oieHCKNrnuN$p^2rqF/9!opm4VbrtY2AOIDZR&g`G[(4n9H7B,F*@<bg?%`f3&@irT'J!*O[(CDIUH2hBAK:/tB"?khWE-='%L`7UNVrB!m+R8q(j=Q`4t@?q`Wl7>\">t9]?7k$,0!"$FS*\("*!2@W]?iVZ1%RKO:GSTat:c7+ol_u4Qn;.`r8`!j.KO2at.eH#uI"Jkj$%!YgW[W\c`F>RZ(YWOMs`]Z"Zi$kj\i"YbtKRe,@C#`$Va?ef'!)Q1F%Jn>>V5=,LI)\5,'ZiLAgNq"qIHU5\@rHO;!7I$eGa$R(ugX0!YUFO\m4dBT_-WOYq@pVQYL1a7(>n[L<1%_-IO:CDq^k>X+dZVO,%CU"Ic-6AQ%YuZm3rh;s<lNi]R*t5%tZu</u*WME>FS3;l^pEH.cao<)Ms#`,4@Z+P(c`.+B\+)V"TP/,=#<p>M(=[_ZNE=q+>"T3%_<ksmFnA1-4Hd'tBP@'HdIQh&baN5j2cifK$p:R<JFHYJ"MPkrni.Y<%CM?J(W3`d<,2(c$TfuIGjL,)QWZHkZ[..6nX'd'[;[&)%7(%&GBD#BQio-N5%LF^/-8K"&7ugW2,qU3F@L&>;%lpls9rgdX<f]m**i`Cnpo:`JoOHf^3?V5lX?AtWFO"FY1^Z=<Z>aK2STS(!%fs:&<bMjD-Kl]'4=W554L/hVo6tBg]U^42,1-<RNk^r]1M0Y&uIBpdOmBZ.Fb3GC[`KMk]-ZGU)0!"/GefCSii;$_2&rCk[!%W5;%q?!s2e3+8S&MMi\PT(`=_Yl;),cV\5UJJot.i8u3+>PHtUY*(a<(SRN@1kB*0'"52[rbJT68EFF9c2f?A4,?q+5c=>4&:ap_X9["%X.$Er,?g"CQo-)n]/f+e?4lXm:Uph"pOSua,s$muMe8*%:@C`@&9(YfN&)W!q@WJ\kW"QTWAI,#c?O;>!XI*V_A$#$W8^?\@h>AM%)!7T7P]/U<9gt($pEM,?6C<Ls!ka>4;8o;Q.%GMf!-1pHHXTiRX2DLn$qr?q'g/\IXuW)oK,hpi`GeZt]IIcJZ\l.cGTjK4/.;p;%4I1REbT-.p!Y;tE/=T76g'*L5#oE^o*lmHklToT`'<0&&nLuVtDt%i_%]GJ6$NF[\D??\f+H/d_&Y>KMnH]Ys/PnElHAP`f`m]KN%5YpPgcq?q3/1p;.i:(jV!fmcL0g1:]n/DGL;eF'^U<kV]g;'s@M^J]`*d/AE$B2+.&S)g>(@d1tZ.`Y<=AJrQA=NBsqGVYhYhBJ<%G$&,kcYO%ZKi)A61khO$B^W]OBEpuELK-'5?uXR$&)93TKqXI@p0hdr"-d2m<3IO>!0JCBnN(,1C:FS(+Zdh7`Sd(JO<R"90U9G#%Jg_IU$?WEaVMGeOUeq[WYMj$o5rOAO5en).)jH@]&>HB2`Y*-YZPjh!FH!s((nOF!>_.0F\4<bhGSEFIq=WbC0Eo?`/58EJ!>#\r%1HM@b0SN8XC7'_@XRmh!I\EQG9E=Dklm$rZJK2V.!^bP!\.f^C;W18<hk8pG+PA:nEWR<Hj-\XVX)An%br2Z5#U=?/'V=ka495[*%,nL3RDUF$>>(s$jm3\o*0IisS0SFtA2g`]W4f0_\77)e]BVLpodigQ"M3?OaO]ap%!oQq!!l.EsPo,2h60Hm_4![+&JJLtBp9Sj^%c\kO[U?3$jbNtBegQt;0fMJ-kCr'4NNSL9<_pT@_QZu7</<RXPdEPrM#DV1PSO6P1JJ6YJ0'o5i&oMYJ1mj@5c%fa2)oh$=@$(qn%+G`."irE_OFXi'#!q't-DZi2;M%Ef5[td)A>6&nG'@L<D94;s,KLr8XUp@WT+g`3T/@>Z'GT;jM@''&(=g7&(:q.c5s+V)F8e3=f%FI$(]/DcShim2r(0XHq#;45Ye))@VZ#3;&T(QW=Z&LgTeNR!5MegZ&G+?Zo`-V=Or3MoEj$:/2;%l#72C_&gR6"J%-A6+GOEAJTp%:"3kg,%uZlWY"EH0`XCni*U=,)?Ys6\RdmT`KE$16/2J-5ZV=<2%ukI7n#,4V[,ZC##hC,AV[B>_.4BM_*SPi"tr:k]EVjP15B*<%Ll2(o#gq$3!ZbsPd0D'J6p*"BbR="q^]\[R4.KD8"+R79)^%TneV!LO*A^&""VH?&<fR_)ADJH#MPPmgM?[sP,=b<O.hG"^Ju([_%%RI+I.>WRA&s][([Z(;ocO's^$pc26>c-ch<a9`<5Selmj)DOC'L-Db7sm>9X@1I-)'o,f7)1Hal%[KaJbKDe$]BoS%8oQDJ1ot3%dh$3!%f=)rBI]'hLda-i(#I]mW734<)`_.BoO)JA+ngPu('Y>3*/Vh4@&.paA6ss[dMN6k!p!R_ZdfDb.b9$qEm$.>RAG$-.(q/4%:M!\HPA-7[;=Ge"lo6cL+F"%2WPjfF90,0L=h0e`!&Xn>*:E[G.&iF4i>G9n<'9j_;Q"b.LeB!.&T`30&(F23F\;5<GbgcC"X1im%B=(N[A?68L8V,"t1<"MUBM,d/L`mF4S2J,6p<X[ee5T;cap0cca]^)DAt\Dp)JUh[$fj#S6nXN/U<[Q(80s%JFp]b6XJj!/b`HkH%OG!3<QlHrk]Pi@T(>R6u#U6T+eXi6uV[KJ9#>$Nr-)Pd+@U"FR$LVK*"J@+Ji?;M3LrM&6+AW-+Bh:)#$G*Gc&2skUL)X6K;5kh%%0\RC5(rXO@GT,2#^>m$`;8B7=K1;r/;)o[A@$#;u`@0f6Y_^2dA5WDZV%8*4(l8lY.*&[5'&=GQR5Q6A_6j6:c;&J==<#&]"@<4s%<P<YM9.%8G&C.k4V.4M3@!I,7R1;lm0h`3cHBQt?%7UA&#2hAWcn+6E'urS0Y2(3#k)U**BUD12(eQYkG!N[9UEEs;-jp_T9'A^J%A4:0^4$3\BLlT[rJi'Ph+H0(T&E!"3&4/?uA9b]icc]g[WgS'=:t'YI%5:8OQ*VZG'O+,pdKV6QcS7)PX7u^T(8aDHcT7*fUVa8L%&Ld5hcWU!H-tYom&1&#8Y\aH[VG)>)P[akUo/4rMi%"&I?@k\t`R_g=N".]c>o9N=.=J&ua#9qmWeiE#OB=`Y'S-fq-g)bZ3[%(s%7a?k_&%cO<MgWlLE#;]NNmQl5]Hs86,&7O,GVU>!P:;U2LlkI'+:gH5s&(h1><s,#d&n+4TF)D`U54`KY(]-X_.$_3$:/*SJe5RQ%KXZXXcj#1Hkr")6]P.DD%C[6p!BK3]6<(Ui7sCWqW!P5JUMEJRb#5q^>mCC+,Z1uQ$_T;68,@k9h6F+RAlGIR+HO`6b<1Y&#+Pb_%f3ode&.ILA4Hd9)3[T,sCmo/U+r>7$0[1hr,m#?V)I?sTi/gM\XK1LUfOQs(I\EcJB>PL'@,]7:$RX'0:9/7e&%.D*pe:sf:25aP%jt`lGFc#54O(0%0h/\ab@)NhF<FombcsCnN*?[Y`AN,;FXU1'>h%h+F@hg-/(,E8.i:KE93(Xer-7O1HaV%[\c$1MM(2AL.?nK(Y%b*&VX9<$mL>$F(m&Lj0F6>4Te@jXmq#\MZc9O22sb,h\4)N23Be<guU8?\-ZADM+Ya'(.,B?NP*&;rR6Jf0-,drbH1fH>;R+B$5?%=<oHliO6:,[4i.<Ts791!X-Z\D=[uT=D67N(e@=0EJ)N@U(lq!HCShf;:tA?MdqdHV?"[XUQ%4E5a"j6b=k!1DW3Y<+!GmT_Jp3u%8$#QqkI;.V.D48P2qSYmc>cGr?!=%AQKKG);#5"sL(IY+7C7Fbb.l$?B9oTO?io@ag>$)m<(&6r[0taH,"06VBA4p]7$=No@!cgn%R-D!8D**"odH`muJ9E>+AUE4([%ddUdaP0U4/S\*U]RUA=cisWD<V*G[A">a7S9TF(^@HqBP6+ZI5'*cBF85l3uDFR'8gTr9F*?$%.m'gVl',b,a<E:k6U@VX7qX7EP,*or<ZgE#'%7?%eRaJ\Ud-]((OL&0A]X-JG/T2PL;C,8<8s('9%["=#ZAhP<9:Ap;`#>5+46*U%&OM>e*T\J5135#t)A]OkJiT872.L[(R^2:;XteVF6Z?'7:A#UO3g4'ol<q/jd<C<:PTpNI439Oi"_'-iCr"7+0Kgd.=S176"Ab/R%%:f-B&-kV2?8Eskk_("E'>[FKW/.9"/DW%e)a)=MP)bMM!C@'06fH>&PpYHE7:)22fmH^BnJVr61Ph[=U`q-gTIi;SRD[35em>bL%nj.'se&T%]Pnmgn*XeH\njpeMAM]0#;bXcQL'MV_1_f0WBiD]gZAM."2-&8QjHl$5!RD14WpWW2nX'F'Vs#DJ?m@spbXC&VVX`Z>%.^4$;9"AdU9?SUqA=e'=QFrtZi0KF(N%e1XKTVMRAH7BsS5i(s@KC3FDm#.$;F#Au;_WCJ!B8)2aZ>`C>L'$hlstcL_luD-MFN:0%<(8Q8Rb'0HOEq6\KM!RL`)T74@B>>U"W/1j(26l$=je.?^!K'^dlm%?V,d(P(Is7+c#OX:L(L5&XAT2@>[W9if>OgG+bWV\\>isq%bZ,+Y@<PA'p/J"hjG)mb`i9ED0S(`,_J%QXKjA7II>7sUjL\^,ZTr>U,+`;b2`ac3BGUZr@.LhVC6o5=_?tBc%?dm1EkKM9OpV8!%Q,kRi,"*#&hPl.\&6BmrL9WcVHguamZ\tnUJrW^W!ecStR<:27g"J-d%Yf[C4CTFA7VETf7BC6k!3-UjGmQ0FP-#<7K2Gfif:(sB%KOAO-STYU]gmH&:W`nG0'l_Vno%J5'$pe#2c74:t&69?T7<1M>-HJloX\q37&HWSQQeNr1TMiL(P=K4=TAii<0t;e-b3N%$&]0Cm%/HBQ6l`ZmN\$o#/g*<m2(';+(:?_uZHe`gBn>.;8KnC/m[6'!b`m.OE]1Q3*@&d`26q</I_SONe4+n(QjM`BfjhZ]9Cs@lU>!]YP%\1+SSTA<jWgrpX\enk,_D@3N%3a0MKj)#f?(-uH^O*NjuK2kV!X(%E*9F>`1fL;8uP).?DmA#5Fh&b&92Uq"ee`'t]j,%EXoI6o<%Z`FuH;4.F1TnokB.gY&mKl'[>;6rM3k0Y$j1D1!/Vm/s=B/JD8_rT,"ajfjtZ03CZg=n0)f'Imhfcse/Oh*rBHbHQOE4r@g_>>m1%&)1DIhR^80;=)Noe=pSea)uN#G0Rbg,!G;(cE_O$4KH)\WuIRE[m?@Gc`LlhMQWuLMD/\oOL7W\`>c9hYSD@^\Q;J?JlscdRu<jq%>LG%6f'@LfQ`5!Y^1A\sh\Zm%mi%Tr&XtF"fg4Ft<^=.hf`km8BP^o_Q\dM\Y<m&R#7;0!AW4.s<2IC"73"B1B#BKY(f0</8Ta=5%DAZuPWpIM4679nf6>pOV6"F#Bc$14q+L/Sjk_?q?,eBsc@CIXhV4[0&W#T+96X(q,;Q+!17,-]F4$Uhn*MG4B`pR\0I`j5uTSa[D%ZFReHpBth?OfgMA>GXb*TZ(U!L10'd0Q"]GYcbS]Gg]i,f7KricY-;^(@0rDBUq'3n_+bI8ej"6@*t36S`-.b:(`*bH]At%D%,'6%(k[pVE^SW`@<X`UD%C0;MIOWoE_s2T_q86)S]<LY"f'gKGWVM0+eAUO+9D^Nk*7A"_@&"4-5-L_O@HdUNLOF%em/uWOGoZ,'?2XS%.#?I=WSsEP^.62_mQ_TqLrooV6Ao`C2&ce02<,EX0b.[C'he8!\6,/.*2IdRfWZR93'=W^_]2ER-%Q4*jaM(_U7@_CKH!B6q/Ki0%fR\;a%43@\VU^>S*_IpFJiUKJZ+D1A97U8$c,rs$?u/:BG&,YZr1[6pE9<EK2]$TXX3(fDe2d6",mU!dYoPZJ6l3XJTac$%kQ8"<%3g_KWfYcJAF&?ZCO5<lh-VS@o6J/o//E@0MPCG3Pc+aE!c,PInSFA#+/H4mYDUkl0FNI4A(A&Foi:pJ78#e.9fRe#DCb<(=[M%=+%9?S<fQ6nYfgH+\qdahis+h]qZL,iMCYe)$D%_Ful%_G!g<*ZrXfrjn&E=_fDaOH-lh_=J\"h%j:pu*eO)hno!U*'f(7I.T*Jt!^l%`BXXfc)W`k2iN]di,u9qGjI_*4Cg9NOGla]mbq>'o4!lUZV;>In$+qcJS,5+=6F7"01"16=`Wl?]P7\0-B-cqK<YOaL(HCf/cG^N%^"ohJ]6,Co"T'55blM?`jA%K1]<C"^#DS5?^9A`eJ\g9;]5/!oe5cZpCG^M;@72Y!Y5G9!;e]T03'4iH-HTdRai+u,N$SuH8=nSu%(t8lgCaBrUj/>Hf5a>VY`"6R^5t-6URT<+'<uSU2W)qt@#9</4H:(X8I7aXmRXR]LRc@t+M[t64'h9@+g1K`-+`rGj,C[0I25)1i%VB*"Or&QBha'PD.?:=iE9*>--5o'cVQ2-CFL`O&b%&uZdjMZk63-T8:;ZO+]Ff9H?XJ$3aaEbCPl6].bo/.4?F`96RCFH+a(eN'*%:_en(W//t]<5mRKM$YI!&<T^mJ@L@!7P/B7)@@=*7)"CB<YM<XHjs*1(tVS!CMTjX'"_bfL?^1$[TPp7'N\*8[?#QFgZO+23a@N6%s)(]D3I^sIW7r7/edAl;W_`dbiY&9_>cY<WnLOP_m\Mk\l4?2[[BB&kmk&:N>GLq@[9Z+-%lL6/$Hf$OJ24'G"4M\pFc2WK=+^]G%`4i\4b$A[2)a(cN%a1c-`8sq:ipt3poNq%8,JlL[rj/VRD'?<b'lHb&pXFBRe@Mid?!?^mqPG$.5N.'t!*J,=d^h%rC0N3t[bpQ@%*>`JS*S4=M'l2^q>5/<,NXJtV\.-BbKYl9n6Q^.]:$opm<D.[YI;)X#E:!`LjUSZLetMfg3`KIe<cEK[g>2_(%@(`9P.n)u=R1QB%H9hD)%@Fo;!OLpAdad8C58hfAhbBg9o--tBrGDj0Rfq>QC@!['G+W:ao<)<Wm9.U"0s,Ylr#8Ci4@qN&(kkrKZZP5E;Xu/c\g8hu%Uc9IFT_HRVRfmJ!WrDiS9>*NdBCD%o_kBq$lon,MhkuJ&PKW@KBTn,K<R6gZSR(QaPGIrZ`;"3GI*AR-.J7>qprA'dI9M+[9A63<%,O#S`'=?ZB7+6r&_E*R8GoXL^:.DU+Nbl_BNH8VY"61PIX4^CWYlhkNk`=3EKCnEGJ`$4BiE1&?0NjGHO/Ip51W[hOUn(M7I@QjA%*`"rnB;6VC5G"45T![nqA+q@ZQD>%:2P081$DAJ8HTc@uF!c8s2r:/Z`rjM.id>oMI6>j4*I<Kl&^S:17'Qi6T'Cq<>u-T?j"Y1S%VJM8VO,'UQK@TqjCHPO68$_<5\bcKdh5P@$R+Tf+i0T,Wjg-2qc*70@EZt=cmcE[@67p:CqBcEc$jP/#7@a>]/HbUHb&tfOU@Br<%5[b?LCVNC\@$05#O$7B]N9dG+X:B`8?Et^]Zc_tAS,ahe!))>t?9ApZH_%&hrt?8M9[#cS",YAfe@BU<Te$ig!5We`["m\%%#Y"J%'P9ZOUpkn/m=fn:71G?K[3FX#nUS/R"LJ^@h@AWFED"BE<:DdO:TNS8+=uJ*7u:[eb@;<E]1!u!J@u.P(?M-79n<b+C/s#@r).'a%H'=EupU6*u&o^Rq"$sWP=]hcuE*;Pg!GPR5*,lIe[&fB=A(hiA<_)S.fP!MmJ;PMqbSMHp3Wm<@^ke(b[RID]fNq'BE+,;dQ'Q]3%Vh7CKGqd0k&?r-"!erk"e)m[(Sj\T">/<j4Q?K^W7B.[^q-c*j'EnMp!0c]m">3AE<-KS8-dD.h]c<<Cn:R/HAI]b"`qKZ&EBJi8%agh=N6-ofLQ4i`_lD78:7XmEs;H?a"B$'I!BTNjFGc-`f-/r,m\/p>k2EcGY9H!jbq@H2)_eN>X+Tk)Z:S=_cGAaC`+l@0GK-V$I%K(K^Dm(,=4J>`/bTPe@RCOCOj4WRkdgWAc.hdT45o[;3_84fi`&1tb&7>[l"F+Z0Y[l'TB^%+P:hYS2Wke;!,K;8u<%?3E,be:MC%W+fGW=UtdZRjE2"/9a_!rn:glMg42Es*5?"bIKc0VI(]HQ:_MZj^L/N4%`C+-bJhi(<^66+>_-;kl*D3C4Pb'&3I.Ydfgpr&=5i^%k:j_+@SmgQi@qQM8LHg8_*VuKpfNI`FQr.:U9b"F4H0h?j&JoiLai<*"/736kEHC2ihR>))!c_$f'C[FI&S9d`4XkC$:q!H8u!>+%At,K,p`X%L=b><*La;^`@btl*%A^g@m>h,>R%[T8g_%S!=V)Xj9H1/$28Q`L)e*qT=V[u[r<h34M9OgK8%pL,HWqL?K!K,s.u#t5%(AX6PC+oP4?g,H4P%aUpKO/Islc"BW43MtKf!/`KMc,1JX(dF(\A2qaX-:ng.ni(f+nS"L2E&5c&F[Sm[9dZOD.bB4p-l#LlbuoV%er-Y!mE4/J>5GM=:/r:4k?h9=o:0?$:jSBF94NUs%F_E'eHWob5[?"[.%.Os$dCfV_Gu25?'je$;-kKkaUjkM.,V9b.^2gJ:>H]O%].s5D+r4cO,&K%><iHD#FFt@)-Zd<I+Y8II0T!"i..NC*RCO>in6/-%LBZsf'8!I(Ak>a7Y[o-D2IJn?.a`J`.N_l\=\=%nScS&_%`dtTf2jo+:_j@2ejV0LDLG)L/(d3`.0`3]5,H??1B\%ul;lIZtgG(@iY/D1@_)nK'9B%crBf!+2)MQhJ!oVoP84LbY4BW$(,IjhD%cW%!q!*SMn4J3W#"Ohs"L1of2;Ut?R-aUMGK,@(C"m0qGbVb,ABqqup@;CI9-OT,`7T9E58=Q7DMc^T3(Zht\@hSm3:t]nuCWY.*%3=4^B$TSfk1U>(63J#M9-6V@S@GNe^^Vt;YR>[P#(nJK8CQWY$9RB3[/i^)P^'r^GP$H4#1$)O'<"qs?jL8Sm?U!^&LcLV0Of(,C%DFZ]A]I&rJ$JI=.Esq!7,<;M4eA0WfRm&[H6mE[W`[!u0>!N(W']#K-F6W:Y%.?VLU8cHEJL3pA;1+c4Je;fQ(qH#n8,aLE.&"Br%fH(,CJClkm'2Mp^L,VIs;r.4EC![/+p!a1d*Eqi'q;Xa&A8<LR)X/g3R8)LN;TKlt]]OeB<_8L@rTdpb,:<4;r&CmE0BCuB8u)b?%7!0>,;BEoHX'BfG("/Rcd=e^r9%h*^1GYcd9hPO@PBHl)c4"V@k/F0pck6LM=%p9V_e53aMNf,m_AB<lJFM)WBsLuPYW]%D9V9=l%\)^6hoo>U"3dM6-+IPQ)GS*DulQFrYf*T!h;_P+]Y#Xs<,TRXuLD\0FjU["sP0Dp!&1,R[9%),*$1ef?='%E2V3-+5.\!aVaMmSW%HN;W>VG0]r\:mE_oX#jZBVZhuf@.O<drOf1Y+ktZdTgFt'e"L;2O>j\f5Z@2\ROYD!*e#WZHE$h+`XZ_#n0jaOQC)[!(qhM*Y&]u%r.&4]T[=e1B@Eq&Z`NW$&>gs1:9k@+YKV^(L^dN#e*[3S#nTS>q7,rJ'gPXXUBN!$@jm4Uru<[s[>#3G4(;4bnI`!1e[bI,+S815%ams'"#r0D/@DHiDPVPJ"7&i^3c`2gQ$rS[cpo!N5@$8b!@]Y-9XEUTFf`nm&<!gTVeX?Q,6lk<kQ=S(0^K5;hKj\0Go/pY7W0:&g%i;:`<_qc9F"oIS[`0[+b_ZBkO;.WZeC0?P=YA"OWJEC]EqA_2lnS)/cp6q;WQs-If?rfjD*rqDqo])]4]h%2InNit"Wibqc3qAf:%poA\+lOadt2an/o_Vosb:RuR.e#5*i:!Lih4?t3u[;Sr4GNaZ^I*GA]c!]67Ys2l#0?$,I[EOF;-9um#!64eY__:9lQpp!?,@uU)%Ef-W+eg>)ejN<u!U15%-j9<T/4);0-#C(Nn&Z_]28UM$gCThQll<At<;m>B;S!R2*p;V:lER#/*p>MQ2UiSG*8mR:LE[i,Wkm_@q%Cr8*AHk@:57;Gg55(V0"AgrBn1M;M%Pp&S_II%UgoFA/uokRI$72?8E;eJ=Pg<_2!*c\<)$'R%S5+=6+6PFVuH#?@?5a$O82!Le%%IL`!)EZOM+`aOk!OHo)4pc-c!%BtO,ih)t\N*8uAoomA<VYF:u]2e\%rpdo*8i#,n"%bL?G$b-)U+s!&r9Do-M\lsog,BnHLtFkt%mriW=&HB>:J\AoAE>8J%ofb$ueH2&,fId!#!]rA\j))%GHN\RYp,;qjIDU286FaaeTl95'KN/Eq+XtTKbFoZE>Yl>dbu?=5f8e#7%D/H[YQuU>i%CT_a<8HPMXd6Q42]'6;W(S-U6aXN!eR.U-lM"AHM'OC_5_EY%C9h(Q[:#JN\`A_2eV._RZLYeYq-'F:$:%nV(8Q?,%Aht:_6MO&a7U%RUk-g!:MN7c^:;-]5L:'.n^[!Y'`?^HDR4mZQA-?i*H63\S]6mP-Jgc!+)i'^H7bGo6m00ZYU^QD@&A/UU":KU`%K'/KcedVGD2*n_fH\f,p_)l)Q"7;%$1p@Un>:1LhD0K!G&NU9jha!d*]@XVc_e4U4hQW9_PeSdJdPcJ<(d@XfiDOF1G]q_70(W8U%@D89`cW(Qga+."4]^Aei<q-V.)qkJ>BmbY_gUf^lS>qj_1L@"8Mg<Hgcf(E(HYghPn+Ygt?)=N;faU:1KCA,Wd+QD4rW080_2jWd%As%`Mj@bGPO#RDL<PHEuTGc&Z>RatT!)?@eGfOP5j==[T.RE#d>)!ee!Kra[N3Sd^=DYJ(i\:/uOF@s"a;I<3\-71D?Q6LLYJHmg%oKF;kE==c(LE%L7i>\3gg^t^:oZcJ@VcmL#Q/uh<&2<gB\VFaE6]sj.[It=nAs#p(+uYep!!9mmIa+Y0,\IP!;-&.:'"WJX7r2`:%TADpU,9MY[=bDet$6R<.KB11-BiqM&=2_\]Au_\+P7gMWY<ta-S9,R=!rcS"!;<Z3oCsrj,U!FeO%e]T:,-l&`9mik+9\Jri?3oS%6ouV#K@?U>L`N>(=4VY&f&!8`/o\)5[F%/'5_#ZRk=UY8")<4^,21[b<qTg"faJRZ?pbB7r=Kuggs1^Pd+5,'"=hCPpP`$M*6bYH%&>F+h[&u]INdo3q,`rLWe!ptIJp?h@RK!EO;t.RO^kEd[B.6q6i8dfU=9RVGC/L*8N8sNf.f:d\J0"k[+n#-d(bS<G;&?87SgW=J%1\O#4-rur/GTXRQSAuYL/Ts\@K$PqC2:J?>?&'^Z;B4krY8s^cFY@_mHOO*<5aoQ^'Y[-(Ph,UlYq9EiaYCqG6^5Oo7a`3q7h:Z5%ems[%2TGNKUmRR)+[4WqBl+4h#B]bNe`k[Hk&E%jY08*0qA8npni58h==/)Xa8Vbr-uW=7S-[7nclIS#oZl1#_#A*KjSk_7*f@_n%&:Z,riB0`=Mra6b4U=4C<`U8a%erJ/*g-SUX/oG.o788@;eCau?X0N318c#lg/JIOcnW!!*O*8E?FD3B</'__^M,a,DA84Aes+MZ%Jg7_Q9^u1BPKr]BW-@OY:$M.%8tc_Z4rUlcCDmu^RL>[gia.gaXmK/1]DY]+qb?A/7WuE"rNY/oYPVUFfI?8IeG#$af)3]F]F_m0%3IboXRKEh`%I#s&Z:8QK!2Dam5E_,R+Yn0<_s#Q5OED3)qFBt+AP</f7%18ugH0C.R2(\Z19=P^O\%&i3nkY;/jJ,Dml/e;NVD-"%]T\p"2t:iW+[TBX+<%SWq60p_G"ff@lnhKR+X"g\m7FWN$TqMq_BfKdhSrm6>W]UXIX]YXSstA/;W6jDf*ua'P][30Buk&[Y".$e%):"r7ec"V@WO;-^2i+q1S,pu`A!eSW8!*=6#Tj_L%84"#$c$L#$101^WiCLV2lJ.lfeIu9p>E11jqO0GD_XgCN'8lSWdqn!H('F&%,u((!,6DW;&^.KZ;Da1AJ2>9Lgd7MLW/'!(W]Cd0X,\_t7hk&b1r!LW(hYptd=nj"/Gi7bXp2ZNJ6l3&=ct(^q?Zj?``0]2:=:]V%0H3XmOdt$C1Z72!b!!HL910a6>Je`mEepo?J<LmpLq,%MILOFB@e[nCs7$raGZ8X*TWml&5(@tFd@Jo&o%Wk4CkdroNcWB/dErCk%d:e_/0/tL(\A>>(DQr&!E9rKb)L.'r-tfE:/<b0QG%oYsA=g,1[jg?kp9XB7Jd)_POHR_@@>Cnn#],,2S&5P-WlG9*W5n_HVBu_\%Np$!K_,HL'SR7,Uc]CK@aNUHpW8AZ"I7j+.OpKLpe(L2<gW.H@MhuQ0F:ra8e#&%682Q+I`HDFJ$a'GK'[5%^qNOfS\LUF(b>,XU%aJKZ!1\gkp$O8;3jB1=gAXlPgVb^,W?#@5Qk`#tVV+,)XI=lg4m(3`"^J7R6R<s3Wl#U4'"Kb#\7UdUd8#i[$UPN/udQj5_Fl6KW%W+C+8j;h_V0td:,o;9Sd\MeX-4:^0H-lr`oMX_QSJ;^jUhd"#q?Xeb:B:%]L>b4[9V0^Is%nUHi.kD5b8ZRhA#5`qmTGF(TFo#,#%VZl=$34r\DB3GO%7,qng!LJ'Lod^6J)5p^5+D/lF%)MSb@,7Am;uoZipd@80b?.S*,I`.6P4MqV[BeU*).f"9+mt-!h@+Pj>\@H_%++`K%kLr+kX9+l<*VXaBQVK#elB_M')<%Hk04L63!AV]tZXdh!+lL7Ch[O&#;$!.oa]Gfn\E2LR[3I0@OZ;k!N3?%UF4@5Na+kml%BSp.+JJ6KFHPa4Ah/".e\oh@Y^:BQoR8h[;&TbU-4L]',i_+q=]N0>GX9Mku(cJhQP@N1.<d8IsX+DKuMIWD&43=2(.K`,\2@-AG%<'@0dlOIKRKolB<0C7QMpq^-.EQgJ`qICHr@3g0LID#,YIpBjXk%\o#2^9Dr!=I$$pB)-P/1diG#fg2/Aq`/QFjJirfCtDr48f`I%=mT9.5RD?e^9!/1qYL3/)]H;'D2r!\BO'7bU2q3T^h<(s\OM;[dG/g?cD+<A'PiIgqI(jb%!%!mEE0@g@S'db*S)r6a_q0EdTSA*%i\9Wq311&[9HM/&8*?45=5AlR#![r^ZL*HV0M`W&3i2<Z&6c\bSI,Rn,O-C(a;k*:[uQl-mD;<ASPZg@<X!mq%C<'`71@kZ>9ldH%^"k</,C6DS+h#Nph$m;PXbD5#pOX4L#V5E)Udr0p0s0$:S;VgQYh&OXX5/tIffA3AKaE&D?/"p6er;]9S%_\\BcF3CC;@J2h3$:a%%;W(\=RH$@eGa1VX*rW8eU#!\^@cqjA%f2@6S5tp[J(2[qK7\oUI#b1UN?,TqppcTnH>nAmdaPZ\b\l[RiW)OI@Xi)'5?^9N0;sr%S7o<q#0"Y#,YF@.8YHAY(C$A\(0Q\<Mu#KRrfLWR=P>\G4.,V$JH%Ig=Gt.1^fo<M6V0aDr;*T=5Q/Q.O$EZ:J,&oEs7(%-n1VQP%NW/p\s7$'ddiXBn,g5"D(2rpR;)bFWNX,cJ5em<]a016Tr4i:(%tFG^c`]Q\r:KT1qMTk!hgbGt\,ZD&s6C3qj'VfQo03?R]AJ)9%ric@mo07a(lKA2N++CYjs-M&=rP`-AmcSUVq:@k.r'/>"s%E1F8,)fqjaVdSViT,@?2jW.o#KXPs7kaYrTSCur9`\Iom_1XIuiLc%m0=j'"&^>dX?P%KlFUK>R?;NJYLqIIYQ!:KIK'*'2s!]@I[4!4<._l);E2%u_p;BJ>N6BX?S.39=b!g&e8F^A2sncPJG+%c.QH[W%iL>>rB#a+)_b<;k,M186Ip;pH=/GfoVDS%>Z$J$^`n%RL/:RJYEW3qa&D6'<A`"SKYYhD+ndf]T#drno+gaOa%m:V>&rr3\3C&8c%p&V8],.%Rp&4$Lu-<eXq1T?DiP]:o0FeF6]JGM,`;:sDN8=bK&Fa;LgF:C1BN3EhPEY4F&kiP@HZ]*Q86Jb+UdicFuTmjS963I2=%^=u5KmiVT+!P9E]bU.TAJ'4^%ai]^6<qp,kQ$]lcMAZero$1qIc%JV/`r3(4p0U_aR0#TtB,DKcVD'k2Ep,?@"&:b^L/J6"9mN`K%j%u]B8PoF-[:L3fbP9[_$h.[s+4soKcO&,*fh'Z^n<mA#YA7F5XDTF8c\!Oq%VhqoNCs4A'+B_:(<+e)[)fs>e)%rb7[+<XBkBAq%\?j>6UX3WhgI\K81;%;P8`?QZ&UW/CdnKqX3Y"9>-j:bh_f,oC!lFh8RPN+l&b(<IPaojE1RuE5fG\g7;-J_[5W;mT2@nAQj+IO8%4fu#&_,eMr(WihMh\S`N^8Y>>r%tLZAs._HCj7f+iKB2<3>ER1o5u>%%a3AE7c9Yb@-$\5P9C2*nti]+3*050F9Y^OX_^/q>KE?*%\2s@aB2U$CeiVnKNDA-qN<1uM#?b+?"ObZc+&HT_1l"@C,lL$Cgd:O`XC*3WT$sKgC<lQ4lCH?CJGDA2jE3Ks+D1r[f%Dm.jR+'i%]cCEn0TUK+_eGk;j]W=6^o'Z-!'F:)jMR>nE^k#OY3rf^li7)A!kSgM-BVGn-W;A/OrnE!39.QS^S\uu74:]ZLTCVeUjBr.$TdQP%cG8"h/DhD+:(o[R)mgKC99?$h.m1"kKue%E)UMM=7%ipjq\Y_lV'S$b--"4=*#[UsaUD+dpgAH?hWW'.fOH=p4)7pi9nu9>F^R]&%+]<G17PuH?D37AP5fn[&%$C*9&QlA7h0UjE9)g'`>!IU9"]#`Q."MMMWKVbL.>.a58Ho1RTRgqc3gr,YS6_H\9b\Ke87mIF"%$P[%#$C\CCZ:YY]YH[[V'HHD;iY#O^YJb>hrUlc%N?B</OWLu'!Y><R94<uYi=mH;"<;F/XX'<)@XM/I6Q.s=S[OX(^2,dH:`8cn=],<%*q7oijbqZIQ,8pXm/mD'PXq3&Ye-M#2G1J\rd6mI)!r3Y,)j--B%Kq^D_Tjo^TS^&XLJ6L"$`Aq@a&=n(=TMA0=**EEF"CuYj[<T%/POJjJ(VZ=.;4:Wl8Q$'&E@"6L0l!.g/+ST/@#?e$PBP,Y26i,8W<1HHl)TO`(JV;JgOWHF,j+1B#V710a'oAZ)[[Fjo^&L]_<&"%Vn9Ydjl&SNB#k"RP@-]c';8HuZ\*db`XLSX3*'pU6QP;5<%K1!Yj7N\!I^.+pBjVuN-`NFd7`m.><<jY[BeCpicJLZMVLNm.u*K-%knSiuoh$4l0>eJrGGNgKp(9!Zl[=\b4^PS+ps<*OPQ&IH`R3H^FI%+p*pI3Ji`q@,I26lm\*BoFNg,pqW5!u8"&IFW.QX.#CA*&q%SQ\6Pb-AnU@[-P.-8TmEp1=OG%X=Ni-6s]s]q:r.AbK*9$RX'fNI\%=()I9)\$?$2*e%QTZH@0/C'E5(2[LnW4RhRAYIYAt>Im9%%5#IFLHeb(QJR'2^a-"VO&:Et?=noZ&fg</(SM_eZCGAV&an"cbQWZ>,h:ggJ_nr6$k#Qs&#5J8Hp^M^oTaIKGIcBllQL`.WFus27%b,0h%7X\qBp<:3d'E!@c)=ll=$CG5!>s>*XYkMZo-X1-@0G7tS$ZbI<%.(>`V*G=aV)TVFbn>gg_&[6`o?tcW)shEdinegBIGmL(%62un>k(Js81=OfSoUd'K916)(@1A7h:^jYi-;bIYaZ?P+@3d-i:88@q[^c8A*Jg1Q?[/C&/IF#bL#M8J<0t\=E)8S$P?+?6KQAMh%o=L9W%u@%R[Z7.U+Y&1N_HtWX>RbkRfhuddNfpjJI_)*B?%)ZJ2/NNX0Z;dMB)r`TKCn6Ps41qfVacCUW!YR4c+R$sg3cKLT1/QT%F\7GV.?COV1GB[u%72*dZ`bOi%`UJi/hL8IiR\dG_ihK%H>kfilm&4*UmLdhjFW\1"66K6lsDgO)ZC[Sa))G%0)=WkKP5*ZVq.<!%_a8(oN"^UQduc/j6kHs8dh>\`gj:A'1\!k'0jIXm*+s]"q5Lc-+S9l4/mrnsD<2oQ@RGml89nne,E`ac]mU$"Q=\c5@Z+9OXmf>'%.%pj"ggWte]:6ZCD@g@BH9R9kG!N,5[uZ&B:%&\#p9_]=aiD-,Sb+"jBUGcD"O_T2&l\H&%DThpo#IVS/.:if>:gia:2Q*eBnL0,%>KO9ggAP6J[X,AGeKIW!&i"on)/$ALL9s]m=R4Ike`O6eCPr^OFZ\hPp8U>$S.r/#PmeLMK\"D3`6qo>P!)C4i+0tteu)Q2>8[#J%$_tF&D=#iZ"/6.P5sO)(gFp!So=i#V4+?uG0s?"XC@/^X]_^JJXnqGT[d(=fi)eKLie9HjCYt4F'Oau_((kAGBhs1V%sQuX('6]s%P(ekrWS1$bVXX*)lW_Ybd\q$;K[^YCY4\3;#h]:9fX>B_"W)j?Cd=r/K'Pm?p0iJKdu06%3U:Njl9<^;.INsq6I!jKHHSd=PU(`s%#ne@3iqp/MaO7VI"Dj>4ofZ\G`;t*OS[-Z:&DrF6?enKRcW?WhIH6gCd-(8I>I:XhXR:5<"j<(*3EpLQ+/Wogn%CB4"Iml.acH*,%[:\.U,`-iblsFX>NiP1$eKAX=T'U]#?OMW#NaVRE'b$WBkWIfd@*V-nrYXlA[ZS]pKclq5@b(X1#ng,W7Q^Ja6bE]#9dV)/HZdUH%+9[`S.HMu:\3;^*@oAo7Z2co?`?U^O3,g-Q%d7Qu!LA//Ef`jfV+KK"MNU:FGsjb07DS2*X:[d@F`2X*Z?XaJHnccUOC79VcBJL0%*^C:=>Ndh,^p"Xd@\/r"U)*JsZ!cuQZCon<1p9:l\0%#[ipT&RAYjo2d\LNaKVF)^mptPNQWOE!D_feEH^X8fPVp@oR7FPs8pd3f%L1i@Q@d0nL?liLCok_/?f.W9bbermLBl^4$K5=4@n(4f$.2D"]"_V6lF.iS2;BJL*gR^BRflpURd]?(&1;_?7n$R*"UQ!8$o8(JM%*3<i/HD-^--lDB0_lO*q_gp9dgK@k4._R,rCFuoL8&.jG2mIh?_`t#jBJ>oa-FOfA#1kL5Ajjm_D4/(.;3tmsa3h#iEW6hgQnMs*%W%MNZj2ILmr`8r^`s9,h6In70?R;u)A+Xf/-qPKgc_1M[fHR2P)9E`)T;>Jsd'1$t/B':t;YLsKV60B6,R4iub7)3*?:Q=f^S-Tm%Y]q!dEb[oV(Yam>+5ao7^&Ca-bcY,JVo:]Pl//&M;E4BP(]0^@<e"gd(m%:\r0Q6l2pD.2a`8VU4je?g5H`c\K5`fcFD1aAO+>GJ%J(10L6&W0$Tq#*jODm!CD@H%kO;iY&WHm3^j@HnR6XD,nW)e8s[+hjn^<mj<X>=Po0hGe2?mb'Wm[`E_[a<Z,_ZZTWSnB0Q!/AR@%Zs;rG:L[XQShOQ8_o<(m[Q)RC$\RF(1A4>:a4S]85QehH5mSfU>_bo1`]'Q_Qj/J>rLcpkNHuD4>E:UI/i*Ud`ft(>4&@CKX3W'&%/,O^eFAf#Z:J-RG6%r39$`#ptF8!sQV4Y-fLM+Y$-9m]#-XI$='RVCO^VMAUrM-In`-!@*'5(`-kFRfJ^K.m[M"+Ba&<okC7;a1l%o)gRQRbtQc0Ih_%*dNG=\ad(`J=0/#)5Esm`[GWRKZgb#13&Xf/Yr&Y%YMkW!1uY,AJG+2j4O7dV3.PNZknJ;f=$,F#*[4T\R=NU%.Xk[7dg-2Og!QOI8c<oK9-":><MD^Y.s_+K.[Q>@&@e"[IbDfQ&>Nj/,sM?R39;n:Y%5q9aTV`$C\nKsfcl8]T!@5>TCA0*\mDAs%8pjbf0fP(p.B@R/K^ZG%!I-,,^;Go:GC0Dq]+0UqbS0A*c(*u!,E<<-M6L1q'?8*]!^D3,9?^]M3<]'QR\%[)_!Pm:/<_8#Tg'db%W`Lm8b6deJj7;!o.nScFV*>ca%5SDP%sg.\bj17DSQLfd&qH[0KN!I'F%hbT`@PW44rS[u<(l60B#i4?0f!m58@r%*"=FXoii6Fh%;$pdGP%iN1[ADk:6@K?8P^ZGXZK)3];.2dQVL:Rs3S?lXSf\&tf;;""hkV]I740W(9P%U7(*/LdfNuk1e5e^o`R1Ki5dMVA[(TPB%e..ee3hah'SV0&H0-S;on>^!kQd-OX/j=_u=[8#3Q_X3#q'L;BD]Gur+,8RT>#2"PnjkUjh++4@<QmPs0Y`l[B:_6VRn.6gIn]Bp%kUDc[oW%iVFdi8ae9YZ\3pV&D`kuudc5rZ!S7=fbE2^$jPfi$$B<-:%qghUO@bmu,\3mE@?)7!t7SBc>1@+f>'A&J(#-j%F?E$N6%[RnFK8MS3B>gm5#a]d[U2#HY4b^8Q%Y=9)qBAP05&;7i%Vct![dW;Ej/X)@XQlskpP67c-o1[Q:qTB&?jWr\1meH:q\]o8urc7/S%lO;'YlKsuMA&RXcH/qDTR]HNK)54WNr^/FJ-BL'IWelZ>bfpl$Dm&f5_qF-"$.(]e,[)r$E^*sH5;jUZ2MbFN`J8S7k/uX@m"]qR%!!0%dPZps3d5KH.J!^n`9EVh(ejgBCG_Pe%fgZ#u+0je14rQ"oJ63g^WLrgW1JGQ1dBiI9IWt?_r2+RNl--Iej\/Mt$o#sdh]G`C%SZjLRd1mJ\(!@J*Z=(TNO\B:5:$;)I9K4$4>`VX3NZ@3(DAom6ieM)MQ/9\Pb[FHt%*Cp!#R+:1/s[D4MU$/O&B$REM7R^b%AZM.%QR]BQ%7.,#q-0bO@2T3EMgc.;JoNs7:q-U.J_N\JR&G#^5`&[KXlKL#_r[ZDmVdpHKGB>2GCCCO%WR:@->E6RTk/f1GsqL?<)J\K%3pcA3BpqbdKH&W:h268_I'P9BiR32.K<W,C0,M.739J,T]XLRmLD\'j"k#?KD2477hQT)V%#cGk#%Tt;aat4Nm+=8<4><?B0L"C5%b&V<h/VcTf,C(8`>@%I8DP<p3h$MI9UL!#!Y9c\lpV4ZgZ?kB:Qs/O(H]&D_FZ\j&])*?lE"=:462H&YE[*kYI;P@CR/_3VL0D>k%8lipb':\&Y%a>LGJ:4ct'Y&*USKiSc`ILJd"VD'P5Y#A-bkqe"Uh/G3M_4Q_Br0-:fa;jUj;.&BfCLY'$rXMA^%kuZ5Zi_Elm/Xs%I>_6\C>n%3I;dq:H4\D]qlje>]_TtO(#r2kmJS`G[h3Dfc;)U8XG%`/KeasD%+F:N@Tbj4-?%Oo6Q]k190V)[PG4!]9qGI0NcTj:%Im>ooEM=@:rYIZ16>uop7]Da&PD:\f=P]u$fUO-sH3b@L`$r\6E[9GB@C8^6;QKK)Bt';gnj,t&P,GSF)XMh&Rl4Qk#.bjdrG&4d%[f`ZiW+,\sc-TFn"[P4C2ELMSNbBJG,&-gPdO-Z3AB<n^Nn$a)6)!04f%j))m#q]M+\$MK5TK1W#%q>:Tjf!T3)^CO'BfC!\rXr3%Qu^+:9@015-(I[<HD*k^LO%/u:/fi?e$l6]m@J\7HgJ-fYo1X:LPnJJ9ukrQoQ^iT@o:StLKKL-Qih'#O;-X8qL#`iW#fk9q$GP=%j08Y94HjPr(k9Y<7:"1IeSg4$^S>Q@KLl6Cl^2#4%it5bc_Zhs"&:Pk;F.6o<b@S+pOY!NA38?edah2<!fabg4<S,sQJ,`*Qes#G%a\4.J%ZYB%$rmjXM_u5K$Gn0(R&>,\]U26pQe[\M1X%)`HJTlI>LNrR(@V.cG1(j]%)hmaZ?Um1!"tEfQo`N9@PB%'@+8>N/b==&%`_i4W!_.:u^aVj\IHiRZS"JY-L+gPXnT1$<q=^&mB&nndGPIk.Ne/`j*K2pb*"1I'8JnZSTqb8Y5V#QZr1ISp,\`-'PaDq,#&0d9%0o.Gm93PU9V$GRK*<C98e^jLYGcEQB)[9jFAKF&)!*3agH!%JeK1!^P6%`t\akt<D?DnUg-S9Sd'1A(C%"4pliu`Wj1/*RrP"X^,%N)WF8QP137Ppcbi,jba&4RQX$0m#Fc<:1W$WiEO\\J(5WE&<!(XCS<\`!>3bL!W_YbjRh>+k[ip$q.?P9[)L$1"\bo2c`!>$^eoJ%mh$KR9)u7O3fLQcd]%P)X5fK\5oU'P19]?$(mVJFPrK&@L02#3<eoF"^^t-a_b:+@K?5<F(=S#/:*ru4OV=gM.K>T+9!>.CfICm*%!Hd\"b$[foj,Bn/?RI/>;0*NM8Jq3K.Z9aSdj/HB9jWGaK-)).AYN6kZ-RO-R4P9pFQS7P_jP>eT8#T"]>4n@ANZLRTX0#%4Q6ac%1Hh>d%8[q.V9"`UF$PA/Ci1-2PWk5Lb1rBk%C1pAnB"3+7jZV=0QQc<B>Fkr.!k58bKXX!i.k1TNr(cfkp3,#oZHY);AT8[Oi1nu%pf),Y:TD]Ca(BbK+c&5iP%dGKhSQBfa&g>fJYF$DAR1P4_W*ErN4D;FX]p)2[7YaWD9*Xs!I7nUpg]PJq;u`82&$f4e_F:F94>\`%A!ErimOXu\YuB:2N?*3>=Da%]?Hq0Q=8KK(r7&gtTk2FD)!u,U$3,G%j>8@P"'D0h#@bX"!JmOAEC>L%,/U.@6)RgD?H*[i4POR]%W\-!e52o*9(*U>pauPU;_qRbHVq:Pi?QRK:bTZ7'KF!b[:/\ajb-5Qp7O957\(K1^/+%0jldG]eq2-Hh4>l3>l]s_q%9$Cl&Ihg-%=#3eME7B2gLgiH@bRdV%?tqTI,E:I+1R$SAbG[g_).'`d%f&XeB%"SE'cA;U$kfmX/>7q5'75?OZ^*N%VkL*20^r?tQuJiPA7c$e%:H;b1YfG@b[2g$:i&aVd)oN5$)ocgL?sc(d]LcJ.VRY%V*()nVVhIj`HHoIYam)C\cVUkOa=N1"=Z1^f:'c$kK9XTj\$#uL/;1.2%*2JZ0;\nns$ih)0RNi(]#H27s6dceZ9DH>6^8#(IFP/3SQun!!*umY((CoBU1^(7$"-]Ds1i$=Kb/&f69U0oSrI#pFKZg.e$\mSo%=@P[U7Lj]\]U2m]IA:]#G)Fq]lKnWlaPtCaiBZBDW';<NQ?\3]!m(Q\)0f^%8NL4lI5D?uOa.((DAENcojfrr%YuR\lj-M!NH*j)%[?uSV/'3om^P:#0Ht=_KE]Js&1C-sJJTbg8igfg+:i_'#@C`9'o=$R(q7FEAQp-#mB:j\Jh`lSdq:C*Is+e/WVk;:kTEW#""o[]K%X(9Rtc\lnlEof_VkZR6?"oSOMk?!0'L]@#P4D=&f1SQ:Dl4R+hVk="DktR<^apEb9Q+]X2I<;Y;[Bs>.aJI5NYc""ke$"j.+5^Ws%7E#_=O\m4Wi.Rh>GI]t:I<69P+&BtY(jedLlAHg-6>OPR4VCt+eE;MS>0mr*l\kV0:gnnraKR=tF!Sj/4ORc4fB/#U>Q4#C5[2Tn%'\[Th2%o:P5@:/4idR5M[-H0l<8,c_f>t<`rHsGsqg<4MdEI+^M7,`(:i142O_jo6X;rb""h[CC/QZ8QiKie)Lq#]';/oB8p%X`M%QgKa->L89bh/_UGU@,)0F!U7TZ$QiHj2ZQnp'TVSHQSPm6MM"'T_ptoE]YIa5u4GpO%MAT#fhf[MX\M5S.LGX)Q:Oa9/n(/8$l-N%"8X(<(_o*[MP#ATcKN:3RNpc.kS;5pXuhf,,PiJK37bVPO+CW4*p^s3q07\o@f#UtO$9..ln(@D-DR)HeE"YgdJ9-i86LDLN^$F0%$[RrZ>ct_1B?$3,6F5#hP\.;])Q=TIa"+OZZI66NCbF=FUGb>aYU>*:TmOqgco4PB\EHJ1#'u:(N+[O64ra>Vq&/ibd%:>F,=%mo%k,SgHN#E/t8<//s"HSd]Q*;K-^\A_;OK#L=37=dW?6N;"@C;e.^L"kFWRbb;O_ju8YC!'Q8$J,[?hDVM3Et\NHM6AHGpI6B;VT[/%omAD(\#o7FeEm_A%XED"B;ZXM]gUeuKguLE#(;9FIFb/h(AB3;D@H1_]c6/MK"#'a*Q:*lDiq[k23**7Om%cTO&YQWqA.c]X@JoT%rWrmYK2s2h#(213*oEd5V%.Fl>@d7"b&$>#&)Z^eP5#4jXh.+<O$bc_mh/bc%*D$UJ)%OYM7fJtC#lep)Nc"@?DE[Y%G/\^\FN0<%O6CqDo!@2#\VE/<RVQ$oal^omffKQ;fc'@*!IJRmhR>X.rRGQS5[)bl@8C*W&QM!Bfd#^6p(ruS+hDTLEN8or8H+_OchRKj!rnuX%-e*C6f?!J8p37s\H(`c&o8f5L7l!6SCNTF9]lurP(V2!J5:YiTILl'A^jfJ'#q]L1m"tNKHgHEgNrt.^@K1<R7iK-W[O:X\(a1tm%^E%Ib./kkhoEk1tFkMuY?QBLp6ig9^<YjU^APV:fXH]8`^uH*9UPs`M]o^%iWT#<ZTFuDL"4+!OP9%I.3!p2/3nHD"''O`0MBp$=%_ln\l!@i%&/$S'K$ZZDoPFZ*t_`g2F0bCo013dh]H]U1j8$`jgGZM[fp:s;Q#p6g)N^lA<J6+!.FM`Gp'L@Ms(M"-EN;@C"KTgSo%%)AB(->ZKp9mHHSN`$2aO(&HWLYYg:5qg)]AAQV#1(/E7pHf5u5?CANK`YQp@/0!LWtGh#CHID-i2l=7%)Yk*T*[4hH9mDh='cML%GWZV!&e4&XUI`;o\,T.7602@6D^\[n'6#?9?BfEEQ.JDDlm2:VN.Z9"qa(e&jY\KB7o/YKhuVB?,k:C%,CCj:@-CA`iF-:n,U!TP%MF+rmZR92o"hc<#nY4DY1(p$VG!Zh&gO,6P&@r[FG[/*_FonH<-p7%$KY8?/8iR/U4>,S@;h5RA65@iC@4tu=&rm#/0-:+LYQ`C+%[)LK[\.uXf\<jjQ<kr#I6b+(].1AA9.q0@,E\E4<@]5m>ADk(@&B]7MYS6g@'sJ@uGhb)F=Uh#o@?&;R*9B**[n"8oB6DkME1go8%+c^1]m,^5af(T4dcUuj5G%duGKfblkY`nZD!CoG:VZlEt54jO&66D7Y_bpD#jmE:;*g^i1"gKB':)N&3#tMN;eSHlUnuNr,1*WaO%?:a/AT\dhLkZR<V7NPodPT@#A\J$$0p0R1K89Q'T'-qj*_MLqm^26B6Or'>N6,3W">`g_VFdGKi*]EO:D%],N2i6Hsng:m9-uadG%^_M\>?+1J-fn+.`S>^<eTbB"aY"5,9Z=bP.nnOk?'LC,6hTMQSIY((0'U>nh7sQg[:LmCS*edP"._-aoU+>ut.6I/<bGW9>]7>dS%$PFqYSobR0*VtMLb#se>MNs\<XCtT#,uu(JL846q9%Ze?]G_5L8J_!<?BdnG]HYOn/,-n347itrQ;+LEQ;)EtSn6B=0$pmkJ%7tj%=e@l!%qj<B2O/0u>@,N+-_`5Nq<VZu*e+6P@P=\9;=<PbGWLt<!I@$;#+&VXJjFTc'8+\t=6*c7)ZJfkT?+t'a5DB>(k&Zm8B#8V%\0;\uhp1uX@a<^,Ej@e>P0l1/0.$4/E1[E[?nlYcR!DrR6$Pk!fLsOQ$qQrqderb/,tXP\Z0%fXNLISJWd,Sc4poqEdruE_%nekh%gGJC9>^n)F'2!,)2_S9<-W2ohO(((6YK>b]b+g*)#(8iOB2dtCMM%4%P/S%3C+kOP6/RjF3U>(Za$BsX*'N/LCsM('F;31QkX@M&%=/<U+bYCI-$15ArTf<YB0m"eZo<;_"KR&7=V0O,[:`KXcK^L.5*gUahj<O*R?HNN:'epe'celk?."UH:TT;k-hO!k[SB,^bqUqMo%os6sA')TM18%B_8<s4"lj\bU3`N*u&"baTPL]NWnnbK%%&2(O@#c)\,Jg:nrFA3H?=[ma@+:Rb70G)S]dQk>1-k:nl?]kXTH[`0\%m5*]DTL\5hTU3TLFQ$Oikg^Z$PSMWQg^=LhZ<*iU0H?/56E_a.UZdfR?@1?KTbiB;FQ$PP8E^fY+]WhA5P4_<Hk[m\TIrmE6f/G%%dZo/n,,&)VM/_QRT'4l%E%bCJ!I'VWH8.`^jGY;:"H@Tg0:"H3FaHt1@2EI6XPGsHUW6a>UYJ^7S)D[(I7*Qre(e:%89<G\Z:DKD%.t$tKlhV`Z,^0+_Jk4nI^FP-dpA`mA8@\#D/CI+J++G'OjH>`rHU0@-&eH]e-6[U(RV3?-,*ui(*Y"HCs8F81^d!;GqMu`SkMMU*%rDi[6^\LQqs87_ThEQEt@97@=>P[48O9*PmRDbWd4Y0s$*r/07)cPVS17^]=$+Uo73ALtub@PcQ&>mD$W/sTa).<i0$)gTA7Z$Gm%U=1@\`CuaBZj'Y<6`cqj\?4BW%>h2c)./>;brti:aK"]!goii]OW"lnO*X3#:N1RAPQrCR7qnfqW$`1[n&kQ5Slkds$s60HAYYJf%.[u_)KpT2Pg$2E0Un>/b)XF_aWX87V\6kae'144Pe,[qj#hfUlapSc@6i%C(lSB[dY!^ucR42CgAZY&+TL#K_8lk(")HWEV0`s@a%[cVa)-iL/G+AmjjY1lJ43`'D2VkWj%=#T7?&0:lCqfktb:<90K0m\24TUd:`gn$KfKmI]%/k@08hq0i1C*e:YFc^3<U+8qcSLH\^%Y3Z-PATM@B.k1L<_"+r#E>a\Z4Z\73_.Bua[U.fSX5\PCq<TY+VF7e[8bXHdZXp;f3<Z]mb&uL(6S57dBZ)&:d`!K_/s-Wk^e0AI%8?@3Sb27geLS]36/@Vi#`X?[kXscsCdZgSl+q5(BRCZLt,^cj?qS@+8J/$puc^7$AaJ[',l['s*p,4fpN^?6p38p?H)23lYQf/sX%AV2+1RJhA`$]bsSmEnhEJ>56/Q;23g]DsuG^o?2-?d1Vc*QWfP\RJ!([j83oa'>Yc1+*@u+>%K4N]IP7A5gBVahb?qC&?)2`H"i!%%KXD^4sTTQ#&R#OmV%jH:q=#IMIOP8*.jB4SGDqS`W[e?b;cU5X2!^\@CCtp@H!`j.hdJDop8APB1glc^VkS\O5@,+]>Mr.':6_/%X?d7t3`^_jn<=a2*thFZJeb-na6G<*SLE4g*5=lWEGCR\nsQMP@Baj+%uiD(Ld/iSI_[IfrG^GIi.jHNOO5,&\F<M8qaR8"+F-BH%#LfdT6>7n%Rnt44"1??h9$u`j(s%Z0b85(^>;:iSm;0TDEDY!hM(9-<)A!JuQu:">N/mrE<c4FPQp+]V8iZ[a/LJY_"[^>8<l[$h%*<T&CGaX]NRZJc-l>+7X>p)gt7\;C.LfqDE5Pd5,s1V/@W5/o,4s4>o>.o9s-MtNiSb+QEOnfJi65fW3*9ALmkrSL1P0>V\+dEbn%0C7/Mqpe"&7-q-r1ruD-*9o:%/JuP7C(0rXcK1g]lh$36Z>R'!EuIk%@Vg[.I./A29JV!g=tR"ra0A8nl5Glga>ePp9-EA]T]\(r%`osQ3g'(#/`_cu(qiQfReJ_r_31[e2X_H#1Q^Xk(UoZ;4R8G]j]K86,AWZ5rqWDT=V/up5H`F]NR53F:<1+pX(=YpD$:d8'"9^WZ%3V,ci6[Wi\;KUK4gZI<eROjX1;t8cJl/YWnFQK[WA(+tr.`GaBU<"pSbBKO2:e$VmfOje"0d@cOA0aIah1@Z/3:u6F%G+?G:I+&j%/tY!bnZoFLfNGP+g>]hXV`J]B!n:fDR'L+B[9;e1T>ej(a]n>elG56o/'3Suo>j0c`J:Ka:5gEbL_cporV1'YB!+F)T]_Y]`eRB7%(_r]`$skiUK[^uOh)H>(Rb-C-OHSZj;DJ2&hmZ_@R:7.=l'PE_,!]H>7rGH3NnoP'O9i^gK?almklIbVK8Oq[mh,.,=m;X1qu40t%oO7@2kp1Y6FiP[u8%?arS3]O"KjQI\qq:r]8N[8Ia'Xk"3U]0WrkL7i2.j*_5^]:m]AG2",Zs@C0rI+aI(,a_0IiQL6,dbBSl8(s%J.)_[UBe_7M+IHr/2fHr9+7],JgQh*X1,-cqO?!Mn11HqD$k;+gauo7VclotpV(dZP884oC$6[RS4u3belk$C3]7>d-s`It%u>n:%-&7LG,^`ukIQp2/8$lXR2R\bMiqIN<CZQjfc1gV;S[@&TqU/"mf9_QU!M_K8fa;`8bp=?^^1:l;ahkCeKiQ;oVBO<+6sultQ`rMX%[Glp-hls>l?:3[UfS#J?/45T"=SFd,6gbo-',.f.E9=sQB>C<I[MKTE;ODqMOC0fFGP\P&''d?;nqt.qa=QU5]R_Pej)!6+*jK5t%HnQLtPn:fKFTB;rgXTN,.i)>k:>C\KOA6#"Df.oRZ[uB!Z&Q5VG5GaH[=[YqqP^NR\bQlD=[DHP.eXrZ-d6E:+i\6\"HjSl*ADO!%QaHeSi!(%NKo]=S!!B%t-fX';iKLDjA@lVXaHCEZhubb+'k`=IFTV]b,6s2n*+Mnoc:e'F)"sKMg/@ncLmN`JL$sG&-Laj@l5PC)%VP5r)"9JNA,A&2mdNK$QBcTq9?!Hee3O<$E.F^=Fp7#.%bur&h]Ot@T>eU^*E]_'.JR^k7><@gQA;IV-bC?;g"1M]tNm,CR.gJ)C%CnKUe,4'?3j.Tb;qk]FsTdVM;Qq20k<LusrkC=,saHqVW<Bs$l5R*+ER>j8nZ"OH744tK^8EndqH5R>=KZG/IYqeRq0KcKqs0)Z]%Bp8]c`UNTZMgXDk'Zt*C,;]h"iDp+)OQ3jYMC*'^b>Y,una`>BP"C!GAWugg0cs>haZ8QNc*G"_X"J0oA84S$0]QTuC"M;uUbmhb%?q5Y8rf5r^?s:T)VC,Tm:r.CTc83Yf!'ls)(Bb%1c*;O*OWFN$`;.F@d@>g2ng!mt+\g+T]hoO!^@IXu<pH6`XrEg"#=*%T18V.O%>'@F.Yi[0.[O</>Vu<>qjgV>$OQhh6qb.1+*eH=1IDq4FaTN6^8IUA_$NOJI1/SSL-O>AL]7/nONS.DOWsftQ!pN>[WPZKU.43D5%>Ar^`13a7E7be`P_R[^-&oh"B(bub*YU;e-B:$8(H1<`UVrcZgcP>GsA0EbKPh76jX+e()PC`MM1uT+S?oJ&q2\9qT#GaC2*/P`\%'MM!WL.SJbVBd'4"Z!%QOb\WGb+'B++Dcq[a"m.7!7rqo@m\B[R<)CEA/T$55Z?@!5QST@CY=3'V$H&ok>'^N'64,YNVW+l6X=[]%;`BDSZ2^O]gQM6,UQ6`^0Jj&jI_?VVi!Y<m56_hE2i=B'@_Ka;=l_DQ4#J^`b)]!/-po[<$C.#-dcl+SY=aG_2HZhgB@DaRritY?%(agO!(pU\H-1X#RXF):XNkd5,%V#TmE%nc^%83kh(bkiE[*kX<K3>;+Td$sBf8A*3I@cC#&mO<sr,q9OV&\NLb]s0%"%JTJIHhK#%l!UD,%#S'giF`:]jYUH3h0<&gL$sOX0s%FhNRnRt@9NdI^)ZDlX`nJd_a.Fl\hirT#+i]8;Q-HZ\pqfLbeqE954O9EG9IAVXdUK6%3r0jN&BufVf0Ct"f%Ao<n99sS:Gs4KGlJeh;3MBL!@kXMGbO4&;(oXiNo9hG<RQM0G@FMVDc^CebcJj\jlQb%+,tfEdd(@R3Q?7i%PWgVt3Rkm,;V#BYc]49rVA0cs*3Pfn$c8:\XMA[<5Yu*tVd\Z^0<:@L(_.Z2M<^p)&Js3r<elRNri0)e0>Gq>SSXY*6.VG:#6F.u%C;"Pjnn!gZPm0[c66-J#)sai4f_qS)!5HrP8K&;\$co8V^>$d)\t<GC6SNXTrUQ*A*O'ikNS+H_E-U[C-/RWV!SFfPofTc.V)?,W%."4/7P=K0/=M$h./5:HX3&f_$0mdKY\J>l5.>D9o8r2R"2s<(D#tj7jqH8d+P_DA`bm=Q]+LaR3+);L^*;r1>HX51R.,bH?>XL37%Q:7-GVatnoY4ZD^,@E+L@l`D[a)o^3o[`>a:RZH9XWa6Tq-%8ikZq$Vd!>g[il89H>\@3B?Q\.:*M_lpZTWi!lN'ZtoeG!jN#D!/%j7o-UM^Le:ELH3hgLWrU@VVM_qdo`q<NLZENph31'6BJ8;LIqqo98Mmf6\#M#Yi[(K$j\96>#2gl50_$1)"t]XAE@I#L-TI,5Keq%n=Q5ucj)fMF2P9jS*(6t-2?l&@<c9\=)7.>2qb<TjQ0'n8lm&&S$Al0'l40(U)6$nj;NVP0^$bLh/=\.WS;P)6q'03=XX_JNq!sk%;IS3=^r=)D+PkC[[8GM!.3_>'nCpINP,Y/1,<!_7VNoH7GZepm3`P1kW`l+iZppm\ELC=om=o'"2K5NA(M0uS&L(n.g/m'k;I><p%YC4;\IEUW5Bb9[S"US=WC5"U^C2j&`(lg0DCaBrUS$p"s9o8GHX_Tem#TfVAILNi<[.a9[hIJ:Q+f`EHUp'3aQpq<%6bdB,_bEXH%>s"7UF:?VK3"oTT0P\1C[RB?!AVZZ'9#)45f\EqQ?(s[Mci]%MIB.uD[np(WCs_<UC`&7Edl5I1J/oLbaQe'.5\s+Bfc#8%WS=]L%fW3*i8Vd\^/u?:*2s0m.$k/"nZo]gMFe3'/D@l-^J9dK!0K$J-?@/R"Tlk(MC[9I&:Q4V)3+YCa="?EX[9"<u\i!r3d2^K-g$1qS%h+mg.4\OaAS0]=CGj4O%A^7Mi)ITpcENBU0aL!QR$tr1@<$mW*aNX;2U"\8`+I(^JdiE12a=Yum0F]c!0g"NMXqojo<?M]MX(<-I%[3_MOC[JC!DC9j6a/T:l]gk(kEF[XM#u#UuILdN??B9ij*Xts5d/_]d\$BeaZl6:mD)H/n3h$@Z]@+`hQei;Bdft)q2Q4']Q!IUA%kc<H0s1+[Z\?&6Ck>=/QEhJFbGHM9];,sK\r$d&g=b[gsLc%-oiQ`C[ZI_hfqC14Y&=Mkb'rF:0CpClO,GVJ^XSPCYL*A+"s6+`!%!Zh6@KJOrb3MNof=cLYcD"/LBYX%N^/@&mQUQNOr`sq<\+ell=i+%_DSq:UHW3TPtM&Ij`)(63-.Tn5WqZFms1MdJ?r]CCf4NrM6%iX>n!?Hb(uDAY1(l;>&TEjJq;JY6o+2K=gQjk*k&#uW`'UBijjF0MH+%aP>fhNVU^_sCl_hdUAH3hNNr1-)m\W-,&[/_%1;GipGo%7i_\pd[FA()h`@DI0@dZHJ`1J;(K>gqUf/aP<SW4Ng>:^7I;;\Uf2.o;:s2KD%?8fB>9,XSn%/e@>%ePjI&V0OL`[7/>G6M5c5>h%F0".&DI%cHkoBMOUH[k$i:)WgH3)3P>J3NX_-h-AQ"9kd%#S?sK;E+]SQP7DknV'WkT*8%YS@EDo3_bs)4998cS2nNNnoO@F0B%L%L[Q$cM0Eo@[R_e29u)jK2JB*#=GL9r-p?m!KK9rZ]s6^M.?$9$Jt(uOZg`f/$kJ.`!<Ig<<TtJq?\4aMKN`smR&T,eNL%'V6H5%2%1_G('GV)XWM<@a0egq:.ns2qe7<P\=`'sBShZ4W1VW[D;`:(9g=3l``$1Z+oQL:=%"d0`#,/sWSW3^RGoJN%uItZ_[O:f$'6Du5p%.;r;m$F+#I<!&"M2@gX&4b3%c$4,b(J7L(h!T>L'NS!iZ9he/mbuD4S2Y=YFVFPeU5'oOAkcpfklb`O1)'Z(eN2-QF]@gB/W%9+E%klRPg*=sRC&V1P0`4IE10s*3QS8dW'W%;V_^sdBlg_ST5fWTmY$%P]M+;9F'KJ4^&)T?sKM"Q[`b*(^2L.nXQAVkq6@QIHbMLTgp%`@$5\aB5'Z*6QMWYqjoDlajC*@S&OYRh0J6"\V/VILqVI$u3c6"0p'0+g;G_VSljP_tK=4-:3+^+H0#h9ZeDfUC8p2PaI)'F(RC`%#A*Ad<Moo3FMoj_q\o4K\^8-M+[S<T)a*k`GK)L3<^\6/g'Y.,KkG(\aJKm>#U+aO[k_[(0gaT.@ZhfI\]GJ.bg.P*Y+5:u1fO8%%o7;LYA*=pam/)<aofss&'a^jP-EC`$K8<#W)hV)jYsg!PH:=`075PrRYW:rR/e\9@;B<@_A";>Z9O!3R#h(FFK#BpVf)fQP\G%RE%;>+$OicGalCNZS3Cq2!Pmb")_da-lroPI'B$4)iG2[G8L.'$fV?s(<'Gdt**o=3q&X?PJU,A#$[/;!,'ekrS[qW4`iks=3K/r-+\%fOkN.1@Z1,6<_,SO7c)<iNXXl5g(?eErK/_%4:eq,?m46p:96PN`0J;i$%@`_s0Ld?n=)1:4WYoelYI&p@SG<m4ANqHs?4X]-/<1%GecO-*(0+]7E^uU1b%#S*O#^VVoWhmn2pp2KD!%&S>dB4>=X.H<I'FgqKl6QChAhh:=X#Um[3rD!n'cAlElF8EOpJ4[)1[2^)khm%P>nq]l/iG]V=^eaGR04IZ-gca&T/.$GW;1\ZbllPSC1ll+7'ONaIq?%jn@<;?A)?<D4I"s"'&b\`\KLfbQ<F1?6t;E(28gV8Qo5I%j)pfuY$7g*Q^;<t>RtoBfsnn1FDt`rnC:6,.Q9e%NUYdq+>[Zi5rn2^(hBF;iQN)E(u2#siTkgrY_1;lR!C,,J@[$10i8[cpM,DE%N*(\ZT_E#f(&;MAkcfeu'?%-Z<0(IN5!=doQ+>nA[%fp")6gci\8DQ^>'+6#0I0G:_e1B3A]diZSH)nPnjKh_`"jeq'M$$R*:k*!%EkKitVVP"9MgYW+C#k"7aY)Iebd`UI_`6%a%gX[.XCrM+.>_;N[UHN+0VP..?;'7#L8\R&(GW9e\T=ku8&G3EX-N7-]\`P:h+h.T%IOKV9b.qiXF;bQK8$3\G*!T&+-0NX+8SK4a$A)lHBng*^#/B!<&8M_6-LFkZbS0kUOsAq/Nd72.,d6pUEOV,9q_f#j/D10!9q2K!%Ni,XHoAuE&OmSqVPY1'3@FF3dFHEChgY?ib$l[=1?jmckYu'i!Lu!oMpYm#$C:OBhD'^=o[aCNe@f>A!3OY_\='Fjh`>i)&ef$1K%F^7.6a^epmiO:<dPT(!K!,J6-I>)_8Jcp@7]OYsN^9;E%rT?smiYH@g:!*NDCV\=EoSR>pMZ!!9G9THV^RW(gmMf2V\_TRp/#UFC%G9Q+-03h;a/_?,LLaZ3\T/2NDBi%`6c-Y#r.JX3lh;9;;jD?&<"UHQ7GGYY2)+s3CL6d1reg*VmjlnjJFb0J>m@u&0Lsu>O(*[9>%CmgU.7th'P2juQ1iYs7\f[VnF(u.Lpk3*>%WH]<,B!H@E3+&@uVFTPHc(-M.b'GE*5o^/;-"O<L*p02n\>hP;dTCZ;aER`fItY0;%hIktoJbY;^*FJ;9gEsji+P2TQLb(V!LgpPf/7fBA13]>r)UE$A^k>?WZ,!]bpNtt6ZU$8q)D-3\,7>B1(;@as!BNUij(uh8a(B`U%kH<<3$$H5?^@2En/=M>f!l+23rJJrF<\$<jCk0pFM*ga^FW^o%8,;eTknbPf.j?`I'r^;P+20@8e5)C.anGfh.$gr-<brTtZ4dfg%fPJZe)%Q"h<rlh]'A`ql)<FG"]Z][NSD?AKcY6?c]fY7PqU;^]h?WJL.gC[$hEZDNibsq.1\W2'MdH%&`+JOd6g6B2Wt;=a+ZIu[%9[e(#>4NIUMTT*PaUDBH1Hn+Fl4/%XgA#7gJRLU[1]\lT#>SuqE=&M"UmrLHlD-1CL7+E15H"t;",KKJ9YWtr7sVcq,_0S:N;+#q%1^;K9FiO/h)D"r#59)6N1kbciXG.>URRYKOq6oKS)*s:^3PEMtL_5kqPnVk\-=;etQ_4l8(_I%1C@f3e.t),6SKg.C+=(@Xig<H.%XQl1m,gn#@biS9gLZt&Dm#KW'8bslsaLiL,Ws&I$%Pr]H:?uoN2csW`d;,h%`;%CL%[6SAeM@bLI:Jh>Qu$&2hoK-m(p%o/2fa^g%cr3Nn<&u3@cUcr$\518oEmcnQFHM%;[-p2>g*SiI)[.g\\cV8gL,oS@3pjQ"<i7$o_#$S(JKN6.qaO0mB(\Xj`[<%b_$k&836Il5%^q?bUn"+,jPc8T6Dc#8&SsqUo2l8,QfJr==.5sq\ESbn.,4E-QQ$[>QJ`+1O&[[PhmF[/e^%l5ND/[RuS8SrlZ4;/seV7qaU^&pQ%i19Q.fS9'Yk<Bm8Up@]TgT\D=0&Lr;l)\gD2QUgH;(hQ8@spGI@==(!^jVi]^)bt4^AEafGUh0Ehi;PUh`VuK7e+C8qK?PqqSp!=%F.0GL/*(WBdoLJ.QT;N3g1mpUeTe,KIhPJV&m(cQK@cfr3>cb$_PbU[D8atXNueebS@Ao7T`t12i[R.VaICuu=$p2^\-e/>1tRaE%i[S7>b!Q<k.^J^\m>NOdOKrO*3]@171ar2hibIg4-XBW&Cp?'\<E[PM5[8HUWKrc^9?,(0,Y8%[&6F9h\Sj37"h2qMPXm.k3`I@9%6lcZReSq>s6UU)=WKWf][BB7[H&HG%Xk!=J\t/I:R>mK=$9D(NMd<iF@2mY[k*JP@h>X^C<oYh`Bm';TlN#j0N*enaXZEof-&/od%-Rru`1&]O6M\%40KAPlcY]S)\R$9U*Oi5sp7jfICL+RSKkp=U:UY>-;O[.G*^G6F6.*7Tj^OTIhC.YPiqtAi@g:ST2i]B]mJk]#X%f%LD3Hnm,i12$lJ4TY*(e-498^\$7KL\hr%H_UJ=[]u)3&AOiI?7R\NCVF`EmA/"n#q)Y%DdOckip/d3Q>%I]NY2LQRUh2/5o#=S%9fPs0,=N6PKJCC]""2O`miqW@45\=I\;\g9?=G=%<n+O^YU\D4S"s%%)3B[/@c,s#BU-480%mo!ma2U`r'TZ8+o@i%\T@M\IN+$W%89BHYZ-=Hp/i(clq[B:?O\:hV53n:BM61osT7JDKj`[Dke\]6CXOK%^7Hs%nl<2*7e2'3Coo<*VaHh(:li8LJcRPf!<mk,`oYa!U%l`gedRGR#+Z[Tm\Yi;X`Z^rZOM!e9sRK"V\cB(a.Fj*<:l`q<(NHPMYk`sq_7Q\N#MM&i:42[WlKf@^'1-+:Ul@FEISKVsD(%n`o%4-3<FV,Zcn1T[i1JE4@!9!BKHi4Lk!8ZJ^k-(aXj[cisb'$m4^Q#K@R`%rfLnXhomM2MV`ND;T'p,bJMJU!KR!K*Xbn]p'4Nl[(+%c4WJYbD(2kj0U`!SrC9ikF%Ta1;Zi&+Auua$dLQG!uqMbR@S]UAN^Z%M.n67Yq#Z.=q],qR0r#^,^Vs!.uAB+gg7]a3(artDhOmC%I)Z$`atJSHs#?Dc\n.6.?\U\<;)/*c@cE%,\MZ,95B(C#pYWM=T%2/3iB0N(X)*]KTmit"L/gt$9s-;)EfDRbo:7D_;F/c>dBSN"%(B/2RU1!,3$Y;$T6K+IFX]c/:K[aHu@]m%'SdATDNPN[VKSES<mi.)-#j#5g%t/O]G2"q(\TMN-12ajC\]B4)cN<cC7)V,B@'qdL%O;cp^[r,n;nBPhbp"o='jEd5lJ9o<LZ2SQ9ld1He/ZnBnhEt)p:3piJj3/dkYmsTA(fr9N3*32@1IuCL<%9#KJi%ItdX%6WQ@M\%%C^Hq6YU^2Tc3D4G@Y8-IZU$e-C;C@`]8&+E.iH??D+Q/.>'oV6gI^:>F.?Hq[LD3ibEdqMp[H#]ok90UBY_8N"'-At9"1s;<U_&H%2>&$`1urtNO#AZ%+g"NZeiL3I[5G)Ug>YJ,h+mgmR70!R\M$lA`E#<gZX]TggbVQ\:M\3qL6t#5"@AD17DQssPFQnL!gR(fElQ,.%<.0Tpc93I4EOVCtN4%)mrK8Ng40hFuf%P]!1J`%gUaDBQT&bj\6]]1Nj*IGr,[6FQ59eAo;k/3sdbt>?VDr'S1_3i$mFOmoDTBEm%U7)klC)EAn(,59c>\H7HlT(b!3u1_`*V3fHkbN8]ZpE,.4o^$YV$Geb(pfK2ksK+*-!l@aKG7n96>Ei:StPGHD\1+#%%,T<^;\a!%<dJWUZ+k0(IE82\Rat/rLhVfNbn\qX21&%a;R9kZ<gM*k[W7uW&t1i+-S^-e6?CI!(43jFOt#aL4`!Bj1(3p%E$Q9[I,-KDCk?&!%o9i`=7#!js\S$:DAi$2L`_))kaip\N^M*";'8[_;aiocj8i#_To_"$A;!nb6bhVB@[W2Wj>o>un1ESo]Jq/s*>bOk=1KO,^:Ap2T%06,'[`#t()kEa3uKOR!6am;R>A9P&Og@6^Q9t_G[ZBu;HJSY*g9j,K5:dS7n)VT@6\XAc*N"W'[(,D;_m\Pk[b@ChUO/WDVa\5#D%1TbC=1Qb!#URK:uC`0+;aXdjG<Aft#c),[MREUL2(Hth`m_d)"MLm"8)4q],:3e0B&8p&^PF75k0g1_g(_1dW.PieU2a*EDLh1K\%OdQS0XlDMO!?5H&YsT]kSf.8?T#hCOkk`#)1(-sN;9`WP8u%s-=sc$[BG5_>1H2e-mSG5d2kI?e+'U'JP:6#>':CYIb@;_POFEd*%*]&@YS7<Tr0u^:XO#^-lJu?SR`sdX[Hd?3IPjVTLC*#/tnfC6e/G"V<bg=It(RShk-RP>;R.Y9-jMu;ZLMUQJ2RV$VcXoY7QCqBe%R?7g<k9HSCN9!>^T_E87a-7^@9P/gP1$k=PNeL/=a#oQR`A&aKAhrD&T5JlsP8Qltdnls3R`UMI#A,ZE9P2=3-F73RNsp]1#S"nH%1l4RH1S+r5-14urimt5RW#6`8\^dAt+d:TaONH:\X?"F^G&Y,+O[XR'%O&@qa^ppqp,<FPb`6P'Qnuu;k"QJp@m1FS7-;3u)M^^m%I8CMNWenq^XVf'DaXiXNFc;a4ph'$IT#n&EAOp>9OE"[;8S#h-ZDP%[e6p<`,-tdN)iMG)D,*@?cT*7+e%Nj+F92aH>UB>12@`tX%h]ju#@^FToSCEp,f8>5<B#bf?#Jj\^,T(b!<+a2)UTnoQL4\Xin(Goel6]D9/=dY/g6nB'24YUDVYoj/SXHbG8Z[H2cA^+/V6W7T%)/$IHjuo1O!7`5[2D^\U9QI8gbWV6I&_F#8bQpR7W24&6qt!sT3ZPGn.De$s$bR_gT#DK9Ym"Wi>U;7B2D_I/OqQP$Ri0O:6^ZTV%RB[?k=3qj:SJh;8cJn+494c,M9=_Tpb04qt<9YTmb,k>93D;;qR4!l59`qA?]a,u=[`58fa,YFs16?BI916(GdR"j.1/?7SItiP9%qm*Zb):J)C_iH?;\Wu2?\=$i5V-8o2HJc0c8UECAbd7^V#%YtBY)k"ZoDF%SqhXkW@1-enO9Xc#Bdfp-l]B^8mUf!\@h-8Z"Q`IC%,N4*3H*+`T>4GnYDTDHgP*g5=`&#Jr`9^T#:rWmhQa?dTs4/ae&9@W+'55@\p2')-WBD1n4V#64o]/i3,N3g+H(DSnYP,\M\!%#C%aJ1(:@nu"A8k`]kh8^MW4-msH_[btuL.#WIH?@`<=`M[1_gaA02'an<(6Y%*o2K68JRrUaP#Ru>&i6b+b-`e@W-91QmrV):l<q[b%f!T9]7nY]L="5.L']&i@THu=>7IL9Jep,<nidG1i:AU"R[jEg#"DjYg$-\EH&t$5U=dCol0K[i`cM-(KOMhQd7(AO@3`Y&[`$]XD%<&9q^Z;rcQ[C*>WAh8k]%h7dI^pkNoq96d]h=H#++:<ADI-)JJS=,g'T%&^182grm95<Ug-MU_$W>Wl(A#4NMZ^+;6fTM\c>fD2l%3R-3WS+*cI1ug)\=$"ZAk4M:7n`4%G^c_:9:h2:R1!4R+nTni8%G%%]*Z"Lu&#qY7=H;mha`Eo5KV]uBc"ZU6in61`!Dd0:-u+hp%X^dGh[?E+:@`Cpk1>Nk'gqi7[EbnrND!$R]rFJ]<`f*8/8k<^b)<0j=8^06P?SW_/,rNRRR/Pr7bsY$mJ9XsJYgq<=24p;[i?VT*%c"G<9H8fPM:M;'^\^QYeSEYoELQnCSS?Y2u4PTQt@`LejZX]Si%#!b3)hao;ON`Z[j/d=mJ6DGe-p:X`Y1LLOONd'YAca86j*5T2%PW:!E417^kp;f]oA9MdQa:)Q,L6P"KZX]Imk$5m@6R&jHRm^kC`D*/'AhlHV8S(A]ch9mePIX"7OVol491&/:B#cfdbZLu'756&C%417^kcFl\NaCDC"-B/o/"3S'*1hOcdC!9hjlflnMjpGsgQr+%,>s]11A,,/hJ,f'9o(rC2BD;5JTBYrCT;h_cD#q5o^\dnhl18!,%NpVnq_0BFo<ksV?C[s*l@^?9NpM366jiV@>C[`@WB"%E^ce%O7arN,RY+_!0/D&%0=%q4VnU8B"%8NXaN7XZ5`h"'R!PN*e<j"QR%Z5)kl/K:k)@a%lU]4T=]e'AiTfq-s'SsZr$nAMb0kS<,9eGO"9p>X2d=Lt3lNi$]TauQeSMs0JqS63RDMQJ4EYA;LdiDf+!*:@5A%-^Ja#iFj/(XG"9P*,9XRPC$?IhI6s@*)5Q:QZ0=';t'(tkFRsC\"qK2Zo=h.<l3^n%OE+=l5g^[@UWn&b1=N!@0%b,G!N7!gL9rh%@W.$GnX@:bT%NoUGNcVR-?n[ECGpBL^&?To[n_TH"$H5H2%)NoCG)%5kp(>e#4KNYH=Dp?oU8&eHL%"g*q"<q,S(\tZcP:Er8YV4%AtK>#MLjWB0CR:j:ZM/+[GKqXlY*dUFDn_aGih+,n`fjVZ/WZd7l.m"pHDdQ$/M*C!PN*oB._mVp$L*bXSP8cK3=hn.s??Nnn?[b%6/T!746tG;Y="jDNb3a0)RrArdo!J.q6Tb=cK=S(#q+kbQn/dAIugXL0Enh+k11=;(L6E@JQBS30(@DKqe.3f*H]+g:fgu-'"%Ds%I5=/pGf<GIXR/eqiY.ft9g?=&1`6,S4fcEO;=Bn^`h%M&DXab#043-@,Jo6p/&Fg:o?<l3TGK0e+5Z+t\BrTnFlB).c3t.T92@)J%JR1,i`0Ehs_[ZI.Z!j_VZSiMD`SBsa(LA_6:M^QHj>\&"^0"(#(a;H!/J0'g^_<K]Lc2<P?Vl=n-l2HDL#U">S/<bo:q'JQ=MfpR%@RQ^Iiq%*.R2$snpWXNej#bmJ#4O33`ok8#bbu-;'rsfGq_b_"LQCT9_GPNf@cI0-#jn`7'e8%/3s**+n#-Wg#*1k<%?&8'j_")Y%Y]WJ%7pLO#Is`u^:J;od]!'dR^)E5+]?#dd]'cUXnn9:_Fai(;njSO6/10BsdS(up:R97O1-RfZT7$@&pQh&5@bm:>7Al]D<>P4?%<seAZ@3pqu/m267YiV$^jn"7OAnDAABP2&CqhCEHn7ZNMkQOmX?+IGP[.<'3[Ob5F`7jcZVk"Z2DEt\DHoP#"N%cL1X=t_siPZip%U<OnR@0oHabQp,mbi^Y&RAFL]:J<X"?Er&!Pt,?/%JlBuAup-]bC&i;S="1`oQ<0,At0HMG+9(931+eGXP%\Z]_]RZ1SW..o3hqq%;pPG%>L-['")dh3(0n-AI!Ctk'@;QH%I!*ZRQ5'Ik[kA%nG3gIcjfi;D('E*NlIbZY?6SFb.W)a%Xl5Y'J2BbL]Y8%+f['e-DDIO%/K<*iInf8Pp>:3tU9UVbRHP-/_bLmt3uWuk]Nh]U4WAnFLZjAMpkd[;7%<#rj*0Ep643@J%;D5CO%,oH03F@r_CK5o]'b.jWEo;5%+Xo%VA4]sNqS\Utn'D5BdYCJOUKK%3&4a@\`s!GW9]I=mfpFs1KUg_bU(<7gVa.FgSDq\dam&Cc_jU>"e_l&XWNP"qT^L/c/5U?J%2&"KGQG!XkS_0^'Il];T"a\E;<EJT_;E*fD2Q<Cubp`88'0dD6DU<SY<6KtC-E9<afr42QSWW1AI*5+sbrV;mWj*B,<6tF/rXaK9%dS?lEnKa0-X$ElAXm4'BiT^o$_f@V8g'pC97<mR1<S-Vs=1@*@[pD5^c6rR?@`bW9]JjEPYe+AfMCXb-X?6%`CXu4^A)CY#B@Ue&%2e_$@DcjB<p$._gE+7Y'_7qpIeR6'uh\o"qgPp*d[k(cCF`tr*%G/(+>f.t6cd@Q^A`\6hS'T.ShW!(_lCH%tcjMb8EKGsI^M<GQ%WH7G%CNcn$Lr[fUB_cu*UTY/o:X!2SGg-^6,PmQHXOb?l/7BVRPE/2<5d+>0^51sC=NKc6=%m.3`7.Q+AHNk;AR@"g:MaZ$l0XIC%D(<2+4f\m,Da(d#hlr`4[;H2U5d+>;lH6dHm1+Q^LA%]M?bUt:#.5@HH]-Uu,Q2:\CF/>KCL<'WUSTQhUT#ilCUU[_Ec5d+6/SuV%<NZ#X[L_,<@X5#Nf&$%"kS;iV>^80?h4\ahhceq(b\nRF:`M',2lN5*DU>k/EH-_P1rard=EZOF`C[km1A>e3%S"#AF=Z1&f:NoH%l7?C_Z"rS#-G-eWBX=aO?8:0aQ$]Q;Ti]H]<PP*\DE*]&dr6+)*\DRDHHgOJ(ERF;JR1(feTH6)>sg94n#CPXqd#ms%!ZdcH*H4T%HuQVTk/G\3>4Xqjrku#W<Bj[\5-D`La;=<pdE;2d*VK]P.,ek0qdQ[M[/RHfZ8;LaHHlF*R0H.`i5ZMSd2#h8c+Pj9cn!\_\oM^!%]L1S\#=bhV#/NX0=9R[,UIjs5:Vqs6YVINup;,(0eD=.A6hP+Cr4%ETfl051fa[6\F2`+n=mbo@`2MM>L`#>5.q2ep2^<cRUD&RF%Lc1IV%JlAbZ.clM.Xp/C)uF++9C*+HT3QcJ27D8SD/B-_bI2T75d)%HCX0V&H2M,P4g@?)Z.&q5jMr@)UIDKFf=+J;?VE%!k/h;]%d6@BrC@bi5D"%,D<r#1nT%GUs]k4d5/$E&-j16b<b;rY9@(Ug;nAkFa1HT2+on"?nI:Fp4198i)9UXGG(MoMcgA\1GNcrYsiI/UU%p$W(-Ao$]9dq2m2`O>TDkqBq(-\fnbc[/=Ja&Be$kZOOE^")_TAA=lC['i_V'54(@CnPq4h?\F_^0q2YWV%0)5;(VTlaiW1F9LL,%KKe_LQ_WNX/6_q']j:9jDqEB))C6A?Un<pV2j_N:n7XKRY_8e91q"k=gZca?Q%Kr3Ed/+<e4T(UduYJ>j-M<rOeR?MPT!-hf5.Ed%faGgLkjN<<e.:#sO+u0sCmNV4.0'StlMq,>lXq2h]tq+^o_0-Q0.+9*oef4edJR23(&McGlY(hI@PN*a`^X5Ef%?#sf8k[>..q8A%rM"X6XL.Xqn'/6,9tt)6XXj.#g)KZ995W4*DlWacl2+ksX[W6GDYmSDCN%(lW8cZgqsd("2!;l24PFj@S#l@]h):L@[b[!;31,!W%3UH+FT1.Q/-Jp60B_224KS0)ENIPj5^E7[[d1dSVGdIX(>f+l>>Rt:^(]Ncj[l4oN=*&:)rqQFTRZ$L<\[NB)7U=]:Nh_9&mJ&27%OJ<hAe3&*(OM#;!2,!K_H1mOQH&t.8e!<+PT"Sc1*_"E3Z6k't/p=TQO/cj;Zok@[]k:Oj<R7,UpbR>u]q'Gq3t$f*0@e'c,ohoi%?g=0cqt!OmDLh_t%a>bP.%UTPoTtGJ_(Il!Sd!%(Q\oFl7Qi/k"XE],MJ'b34Xcm*KCtRgB>JaS.%UV&op:PK_2^Z,ScqLTQ\oFl%VS+FM"f(eCMJ(3)4=HdYlfo;Xfnlt\'NBD)gAT!;IC+B_P"P22^;#t5g@WRF)>m-!V-jlW,aI4CM3#e9Y91oTH$k]Q$?kW!;X$mX%q&oDF/ED$=)^b-\f$-ZJ81M;e,Tih?JsH6<IEP=`XB-JK)pV.>2tqLepm5G^]+U.to.S(I[Nuo1l!K;k"ge&uVA/C^ImFBY@NXZq%JrT`h&ru,J5p5AcHi"osoVTHQ&.!U2i][VN]kMM:f(pa]mU-14lR=cTG@PtYRL`HnAi(3KWnGsM=`/*FpG?F8;seeFnD;:p8@YRm%?8jO\lb@B$mBlO^HHP?4l?_]AK49Np534-qJY9:%ZCAp1B3)RdM_Ffj53R?GJdspBJodc]Vc110Wol7!*5qJ1>M/IVYc?*(>Ko4V%HhH?7RQ)<`D_4$"cr='>dq`g--H]f3hciej6n>3)j-hOWPO_B3ROh8e)4o9DXi`8K@u;@4m?6'^+ADk>JiKMW\=3Oj2p6fh,sWR`%KoL,:!3%o&')6P<%u?J%dF?*!.f)8HVbqu,=.bF1?J(Ib?2>dKlH**'US?(,W1kB)ak^c$5C2[9AkS50eIOW4PV;aa<'P]3>c4:;%Ie[gqEAcF1c<P4TlpmC:?/K3X\kW?u(V8r<^3U.rD6*".+qM1LPPm`^/Smsa*gOA*#EFpf4juPrjk_N!g>83kh6-VUM'I'#?2"FE%mO"Q5Kg3)W=_dY6(&j:Ln2)u\&*UXsT8k86[6+eGJA')9\X*O:Fa84]Nc$Z/&(lsfo'N_)M4rm>-i639^&0^9@kg:$q'`rCncAhD%n([\<imDm4BM:0\<A7MSkcu9&b9Z6t*AKISjsI!V>X>6F]:=II=%uD?,$@^P#=`KN8VCV%dSUXN@aFVVG9#]r;]'dDV7OEt.9p1j%SoJS7_A.LIB*W:(/Ot&\%H&47f*63^0@.)h+X13%H8cOTJti:O'Q,/H<F>SS:U.I\rtK^8'lA&n1-Os!-6g,F2`ES@OQO7^1NZI1%%6C>g[!E#1:]V#(\pJ!#)X)"<>':$Lb8>)`eb-WYfq_HQ2>ba5\$M*B]Q.al]%H8,(DoeYr'A*01Te<E&b/U,B^>:"W/bRNYc_d7%#bBhP*.$GOKCr-?=aB6DnU>Cam.cC:?*4%Yp-[0^:AaWSh`I=1)Vf8AM9YbnVnc$.BH+8hJqoG55SaNu[fa>qD($jB*V#Ndl,DEF%0U3-kJXgDhQ2tZ,*N,VB)X%:4(>]%l_e.-El>FUhD,i">>(5hIgM(Ri+8)Lg(j`o9!b2Or46ZG5Ja7Gp8Efl"L7Sohm@8>)lb6D^%d.=BbU$%t-=>0?0l_QNcp3f;<k;TcVXPKPXrm5kudiNqcqcdrI?TplBUYV"F*HcO7cZ;0!A1BYQAuud;gTV?"9tQFlP7s?T0[+qi%-R/&Ek,F6*(cek!R1J^faba-=cLbkQj?uLe!BF$C37H`'EZts?YXikV,1^f58H8/WlL$N<d)_(5FNj,IUaGfrFWf/8;A6<aSHl<_%pFFs1m4nG\cBLH"hb\'J4UmoBE=TR@;sogpF!LcIHEXXsaF]F5"cgm=[""*,_I@XT8*!tdM2h6mb1uZ5#Is.U4kFIIOU^-m;,'hU%(3J%4Kmnddir#L#>-77?Pc\_FW',+d^Y<J+5"RE/6q#O<Rd*-m*b#;FXZ#o:^7c]2qJ6QW!>5:M=NlMM.*q7[**!<$4Vu'';54\#%c5'9QJ7p7Bi?,p0HZUF7L6cu^$B_1-5Es&DUo>jDYig;OQ@4Q!*hNhN<Uq<uf.V:0;(7!ThEM);cr$\OZ7Vl^7V%3Sd"Zqh(rkd?%Z@K+14bYuAI'B:g!]JQG$9h+L1c?NNNjOoEhP.^-?g_-?OM@GE%tRQ/fU7MTCm^!<4stP.-S/!*\miQ;9]Y+p-^[kZ+i50uG.iIE%WrPk*//e$jGO/8!lmqZ=]-#aoh(-YHp=QH`aZQAp$T%3$o8q$ip\0qu89>_aMPW$<Kd)kt1(ViM:1MR39FShm3'%sKf(-mE`2B+C%nBO-!_U+W*%uF93*+p<*7A<(b/uaUo+j/ip6QjC],k6tSk.2a$HJC!nabY^so%\dWo+6^_\h!AK8Bq(8bX56F4:B?"LIC):kKH9t%D(*CQjrjgUZSMcEGt@d-*k0'T)M.$A49X*YF5n8R=N9%[`n`Q#)WQ"t@A[EWo>-B0#_Y^?c9'7W@'"4I]L*Z9^,X7!4G0'o6[0aI%2$KoK%hkq<:Yu9;++dk>GAb;_6n8&6A8LENU(0p\Wr,6Fr4b5_G5`Z+0pJ6^n.-OfQ9Hh]+b&^JDpCIe<):Q%LQ4FeO>eA]X>1<K%@+`eK]^!^.,Y:_Jo-q.(&!?6Nm`gK3kigi!#,</\mN<)+$8s/REdlas%l%DeeKbqh-nQ%c*M<WCL172T75i@W8+21qH.]:&N']uO%\Yb;+;KW9d"R-0PK4jfO^-Wd]Tqfq(&LiJQ,'!RoUDu>kns`I4LOJiKgCOn'e3S&`&eB9a4H,8F.'MsEZ8mnuL$pjJn'"-N?NTa/%5XqKh0-D<FHd]tKQ)s04(XZrP3gU7NA:uF!5UL=Y2T.tiD0dZ6*.A70Yt@6(Zn)F4)?aas`l"/^m1<JfG!Tn875hM?7pf#MH)=Ma%ff-$;ntDh^#D,eaH17)s/HZShY=*X9UEF"n23[3-.>XoRc-1V;"d*G:;e7@Y$6kK>Bp%Tn7-$Ym;sOi[!;)'"0G(c8+XsKJ&:;!Y%,-G)eLcBRQ#jc?PSr]"&jLl!)OerkW9j;!Jii#RD$pOAn(S%+UDcR&dcG!sA&/g9@SJbI]:-lgAG$[JW2@:XOh>GtjlYRjgikn=Q%Kamj>H#Dk,g"sf*RaGliH6jXg,A)CrYZf_(3'(8k`EB0lN]N^B82mCl,$@JU)qlI@B%&SdL8$_5=1)6N&p]8kB1=:c,rr3?Tqbr!%>*@Kcho=DbbF`Tq/,-2:.T#40<N]^5SPI8=\maqMdS'@b6T]to#*XR(;.[uRN_[*Z+WK-Dpmoe=6WoFcmcg\%c-*-;h_jtJf(*IE%AB[-*pbVq]6TT=rdKqXfEJeH1bTlFtb!Bu=9OGdH9's1C%9%YW7MH9G1GWAebE:%$*VGkH=^LoP,B'JSIi5DjUdN@m4K@8$%VYqB%P\edhMkhERfU/gP)sSS1!_\!2E:+E#r!,5h)q(FTG=/nDER\]T.L$ikL*X>"D+KFIV^]+G*2VOo\3m/.N_gBVDVJ?=;*N$6J`1>u%#K$uh^j8DsTi_'(!PN&N]!m.GGIQ$BIIbfc\fijEk'9HUFS+8X1V+`RnB4^&0Y3sQ0:*K1NUhgG#aE1S01TQL*ob)/;E_h!gd>UN%4Qe?J:l$h;Z.,Z=d>!5YPhU=-N)U92;$9F[K*Xl=p<#\f@D\4&Z.Fhg=H[jFYVm[LZX]Z>;2L*27_?7%'+qX^`WEX_&Wp>DJ#POu%7+0l=cZt=K9D*!:)@qrV+;*7?G)E1&dc@&7N\'"(k94:Qb7iI%`^=8D;dWOj.h<4b9qLN0%hU8Og1")(@S\aVpKCkLM2)LF&(N_a%;4'+%bntEZ+dPmK1h\9s,0q:GO8ZGZ,;T;ZGmTalLj>I(r='@DB:uTg&J:-S[q#st,9lhXn3_+U&Wt.J-d5=R"M-d&kuS'5[r/1&%8Q5n'VEO0B;a%$$o!^;Dg/&@N(=2ejnr&\B1D[4J1:<YCkNKUnlO94^eEMTN-3bV<_XQK<I#.14>Vj+rC)#$6LKl.2]I&ALaG5d>%Rk[>n7*<Z*F1VnKd*_$Kb\b:>6T]D^=XP0U0Z3'*<CtG-4*:,jZqoCaY/Z\Fg7b:f8hesB%l.Ga[.4\II3*,JnIXk(*grt>_[8T>%?F3(i3I$F^dgdCHer<-\`#b7%Pn!--d:XaBm4e9\o/<\f$9l)Y8;C<N;S%'>3ct#I)f)6:DN3sqXIR085.fZ"LM.#>c5Xp"UQ8(C%p$Y,n%fGA-YQ+BK%rq@>\)i*h<W;l651A[ZJ!M8Wq57#U"I'GEDa0Q%;a>:+DaftV$N^mlOZ<VVL1rc3d[Dm7K5qWC*s'9GFN,Lc%?kZSJT:taGjR5nK6V:3iQ;a5^V5Q4B\>`c%Y\[uAf0AZj[gu!1Nq\:XG-jSO>MH7h\XiB@r=o.\Ns3A6IV<m%%aZ\(Vu$\8JHu0,%S,ZBE17%\]"d6+$FTegDGg@NiB2R)t]+@F^A'1q?#k7i&O+:@j^HR+e>4i/cYcoQhNeL66>eif3YODP&<%7\u77-f@Oe,ZU:Z-sR%)[gu9Lo)</%#"H61Xbcdp4fm9Id)\?4\q,hdDg-3#+^LSYHSZ?1./Va#eack?WcU`3j*a@@<4Amd=<kr:.0VoP67W)c2RHuE`Hfo%7q]fTfZQ*eC"FZTeC,8W7X@+s;.:!]VjPe74[FY:.=#]%R^LG#/P`X(+g#+!9R>Rs_3%:TiC"16(nLgYGLI+p("ht2gL<tN#G3e9%O@s9GGJKkO[o0k!@+jsu@jH#9B>eQ3O9HNM87ZlHcQYq+gp&qfH3E]B?!.[c>3QL$3bZ_FCJRJQR/7Ws0e5aaZPFFm1D6_1B"j3W%"?Xe=U3t32a0q't#bZRuW"-,[g^h_EKgX@[p`"O,!a/s#[ntR;2ZVAH6o]8S:+QoS]F`"Lp`Qr\l.FPJ=9G!lV('n,oTY'96#?qJ%,W7U<?9Uk])r`oW26<7Wc23p]Rb8N1io\dE;4$Q:1p:]&A6=()\`0$mGo%2c$\ghF]tI+uWe*qI?32cA%5P*YgS[?=;6T$I;![ub%nuj.fU)a"M%@iYU*;dG9o.nTL_ZQC97n#(p-4GQ_L-SXKb/;Yg?tq;6DWMOmlQD(SeBQ2GiA<[f`>^,_M2kB5*8\roe[>:P6doYK%,JpW"=H:65)ne.=OTU7f@.`h;P;6C`?,-M'X+&W@j&EE/5nCTKKk@]^T5]gnf-Q'o;NN/>pB<Vp./4GnArWV>/t.Q<Zk:B-mK.Nn%Z-tZTh#Y!_Lb/O>=jsgB*WC,=9qfMo&6]HQ:Ri9A!J#$+$Jg@oRa2q.J!ajbKEDuQmo`/`S2oh.q`Asa4*<j+d9;#iOaUIq+HZ?Z%cY;:Kho*ZY_JeV*+0^n%6Z&7LJ?KN:VAS>V\B*sh27%?.YQRF=0&r./;:d+`DF[uE0jji+AZur5Hrrh-C+ST(1<Pp3cIM5t7%7)p%Z:Ljb1>:D/]S@5+L+JIPRG>J27l1@+Q.SBg=uaM1X,J((A*?CZ3\SjB5l?ik@^NOG^C6$$7<2[#8'K>V5]\=>EA?F9#n:FPVe)L+%=o0>#QI7eGIVVuSctnBB#?@FUetF6n9jCc)g73N*][<B`nOr$cK3Jk-kc3B/QekNCZAo$t*0Um[A'-7!o=LEsiN0C+>Y>rK%#(dj%$>!-%Dlj@[5]2BYTG7($f3lrOlXH.5XV?Wc>AH';3blNCSIQeF2Y0AI7qe"c)-9e;,6H)[9kqalECA\edW->VifZg]mE3!uDP]9[%<=!AaYA%9IAhIoQlL+^Tm-hZ>n2fJ[le5nbNajgs8W_]jLb0495%&SD.]Ha1<tbi=??QH@>IZMKQ"7R`:1"=O(0QKO^prpS'?UF7%S4V"N$d9jkn6kcAnt3-s)j2djWT_2PgJE5YnQ0:10Q8NrbHof_)]):"]jfPZ9j[M8A0+CGoJB3@2:d>N#*eR6/MC_Y6YHo'U*+?!%P;N>a;mF?7XmJVm@c6.R#S)Y#s6<TKl=AeiG7e+Db.[fO@g*<`k/(u$T"r$IM\;3Kh1XM"asdM%_q,YofXQs(B!-;(lF*eh2SiU7%@?treSG`ESIHuo*a*$2OoK2[e!`BTXFj?terJRBj^d/?K,UsB;"pEBrb=m41Kr"&`:S1g+mCJf\:JZH[8i@e/12#0cF\\L=m_*A=%>m9J(pdSNR?6,YqCm*NbW?W-!!F?4^(2_>nC(15_[A^dF"B&tJ[d*S!AslP]M"g&US2:?>S!)Jhc'Xo8oO,1u+CdpKH-.G3!KW`o%Oe'iQ9mMK!N.SQ2#iae4n:=[V1`D)<QMYN8R3^bC^n$/AmeDO0CCK``!^fMj*sQ+C&6tIN1s1g'G"e0iEA`.;X-ou`B"?@LTEG.l%m/ZifJ/s/RNl&604<pKcWX)fHYl]gWV!Sgum6u5,EuH9BF<IM+=I!31Y$rq=*]#+@DeWjGp?0<-#0e\G5@Nr-Zrn;(KUC%ufS>9\%i1+(`OiT_^FFhHlieQX5lX!Z'[L=1_+*/TF](0l`:SOQimI%9DpQi=S+<uk0g]Dl0$s>K][Y9lKW`:SM1m]pQkRus!e'U;igY(tc%=-hTOdB'4L`P\bPQT/&=6'\2+WM[94qR9O(Nb=N1PVY>VBN<ZaV''SW'.ZDZG6hK[?LG/AA<[N6f=Ycu*11N@N`r(-#_C1C+AZk>%an]LU:UCWKA2rik=!(3VUlJjDEgdP-`H".b"F".^BMUAlE^pV5rp7u9>d&]%O)n#)HfBoS>CJ%>PZ;LFH:P%HnoG4L9qQ$nInbE9%s5INm4^PMQE7Odum7QZQo=#[iqdEU%35];_+^dDY:)&(e:#d@J"+akDIV8oKE+DVms%#M:,E8hBeH7hAU2`4NY7^(7=DUoj9bf2/%N$RODXq=EF24>s:g_NF$hN=GRkla?l<u",CABnt,@<,2*9p\=-6G[Bbf"=:V"^0=+6uT("O?8Qo;[0oG"@A5SQi7\da@L^/?e'[1%V.)0=j#>>6@?G>dR?7-B%e],ZkO][b^[(FL>A5^61e27FciR(\mN!h.nm<</`-cVHRG)%6=a:bYK1M7MiPB2]L7i"73o?fAJVYQ:%d[i9=]cA$@ldR$+l[AcDa,;V-[f_Z(R&6S816$Dc*@d`&*/A$'Gh>9sXs?J-FGpDCmb$n;aqU_XVQC^SK("P"_oJrGO4+eX:[6$n%^4E[qod@/)T0D]5r4RMEJ20-IgWf,?oSgrq8^nk#J=#;gH1(h>)[3O+>0&*:QO'sp((OGg]IchV1K,2.nl-ks4KZ`6_A#LYV""&f%0Id/,Mda#`c3Q*C`.OE8R=Z_4O>Z!,I9jn'V$(=-$gfT_]DS+I71q*&UJLSbVg+g',V4aJ;i^T0Ug";\B!Dah.L:lCC.3(`"-/-t%<iohDg5M&#a/49N@$^YsbQr$**jZ=b=mq]inQ?<RKE-doj677:?n(MdBZT54C4i+fVJob,$<Epk/6R>p5["olW.q^[50]ICd!0m6%kYl7[Sf=mE88f(ER//oR_O^ib%!*Kn4`&e!@aVBA)"Yr`8Y#$O2f)1/L/^P\!?K)JHfB?*@<PrW"<p,3Sd$9gS2]e%%FH4A';8iE%j#m=PIRI9PN7bB_@O7l8GLbuc`B@)URqJO11tFU0$o<"aQ%hAZ'OnlE>t)go`+%bL]HrIMNVSu`)l4kCak/a<P12`YUF0.7750Rd%D3Ph!_V).QjS4f2.3/.Sh=KXKVN`V'cOqiAFGR_!oFLm7"FX8U&Ila;XuIU&X=gi`2TRm&1aC[F(_bW>!FAuTJ=pI=qOJEK"]RNT%fJ3"YYdQ<4!B\UN\iA,=p:@'jm0nS<MogF*X5b!J)lnC/K2s_pC`P2fA>A)J3k")H)M`!<CImmd@*,F"cZ=cK'*^K27oB1q2;m(<%M5F_LbI8,hVCJrc/sat@jFh%"jalBJ.b=rjC311<Wi.sGC*^])I)IV?LL3*TS5Hkc8JX&X>nG'/k<ac]if'Y`NCb#RNfGQ-q\i-4%r/,!lY_2F-7Rut/Y)XiHI9F%Z@=e_TH%7Sc(_B<91Cm9$nB___[Atq!l51Ipc4H%]2Pi%+%0ILiHrQi)Pu5$pI1^`c"ZHYp`Te1.%#50jIejOUJJWiS:)p#.gC3Yk9"lO@9#0ajK!t5TC'rW9mBo[#l-/00Vp*nF/?qAM*bJ]pCcFD_o4^noIh74?Sh_\co[ejcsc<kfZ%@.Lr$QXpoV1sTH9!q;;UT>0m:]9N9i$bp7%3q/[M$P$,La4(_IXd[NB=PpMkS/!UE"kF\CPr?&J`(;9E123.9WPl,[4L/s)-mhi4%E)PKYdGpd]8t\pG)3bgn46B5*.4Jj_+hKj6;JZFHpQ0OA[+)l<>&%b'<n9DkeZjt")H^L1(+s04@[KF(+b3t_VJHj6W@9OBOH*'>%P=."O_`KWPWK'^&'L4!qRTUo+Y2EeOM6pC1q*?2J71iVrR7,I?.=%e;&<%IM+W&seEueG2SaJdE)"&k0ha:#.qo-MHn@0j<W?,T-%@Ke-ZB3FW+@HMmW<H3I]gr@,VDM-+a1dj.'JKm8g0/Ke_dp16\_op*WJJ56'":V*r)?Uki`kWMa0V7+QM,AoACQ+\l?3BgOeuPdG%jX$OjhN>Wi%'8t;")2*uT&%-Ue5hVHm71N$4Df$Uj1?[6@lh%:Hj7*%*o_B-"36C+\iZPCW-b,h%*,a,K?QT@ZGkH?OVuFGdUk6:%Qt(qG,;[F*LPa2>H?lm=b[hnqABno0AL(qn<n=m())07?p_q&5a,#f2?k5:R>jD\O*hklt;&0%HK?d$(a^OPNJMEX<Nu:K<=+`tr%g2j,`+$]/_icEN?"!)IfgcI-?*Q&f1Zj7FF#9B3^2BX4fqL^h+0j8#4)$p>^Br3j&Ub:CqB1tjG?%YV;g4Ml.:LEj@n\tBKk]B;e%'P1]2.'9aKF!D/!1?aFPM1gB_d2peoMU;ibc:H>\VMnkJ3?NP3hO`5Yq0a:L[;&M&'gI0&j8"&T#Z0R?(iuE,&oo?\j&?t_O`6$H%f'F5N)(EA3EncVsJ0CTa@Sdr!GlW6K;&S:'8hSjl@jJuHD+79E)FF`3)blS<Mm8()T3)N+pZ+@rQ-k_NcY1s)C36O5)sumBfrusM%`!3Y5[&eIcSXGIjfNR&54uqrN#A#FN(i1Ih1NamL69;G-Yeb,aXH=%Rl&D>QFVr?BW9^*7YeJKO)^TJY(S_'/dlT=`NI_ORA&?q9%or!kS5.9)'72o]\ZKJKU-U2Yk=9k&51UTM]CI`4Q=gi0D)\^Z!NI_ORA&;Ct,UOTCT/u-8,iArUju/_is#Y+N,NSK4HplJhe\l;)%UY]m7O7YK(g)*(f2EE[NN>Vf$JHtXhNE"Ua2gC<f"*Ir1k^$q%1De`)dTAIDS6XEted)g;Y?RDtNIW"RlT."bJ0Z>TU.b@EGqmr[%X>(V";6C?'RMcRCE3aj0'<NEoRkV!,eSB=b=ZWYcmh"d6*N]pI?WplE$s$kG'<)RA:dXE'eX3RtemJk/%V/_c9PmJ,R[=P3<og@n%N"YCA`kZ20,NdbsY0LnnCh>U=:4jS)BKEa[YaO=_fkI]nMoKWkCsR"k?Oh5]XhSIg3"rp?i:M])?n`N*C:CEA@lF*4SQC[%^cFm>%cU;UqBECO>bQ`SLDA-ZF.$rWXb\SQgbXCYhbXPbTWBQ]/KIk:uf%6:KKZK;[n_&oT8F*,]jIOsH!nkP#2?:^HjfMB!G`\YD)RY.J%0t[@DgVB.[Dg,Mt?o,"V++AY4lT/_Yo=_d9?h_bB^YUX3roY#8pV6OE]6O@>-E-],QSDeQ,_4_uO\j/p87I@g7OCt??3hj-^03"[%6@5uUKY9u1ERef"c_B%&g'](C%!F)=*diGl"hs@LVZ:t*TL&gCP)AGp3`eWU[E^@%Mg7.n:2HVJhBKGE2r#Ue5e45^6@Ej3kec'P%#2+^-c7Qm@Q+TP3nbdVk$Sl=982>APX$dgRH'W$?5Ah'FW6^LPN-B^/;6Za6qg-?gb2">s5aB[$%A>]d2cT8^l,L'3F:r]Z>AoUF%T\qDr%Xcc#ZAs"nT:Wm%f6_/Bm7HjLn1=D9HCO7'-#XHG]K>#ePorJ;5<$`%U(EU&72CI]G_7\<,Q&<k81f+V3!?EIa[=pUa5B9B%U6[hG8"Q>q-TR$CY(ND.V>`[e9n^5aC81.-6#<:KH]-\?q8PFQ:t.P8aA?Wn$R*ZG^/Bi_L:T[0K(4,U*!IY7Js7.$SL!<sM4^A.%T<XY7`%(&Jf?.*(:[J<9ncE,L=a>HaSV8UVZq4DDi2adIZ;$@"(4FpHJsOO%RNsKR1@B?QQPo'dQTb-C@M^i4%WWAZY8=jM8bS=6%B><b!#UAsW.?(f!2i(mQZ6&*]ecIc9@SlVB8^-c.r"S%aYC4)`k(Sf`/>;n'b:=/6d+`(f[H*<6)R[I[9(Vu=3X]bIBTH_LQ\TPp%hTY2>DqLbe&`79I*p#?C7,K-&;9=Fnk63*j6CJ#K2K@#8_s8T%OZRTAD!-41CG4j*S+QtOcc_r'&GjHP]KtiSP!sV]!6HHFLk&g3%n6$`AO4h^/?>AMaCe3KbKgR83Rrla8T,Y^9cVOGEUe']$U8!tpNMG->LUrgi<c@$X/422MmN=o\s6t=`P0+fa83?HDEhm!3Hf0p-%TN`[5[Wh+,8NZ9=ZD=N:I@4b.$^Pu'e&-N=kfX>_PL*OP9JY^JO>Elo/V5<Kp*=?uG.(Z^SR<Ys+E^#U)oPLM__#mVPe0ZZFS42Q%E5aG_;#&P0Uen;MDA,C2+udW;C;Chm;-2ZS54-iEMt",58Yp1<)oY_Mg=t[d[H(&6WJ`EZEN-O2;PE(t1"EV:p-N3loH^_gmK$D;%/+hCaI.cp8nk,.C+b#Ye]sJ<Bj]\r*hd<V,I=$ulC;?l<>;,=PB/(4<Z^_CtF.8g1--qaW)1A'SCT@#_IF?hpMm*R8cdJs:qAOA*%7?bGFGqNW75gR;#TsmS-XQ2\F[6n:Gs&,\S!jJ$8OL$XBU)263Tsoiq;"?.J4.u$q&=_EeKMoME$=-LZ(ZM^_=0f0.$l;?>Lro_T%/1\W(F;C0*]0N"MAe!N%cCQ\=P+fu%4UTT.*CO!"ZlRq3\Xn;h8[^O04i6O<T"0rhm46c*^7KbkL!4C'7k!#r:UlM$c0,EFHi>hH%ZFCe>TjuD)@;!.+KME\%00`kJRUM/FKleuL.2N%ITXRJY;!p6(*Tm*!B(p-5?\n0$T&k/]D\D!%i%5SS(KRsPC#4f/+LW(Im6\0-%LANCR'7,RU%jc.Xm_-sOB1\^F\JOp%47:Em^\3Y6Z/82+GSU=/o]:c8Y_"e@!V*[hUk#E"=Ub'lX'USbGNat7qD*B[+<R-$*Pm3"%KM^i/#8*ZF>@`C/I<ct]I"(j\jb4T^2[BiLooason=qXT'coR=P-Z.Ueps;6nYOo`(+O(]+/Ok@fAeDign?ClV,tN'c%2Xs;<[>b%N?<Ro-#_S4Y7`h_l9$l!2i8Sl4ke!tGM&sLN`Rh/%Z][<!4cm5(HKno@3j3(UlcaIH(-ckj_g/MWhK`LjE"[S-(>$`PAh-<DimfG%E]8h&;=6@<jOK#M5G5/iPsB7#<bbFE79YPo]h)I3$f3;8]__?rBr?e-]hs"\/*/\R-,0(2nRX:tPPk"2bMU]<(U?_6q'=13G04.4%2=]=_@.W%V>f\mUSqNW[0,eJK-Q[4BGeS:,HP1dVo]<4'cZVdi(Otl"f>p26D.Hnn6@k_^Tg3O[L8*a3*'0juPD@GkSk7@7-))f5%(5_J+=33k6>4q]*A0^:h+K^\b91T6C+sOFX#8ub9I?fm.FZrGi?PmVr&lYH9Of?^Zb=ke$,W+>0mk6Ph)s:deoIN;Y@WiHZ^3_<>%&uU3Njcqs9U:1G.Yp5ecW\=#"Klj_rHh$C-C[F^AW_n6[[6@[k9'SI40+t'^'%e6$,"660F<Q\#<UWAJ<)%ZbS"7rng!VB2m>Sd'%Q<q[LBCocDoKn!gU$omb?H@.EZAufWk==*+XpakK_(NrpRj>ToGS][1>NZAC0@7%m([+S6?51%Hd//2XT4P_mqD(QeGu<9;F@R6;%054_[*LQ[aRe[1iZ2+]Q>3usCs81'=GIg2ehuEU,i$rqu=AnoR1DEjl5L/39h66U>?bGMQ?eojQEe'uYB4JS$TXV`f@QgZR"arfJ%Z\V_WF!#?SBLFfr6MnR=!aBf,.'NjO+@NiF&;\@u"dXN@)/F`bj5'-)%M\7$,[=&NpV?$A&V?aoEkPfCD;H9qeN\S[;SA+Jq/l@,%GJCjB-HuGk)E6StdI#<?F]cU&kI)K]/mpL?&,OkEinPFejH\o'2(AZY/o6[$*/apJN@;fG4ncX#K1lf^#+=B%>@amBDj'oXHCJ/e%n\.l_595FD5BL`%1nYb9eXXZJ?BpCg_,3K>fFK%Y%M<V5b/RWeQlS5fe_gnL,a]-\ng:f,)6W9U8Q<3)-.19NFj'8Z;\?bPRPE_i%h7T`,*]N/7`QL@-Dlc<Jr`-slc-qk=jc\Y@TOMWH:R.q#<bT"(\lT19p2oh]kAe1m3o2_ON+]6TUD8T%,Xcr//@^f[7eY=?Fht3"%f$k%_Rg@b()PJG3JK*c1R"*"#(f+!:9Q02j0\**\_,U$_#3RXe`@uK0TDu'S(uWTNDTJsO+>#n1A,YTJj#@#/qI,2"rqSdOn@.k2%_<5b*rp%[&^]"#0Vk8Hf?RGtpDGBjID`I@*^]+sn!UXt.q>\@M^9=##IF<$Tpar+&!W0(qIuee<=a]"RHN3g@]uU"6s5/$ms.Xu5%h,PYV_hZ.DOR*sa5(pEfpqtE2pokk>KhLil)!c[;pM5;7TA=qfl/.7Ls6cA+I/)ufDnc2FA,Z@=DgqTV2ahE:(Y2l!n1d*.(DYsp%mQTS/4oEX<TD\W3=5Wu8gGa'.I.R;\5J;Ps/,WJ@If'*$If9'?f>%4FX)J#_s4;dMoCI`Es8Cj3s7Q>a^u&+diU7Ra>N5PVmm"Mc%O7gPC;u]qV?5Li_hu)g+CKcK2>Y`pJF%&=jh=(C=mFT,OkO7lSq;(dP5JDEHb4\//[R)WKf[W4UP1WisSG!Eb07Vd=;Q3%KrkJID%GQ3_K__:K:(,H5B=\V;CX=RKZ!lX<k_X.T9#c)@D$B?<S^VHc^(JcCupB2-sclis(kWl-uU`_&P_-isU`dr/%Z'2u_7X#n>^\+9c%W4`5;AC_'6!%!,f+#=gg(kWM6Ne>,`+QW9In=o`=4>KVA?%D0@=9:G[at*9Z[J$<hAIXl'.R?nG=u@bC:V(mU?cQ3`V<CLQ=b1D.%GYGWoY)Z+EP9Zfb.cOqN_@+84n;QIk$&1d,GS\RBf`moo:`pfL*BSoj;-Q%iOK92Rd1&m.,/n=+3Xg<Y;qVQ&j0n"mbY,*dM9TV4%!QTAs`2:-<Z56WNaEXSk_ZD+S)dAi\80HDs-f$Y^4t)gW+L%5M7+WG])/EK_5%&gVNZE4E7l2tA]^G#c+LI(*Wk_K58DS2A2f_eO%2NI[?W:-[186MMt&B0lD#1Xl/2.-!ij(s+AqepV5l4SWb%'lC?6mD6Vnqj^#XujE\Z8(Oa*qC()P)J<n(.uAMa]@GgkE6jb<N-gH%\C7XC1WSV)8O3&n5Z24R'tDASJrk\^U6@j?Xq`f'T,Dc=NL7fkV%C.GQq8tsVPQt>4iIg`SF-['^psWkD:!9L@T8YE]h:>0>SrT3%_MWqggCRr-WKI]0/XMebFk8.^YH$$g<:1+JR(&q(gQ[X!Q*9%^Y]JGk1N8jp,Q)"bR5<?;>1'"pA%nat*!:/(OR&QaSYWd"9F/f"%F=!7K=0MaH+JL_5h2YG;G]oC.K<sBK6766<G(B'cGUV/`m*%M<kWPX!0e3b`%uQ:BYl)CjfHn%8kW_[LOI$09%@Y6k*rogA,kdN`%]f)g_oi3c6N\!52Iln8?0e5Kp;3$Tb=tO*iK9WpbJWVZWVBrD6>]ED6N%*BHX`1++&e#k>XjjD3<V_\\2qC]9`2d7QhJ?@@^^=R5%^d?#V8EO$XMb4-S`[,CtW`+mC%=h9Pm[;9`:p=bE"s@6/B5ekW;MD=Z.qI:AbdSXGk#6K3(SQ]!dc^>h0IVaQGZ8u-F;O&Wr%<f.%3DD*m0##'%b*d8,BV?a+R+7CXU@EaZ%RrAMRPYk,:'%/TBlp))aQ?9.R.N)XnY]_sl5Mq.AHb)/:W2"LGsYSnHE^SS;qrYu?BCe8%oo9H@XP[5V)L^GA>Bl\b&)iTb\QJ51p+>!TWnQ_b3X![324)gu5C:ESD$?];J;/Tq6?LAM^ke$CY1mB#$uu:tMSOCkPOCC`,lK2n%Wt8qr'P/d=Z5!fiVDb_gRC>/[#@^qcJ2s2e,O[nW0XNr*D&cC&n%=V^R5r?pA]\B1I4La+V`RF:[&i!NEcs#ZWB(_lV$(;t2a0?+%&qN)!*('#!0rN:9O*2b:7iX)0W%O&,>SMeWe0Kc^p]MR+ms`7:.R\;RmMHHh"V;`"5;Et'/t5N:MbNcOiaG3P$5JDFS@@n@lU"Nh%c<T82IIm4<"491J-d:BHV#H:[8mORJQ-Yp;]P,m'\=,9F[4clh@?<c>@=fAV<p&0=`ph^f@b0a?R1O>i"pkjc,7VoOiGaf[bG^o+%)),P)Bo]7hF2juT>o7oe^EqrLZT^-%Ana0/eEYDai"%Z#bA*`YjqNJ,I-V^;bt,;-BrQKWjnZEB5Lp!E3HL>#->>g-eX#s*q1IoI%QRl=oBj&5@&JUbXn3B`RB+%CM<JW;Z.G>G`+cF@`"N,H,.,-kF<RoL@n\WO'F$TG!-tjga,K[?7`E@=p4G#L(+Wpm0%PK6,i9&/j%(K^nc@-YfXGHWmJ^Ms[>m#N;e+*R,4.VoJ6/&Y@pkgt0XJM87npbM5SAp!S7JTr#+Cnab%\g145VWDXBb!PBMc+S/(O$$6HO#Vkl%7@bq#IXA`kbH[&mdKLoFiMKQj"b_TBSM<[QH-F3*4RFe'R$E*2GhushXJW%fbm(7oXE,JMX(=leDJ81kM^F<m$cPtQ[WNs,b-c_^%Kof!m:f`tdX(T)_KJesJ>5Z6[mgKYP1NTk<PISIp!j3IcDf3o+pG&`:Ut@PDpjGHMO"e")"B`5pSFPE?T%BdRo!'Rs`\DDe/&n?V%0]l4uV?jb]Qs`T3R$._8GGRgdVb4Rf6Tml7F.h,9,IqV+H(AM)]4=uf,*8EmpMtn;pdCUD7q,(]QpQp@8`E$;CcX2LE!2PgJs1gV%cQX0H6BD5S=><*8#eDH$N1:@pD_THS2NE#Zm$`JcqNqmm:4BSADks74(+n-\P#tU&S1b:\P"G)ciRD$,AjKU*MDqD6>1?e6?-TmX%eb(q:jeY,^/1?>QRRZmgbkG*Qh[s[,1I%nqr7s=>7Y%\>?0=IS@mO%Y[?49+Wls.V!GU:488pFS;#WY%]Zg1"l;lfu^&@:K^CX[Y%[&ICk2&C]9gomc6Dm<oBd:CrKpDu?lMIsmoVCq74ob=pniB^Z\_C_616a.k+OS:Lf6.Bi8D:Y$FMUP='ju.'V+QT7N3k*)J6=8l[%j0kWL718hO(*u^KZ:9IW]]rHceC3Bb*3[2k6fs_$mO=,r!PIGhNAH$I'NiHTK5p3:#(s(!hQ1teAR<!eF<Fl5D;T"P^o#1MF`qr7%,cqE?Cf=cV.jI@Tq<MdY>hb*L%Vj*jBhpHG+-Q,*;tU$7>1-G?F$<@B*+DiS!,CcIKLn][(\FZN/6Jd:jm-A1gW?Kh:ocqF%$#4)%c-9K]ZZp1WeD;nCS8MBHP,V$3AUt.pU(54($eAkb7*fTXUDAJAHS[gi$8IH3[U7\r4&3]6r<<Qg!]bqBo"X9$\QgTHh4S9Q2Orjs%Y[G$:OL$,a1(CcI.nuB2LG0HJ&6RO!g&>;6%7kX>A1s.dJJ;Up?K".k4!Hb7rXj3%MFk/88BqaPqb]9^4*rg)23?1p;^Hpl#b;hO%Y?ht_1=46%liS>p]Fi3tp#4l?E<qN17Gst[PRg\7ZJ+dU\;YIQJ]bIl^krst"3=@.N&"U4ep7--;M9joh3<GVifk/--B,XcD:H!b%f,eRP7.4W-6M>aKYBDAmE?Ir@%FiR)&r1&YA*]hs(GKQi4]T\t5`4\\5-&+E^;[G"NEfppU#9>G0V`Qe<MB><A&(H9$j1qsn2VWE%[1*QC.Td/r%OU<Z$B)I_*#:)ZPLd%m<WmtM=H/]`(P5irP)PS6o#8IXHk[5B+XSgXc/LP*2@$EsP8dG"qZk;IN?q'JZJahB/.>[s%oEn\+3D?^u;jA"S[9Wbmj2s66W>TD!:KUh5656oE<e)2!,\[H%np!*%h5[Of;dRR?6g%MrKJkhu.Kf3`'c`#NAOCJ6<G0\`ZGq#o%%VB;Zo<3ak6C8eG,XP=.Nerbu<d,.(NMDsXPZ<tY4Yd\p5l][F74i`pCj+^eCaRnJ2oAF"6's/>*$O#9U=l5+-0(1^L?D+']f432%j(oZ-G)fG!ZK@PlRgn5H&:L#q7SQpY"4:G(f+q6+\B[c[7-`N3+u'CS6ES@qN)#eE4#%&;:J0^s%cn@D/WH)"_YpoAP<cRtBkl/Y%5ULqq?q*kN-T-(Q^MT'rUIpN9A@4^0FE3Q%(1WlV8N&g>@??[h,6SL#Efr$-4:EG^&IK;k`(a-;&81GX"sr5tI@M-3Xf#MP3>R7;%7)7^FGMH`q/:?J)P>a$`i$K%Z^:CK.-53oXZ;'+"U1i5nSXW<RhE,eBM!a"rR(17qE4[.Gj?Q2lc'Z#_)%eef,E82Z=Q_$[Wf%Sr%2[MnL?KWZ_`QVCDEKe>(4c?k7UGKZjOcs8p$uust;dsro&r?CfYMg'?Hnj)Flm+:XBO`DE>'u2g9GKXG_:"YV1ZT`,S/inb.>pK+%.L5F`5e;*t.lDc(=IFWgK$cV@)3aSh'0@)J[(8*<,`K$HD2Fgb#[PE;SZDpsp3<2&pLn8o#<Ner1Sk:;=U1^;B<EL-&cT@ZEaqO5%<lE;G#<RdKA<,r3SP2[lFCQ]Id`kFIP8O,7S$-Md,bD`Qg?(du,1JMT6]%>OV\Com)ESgrQg!L@bf6>7DA!U@fhWMH)3\+[5u-!k%@[uqp5Tc?_mP^t49Ma^p0ZV/-Od#S,ePFt2Z<tr5A?r"LK:>R5'W#f5ob3`1HK$:!c)bdF-Mo":W6(ENNa@CX&gpR42X7I8NEH0P%hGKFj-m.OB,N"(XqK"1tAG<BY@bY\)=q&BKYVjW%<K"lWo]_:])i^3F;W'7m#;=1&@gRdRjH;h_T^e3#>Dh<]]]?%2&%lFZNGk9Z%na)L!@18?!A0/lqa@3'a1f*B&l4.Umm5U6j.WS%8'?.&37=!)o!J5%G_kqG`6aC7C%+(Cc/!q_dfORXPW.=SWXKF_EpE"FqoO8NC%P1(XP"0<!s#9</DWdfW/1S;$@eaH7Bj0>8nZ--g'[n_8r"OIPZRW_Z#drRMd^Y4Y1:6q!?>n'0LY\<i$'Ri[.j@M0/iBfiYO@pTl%]J4jAK5BX%Ocq1PEe_fTbLEC)9csfngV"'W%(-W+XIZs@=?)HkR463G+tajl"+aE8GUk/#$&UGS.^HQpS0=("n>_UNVH51Witb7%%/d!@./H[M'3$Jf5I[lhkjr9sq<5S7'W;t9nI@$&3aJb#%G#foR?R#<7m9+e4j=lSdoB>Yd?ad"MB%@O0&=];+6V+&BpEnT*Dp<8t%)kqL-4@]3J2U0L>%1u_eg3(bs3ET*FV[[^s"tSC]#mk';Z]^lX`@M-CPJ,;$ZcKFCZorSCmamIB`5(]tFqhdR$%/-b.ZeU">9QH_%/Xp$7^`i$%<dUqNm&pu?N)Z9W3`dnh"N]:lFgrrs/\*Qc[e$6Dd=j;XQqm;=<')ci:,"?DKJN(P\0NM*,fjH$\6IE?oUU9EdgD_O%'cWK1h@PU:7>>V6;mR*qP;ZZ^PKtguaR83,=qc&&KEsUq,Z_oZXoc/fa#dj&no>JX(8Rmfi7nL1+^-ACr`QomQIN!P_HI##I7"'X%n:+O?3W4;2@T7)"?SZM.H5O=2NP!17`10E8QLMORNg+Q3)OPS?mDMGYZlrB<,E7lMD+$[05lgN8\)Ge!Eh>)+;_0EpBl,K:9sEY7%4KsR%r$V(hEd\UuBo+ms+r7shQ!dYKAq*)B^Q=)1ei$,C3Dq+/cC#:Y27#`nLbkGs=j;Hul"sebZ,&^KXD!+7eW=L;6Fh6NL@"K/%#?Ijsif]u>@UmhBR:uO5T.NILfd5L/H22;u$'p\(.5!4B0:Y.PGNM=&BLt8lL<IW=fr!+7mNbP([l"X`jas3tVI(c1@n*PdG3/E\%2[g@qiEa"9JpLZNZ^S*n$R1'RVX+Iqjdn)rL%c"_`u>M%F@^c6)6mXHk9iurJLid?#dTd>V+lm5eZT37_AXe<jU)K*Yr-*D0X3<K%KUo\VS09Ru,,2>m[2><+`M0b"7pN;aGB8Xr7&F/ED`@W0).<Q)L+LD&PAGBMBLlMn@-Z.$8CM>:8eqpD`4:"l:"SF,/0#:Y;j<u0%6R#/IZR/E*ONO*'R;7B8*/K=-.3&u"M=%+8LI2Pf1cYU\epT2nB^Y2bqk^I#*Y=0Co_;1aQ9`Ypp#<B1(d$GS*dkEh7F7$?5jY:!%1>N>,DtTR>F<j\_[*rA%p_;&giAhj0+-A&`8@F_!A)kt5?3[Ud_M*i2_IUg[rXIY124:`i<6P8B6-5kB"bF)__JC85*8F.?p:'2H%ckIP-JHq/cer_!_H($P<FFqh8G/=*0(n''/q13@?nIo.eJabX?$Ka"7`:IRXin]-\A2B_)(D*poH8'iB!GCL2b[8pBU2<aAbfrYo%h?`7V'#/,-(Haro_S.?3+J4F"JC*@P-SL#"Z/\?T_IHat56*dBDP?uYbjD]4INY?cgE@3Y<?(=5U&9FmVuS%`J5@9A6hu9eUZW?6%&'ST0B[d#T$[AsJrZ,I1qu[m8n]8L[A*jUBPAlc"^dchf=orlu'fMBfU/S4f;3OlJ!ZQ.W'4u7^5dW)N3.>IPh!@F!@Jo?U-.uC4%(dHJ:2I;@DqA_@EK\jT@$]V([2o,pE(;sQN!k+I\"n?ZH1PVt7nJCc[X/aDeIa/p7r;@>JJ!u&>r5>nbU\@&#'Y'I`N"t]")Oij9%/Ke;p"L54gQP<_<_mak#oA!r0!g*ig9"4C+nY9)hTnO[R&7[\Y%`SQ^?I<lWGChb&9I+8X*-6V[B9?'"a<qUup_8kFNTHZo\9">I%-@RaQm8q-`!RO[t]aH9E/W[>1\Yu;NX=$bsb@^!:qq"M4Osu$('?2"!GZ%DsAC@Re5a&ujX,dOI7.1MTTe+mZ2?T3qn;$1$XQO&j%I(Xb>jc!T$/'5U.KT$,]<acl=%78,CcK0n^g4dC-\tHDb&0I^(0T[hi@LF[l"49)4$J#`bkAZ=3@*^5P_l8P$n'eND)quW`+d,n]%*XAFoUUWRe+EASDh;i0mBaBi6kE`LG!eB(e!609c0tqOf)6IpA(*Yns9JmfK$qN_3'<e2KLb_$FLi#u9\B_Z6N5cIM!@m#$UVKtj%PuH<I\g-cgnA1&!@W$%3YfuU8n$H]s-Hjd8L%]4hS$F'e^*W-)LTQc+c$5o#jeo?W679nB:6mjY[_0l"_W##_'k;MKb".)mS7!8+%,Ws/e_10B_pR@_00ki!H0eMn7MiF#JhJ-aZCCben11:^J\r[%KX,FFYf$7oRC_^!O\O9Fe)&*:b))W5apUV-a)XMfj5ZHb@X0j\<%VE$qH`Z0/J,do_nLqC@6\JC\@c%?ZrB"usPqQgmr9Tfj+"UJPDJ.gmgk@KOJc*j(h4Ch]6Cd0\-<EDl]!2")NShPqM.R%OR3$oU*%V6R53.2LOXV4?qO'\NXl90)(6G20sV]]t#).p""23$qA>l=(P.b+oc1!i!hL8L/l^D/$+Ddp.[994fiurAIugOBC*f\9pJ\qm+jN%41X;eE/S1A6fDhfA*rftdoi_^2MtJA`6A`[.jC_qV_u"5PY>S0$_(0YC=dtQCJqO8!jQf/$ZAEngm:Ea'<*=`+QaFpRIgYEKJ=T!%Alr$.-mt+_+FcoU%FZqsg5hP,qn-=V,^2nbS9*/FIba]'8Q0S&R[YKXhTh5BNU%SW8?csrJeQX>mGkN"gB58S6-DD3hR=//-hc'l%Z?_K5qolg!P+3[4okSu[@meHB/j'F4Ti$C0`nC`P1Qj7\ZuS`p5WbH4Hu;]Q*S:I&2RRO4?UpM.XrB#lK&+C-(/.t<TV27gX9Mr%%m*km59lVsoZpD!a@*t?H6DK9[5SC;1lm[neK%LoQOn>:V!0CtAe)2\16a9bQNgBgU8sBSX-jRI?23AVb0<>k*l6BAqGplf4Q.-4X%9F6(TcOBYB)f0C&!Z0*j1"YeOY-6g<m>u9>gY&5Kq9\&YU>tNpJ.`u1(0*VgU#WGb'09I/U<[;DGRaf$?U\fm9+,J=&sF?-0K:09%C/:1pAVS["K80f!9uk-bd,PcDL=Ht]3C'D:_R)g@+^_-D()'6=>Y1Cd#*;-8oa[kLK;lbLgFObB^4dJ:F%M*5:L)RHaWcOSk+aZK%C@R6fgXHBi6q`OE3[N(fD!\^&G&/bAf*,*&gTRh;'FP*&9qYp30iVI,TGf59/nn0V5V2cblfT+*U,c(l8*p=2boh7Mi!+_9YPH/q%TK.7l[6`b3#+uN2>QnEo+>/<E3";,a'Tp,:&6KX!-*@n"-26O)$JR<u66J!qo*5jH!+[ktKnT_q?j!rp#,k#5,#:M2!MN1p$4Xek%L#tR]joWCbM&mYPVDPRXC9qkr?#H>:5h>.s-qZ*Snosr1cK-Lq.3]0fKcYY,A`GPt&gc15*#HN":?#2)R'B*OiB2Y6C+Q\tJ29Q4%[2.eVp"<Ya0j\,(a^t2h0.lfW&RgW"h[3PCf4hja2QRa!eBdVn&J3;;,^jjSV'$QHVp@iR9jDm4OMDWgDVAa`XFEFW`6B>=\2!n`%7#`X76cYo)O_(Qo4?3T)(!k^^=+Mq1e$N'+qMC)QBEtpc(oMfb=qp>$a2jJ'JKb(Mokg/_?.lDNK4:rNV9PLH/QM;1n7fjNl;ocJ%)!fP/fl/je2X5/eLE]p-3s:Eu@s]#52]*CO5)Jl#ffO**-kVjmKh_SI&goP"-mM%*Z@?.Akj*@@/RZ?D4#oHDr]11s:i=t@!9"aA%lj:'5U5<EdO4I!a-0]9<<X%oPDAgOZ]8lOomSE+XTYGC`.D8c14L+#tN$3u'-tgX\qREWXb*)?YH;!kpqZ(OUm5tj)k%1)29,tdG%2PH/[Y+<LP2AB*)0ld-G$1#$@7&I2e%?dW65j1$YC,th&&X]i23"L]d&XO:4#rrt<$m@lk0fpY@?*oIDj/j3,#pa08[[t>N+fn-q%drKis\m[DCF9+Y<^d,M?$n['Mm$TRX?2X>q39%mC8ZBZh:[cJD]kis#!.aH!**:5B\2s<\U;7D!=[9>4]EZ9J<B_k_#`,==6&(lm%D6R5T?Ii6g#8-&PWuV9O":M>oHNRIdr@slHa3>QtpVDbeUqruEkS*<`^#D.C:[@Xqn7rDS(VL,_nKGPJNFYZnW>7CgN:%gNUrFsh%oMV>JesM_oXkB@W_<H+m\i3>q.L&-rS(O=<)=KJu$TXC!3nJ%&2$%I:o)aY7[kjno[`)4Y/mVPg33a.WRrS337^\mlCIh,6^R/5b%e3qb"X6"&XSL31lgqArT)shG_Ec^@uOpX?GcucWTYZ5C#J@'P-1!r,TNr"'hmBt55G&Q%PkTe\nCuXo4BN^km#_Q3poa]/#ST`RU%oSMdg7^V+A[VXf*44qb[Qh-2h9ggrm<c/)-;%QR#D$+(^[is!?[I./r@;"^D=RDB&&kG+Ck:J55'jEXSgh8m_T@Fm9;R6+61HX$i%dGEPMo.+M>Jq:%]0EKVB)`P`PgD.=C(Ob.PT#51>@*,HpO1fZPPD`.`OI`[l:VUp%cUZnO>7b,NRH?W"6&lZ8Z7pmI)[c`>Z5lOn%LB.r>M6@_4MfRK+;P=a8FBDF:!2R+7!'6*,^u`F8T>G,06/36n*sr'b8sY7Q8:Mb%eS&iUb7,@!NXSWf,BA=3o;0t3pIf=m/L*-?%>MK"><VoNUB_inuB5:(*m-"um3%`#[[lh%/2N2M]+h39)H'?3H]9JXF:VYV*</:cfNBoB?c_.`!rIQ"-O52cqglTBo8^NKuNF=,"%6`\u+7CJ9?fV$'6HO/2n`E)>QEN19bK<XB#Y_G\%&/A5DMJp.%crZq]ee;m2&am_B`YcCD]rt,0l#nD%>jRDn3i.]25>!)$D'WW)%E<@F\V;G%8*K`S1:f5)uQS?bf]'a0c0sMN,L'%Ndg0>a_Q1l'frHPflE"jQ#nT0\!&/#G'^MN"&S9U.f=lm/g0;QLChRDHK!snWW%PuAf`:J+Oc6n/\=lo(Ub9/m*.7\n1h@g(lcCf/"KQtQj5WHPKeO<T1o;B"OhNCP8Jq`"C3M:pj<3i.?MQ5YLrCIFO2bM37D%&jgO%>,,a=+I6(*e^fi;OO0*;)F]Ag0Y#7jFOK<8%cJ'69Tp_&;L#,D9^+#hOu_Ga_PPo-!X+8c5if"(Uc&SeD>8>bWrn/4^Isqd;YFDG%`+8e6FHs"s[nLeL%TnIap;TA5JJ55Rj6V<*N\Q./>pp[t^nr_V'Su?M8s4U!a<V<d'E[7'8QZ>a'u5B-2"3b..nPD,,Rc@"?lNo+%+9C\Z(Y=Z3r$Xjkar!sZa>aDM&ku!".gNO!=Pt!,r(spm"3?K6M"&=k)IFg5"+j*=`0*[mUMYlR"!gq)O<Pc.5=Dt7mti/c!Y?9j%.OO<(0:&"<#c$CP46A]D5^6*9ABX@_g55d&@jWDT;Bb;T"Xq?AUqrM[i7lD:'*b=/-rNasdKP:B'4>,k+A73TkX_Y)R0Oc=#>YM"%&HXKH*7*@?>:CITKWN.l4!kSg4<Va[Zka\C&6kRUj@3sl2d@IX%HR.VQO`,EfTO>,OL;P+N!AaH"=HGQ)VT5(e5Qc-W5p;E6'rHX%1L!CJ6h!oV822A>D':S;%3_#LF?L4S:L[i?&K\YR!Y8nbat[NK0]!!<6q2CrUq][H\VfgNZ!oJ@m3nBYOolHd^dORTV0084;cm@g%fMb<t"T*b3A;C`_J^J]B7[^WFU0?eNQ@WT<%<dj(hm)/Lgs*,Xe8c=Ub$.WBoAX3`;4BtqNbfOVTF#AA%cauS<_T"sFXaN6SJ&2F%Ym$O.;`HM9FYTu\J75r2<j1!c*pN(q/o\cRI\Te%DE-o;N4UqYhE3,r.FVrX41p2aJKocm\9^c>!)"Cp]SASNc5++/KP*FH?A5I'%^i]U?F@<);]rd"ARjZN&6t=&9cMYE&1o/]1D<Z3_p-=S6eKr5&&RLhZ@6o+t!J?`iPS6QG5oY:?R+"RiaGQ&fcp^Ri_p?UFBO>VC%""P#YcHl(t<?Y&K-o%p-[VroB9_-Ma-*e]>IK`e/D(QYIF#tfO.0B`S75H`[T1H8q=;RP`99$&Ge8_FW66*L1'IC0u&e,R]n<p4"%o<ou6jk^'Ifu2uT)A+Ks];r^k.)a^_Q_1NbdY!ogK7>OdeYZ_goeutRf07HB3u1J=901/F&_9X$ka`JE,;Y02iu?Ue:"eeH9jGoT%i_]Aq*S56F;]ZT)>f^%U,hRlk<t_fQ!MnhZ:Fd.-E\g_XhB(duD*Q_7:`?7+5+%G:E(plQmHHo>B/OuUgTjQY>S#2]^q".2K<Rd/%;l3qZMo:ESC^PMab]?Zo/@C']n]<C)CH&['8VeD6Gd@7JltMa6krdNqKFDoi1C)-9o&XRG0P%X4(q*WYXtXp(GF7"=Z,:NpPriBS%R"L1i]`T5HRkWN6*C>hV5"A&Oi3GRFCR[c/7-/B!e4e5GnWpP6R^3H)?AgAd<h;,EX@<Va4NQhXAH5ErUkE-F9PM[K`$>kch&R(Z%kW6taCPf)82bUDH`eBs%25LuqOIAU5KsP7"BJLo-)iZ".B5L,lT^>R<[8'-F*4B^5I;0`qOn-]<8TJAXVN<]3EHFc?>@175+=j?(%#%eke=j4b1]q?>j6,2A)5k]KVef8!ASm'iV+u/9sb!)/78K=E8D.2S_DEsZ(W'l5&g1&3(*@dt?a1r$Vq.M,Y_\A%F70fX@Jf]p?%n4mVT]Gd!G)=1$7LXGl;f]:nJQQ;CDj0(N'Zo)f6e*oqL'5SV$M,]$oH[fRR&R:/M[8p/s*IOGi;4SEXin%e)R$;T!(8IP3"heaf%[JD#aa]V9U!7/'`3crPCFC.%l1&rJeLtSSfGMK:%bFLW1Qq@UM.,q$PD0>pt&7&KG4,-X$De\K::>*gABjEP=2NU@C):!(1bl^?7%Zc&4:)-AUD8XqJ>;l;]K,cCmNqIV[SpZbbTbq_/%hfcPrajp:I:YK7[9]QP[i1Nl^k*?iWa*;g3*TFE;"'1kccOahNe`QY08o[-"%f8jtDi1VP19N'UeR0gB3geg[jP4l9%c9$FkmCSbPf!h]E[\i!c_IVg<Jb2tqLLt5$L;9G>c6UCWL]JM3$g@[h2qY7nDZMYhJ]V2A%^h/k-_f+:2[SL<M9l=<B6NYHA;+Vta^2W)k-LB\+R'S&HQ^D>"T.qsig$c2=.+/u;(EEJs0HO0:Fd]JJp!),uqa&+Z1)3u$)%*n"%d4<5UX)15nb)WdsK#OYpS>^4Tas!rlAPC3R)G;[K+sX$=Tna*Ql!g'S8Dh8!;2A'hc?&ZG(k[Z$ge8>*)^g?1Ine+FPd/t$D!NEe%[WS*kVR/"==k8Vh9rLU![>_c*Tm>t,[r>5C?hE$'-,q?(egWi27)s(Q]ZS<J@6Uodqe]NAle>g>94I97>>!\,/8Hm@7Y.Wf$)J=8%)2eY=r-?7P-?:Y'0B;ij`L?@A=)$=V\tu7*`E==$=ooG8^!o@\#;S1!^nPATM7]8u7hp/Zf+-OjnX1A"9#6@Pc'=`(`l[*#jq7hO%igm.q>71#bV@-Nb]3p%1<U+.r8[AHG<O>jIk7.7RDD7jq1HM(E<PtC\=T!rdJ%keuGMh>aXSYeCDqEPSA2PjHXX<gHZ[93')_/[Q%N.jgiRG(@Fe-@%$Ilsm==`o]5>=QK;7GQ0m\aKk.Eb[L8Hi2Ppk_D<?!fG/%5O@`<Ru,M.A2e>`?^ZX=-F$pj@8#HCd"3G%m(q9E%/1fM\7C<1!5uuN9qmb`Wg.![B-Pd<AWiB:l3GOk7OH3hQJo$K_<u')+kEB9oZ*Rk&K8=g2(gL7]Xj)`TDJ_BcFB^>iSg(R"@`K$:%Aj:??7CaC@'5]=NfZHAOiM)Y[G'Ac,9($1R!^6:R/l^a&V=*2(p*S.-IfeI!W33Nko]ZdE?=heg^Zmu&T%,^ma1es"RX8*X^[L''%8,9lSKc^(m=8s=g)<eW'KcYPDi3BIu[.h"71OSD)<9r2s=$?Dq]<'aMT!b]T?"oDK^aj#M<f2&n<V;q>W*.n)]>;p*N_R$?FV3PC%m5k6%pWIg!SO_HdJ;FZol-.'$Il\"No7PQgLI]VIGSi%a*FDe4MtkI.68q!has"@Kk0m6%J'FUm,JLV]/?,2g6tmiWCj+;EfqdC\%ZWr0D=XBZbof>gbF2d>2*d+UK^@D8!eH^?uJ/KB"JG5Qu@Rg6->h&@)[RqWGi#4;F+QEb&#`c$=4U$1*I=-hfACZskFUY^`A_^/?%;K/NZ/"Cs1D*>.1),&l8lsVi=GW.<?7"hJ(X"+VL,W)^ED[rY@T`f"`1"-:%[D)c4!PCJJJJJX[N3+Rb00:i)Vb\+Rr-1R>T<IqX%fDrK"qUbq^[J8A[1HLsj*I_g\*SQrkIbABC>IY3gEUg_tEO<;@Ng@6jf#83o8ZLo$`_Zk2K[H$J"6DK?@A1Yl_8I&@Rj^*cD\^eV%#'t8@X?d]Lop8.iomQ(XTcoqE1qQ)a%!oL0m<P_(/#GmcXP/VnMB'(L$Zo@phR9WI<>CP=^Plls,=8pQM!Au_Mrr(E2fi]SK$6@P%6e`DFY[F!Z:R]]`Yne.G&3-S?mBFf;h^=4c!`gSCZopepZ&4q,);AE>3mOq&&tPEU#9^);TT"3PQ/*%SL8B/ITnlY"l5M=;gOOEp%*SM3SAAK&Q3WualC^*HTlV2=W^XekuEecqLB*N&*f;U5#VCTsMXX\XjgRlS]$Qg'[+N)MPr\dI?dP/iK.5OlL!=[nkkESj0rjcp(%kN7YI7JK#No^$it486FIZX`H>4ZN/Mm5B_30V`+dfU+j]!kY-(0Fi8%fPQ9(Z(UdU3#YcRj*7e.m4]aHV7DWnJ]CVB=(.&G*SO#<%??R/)C>JjP:d5r?LWm]s#a%Du*$[4&O/#+Xh2`4rl=$JnNJ-><ZZ=:fQTf`Pj*"N`h%&c=,B&@F)e,`2@=RtFe^L#b?iK$Kc+!F]%IBUh&=l`3kq%?-QGr=s:Y(j>G@Xk2S@95k"ACDuh14+AWAD]$$0^N5b5Ycm.I[J8a@AE0R*Nr7F1=#3[j9IddR'0;/rE`g5oZ+"p%c\6RE,F<af9\SdArtr:r&_D&O26sj.)Yo:pnLs1SXoDV>W&A\pDtq2GoaBs=(NJCUA,7CPkBiEMI:r37/6%:[O?1+*^m3<f2E<qt%"#l(CVPsM^1Fs]R=kH-I2H?i.NiTDXD]r0*oA<P[+iZaQH)KQhhlL)Tp>8k]6[Z/8?[_&-qb6;/2Qr_&/G"<L56#1`s-oJ)b87G_%`Vj@Gs*L3aYMZ>2nG5`$19]E4IsIq[4>*nR]oVOT3lW0XMQKiB)t$D[/=+RaaNOMRHFCF]_SpmUQLK_%ZaAC,9P6oEAKX*=@NOc2%mL!_U^O,o=Y%uIXBG((p/WE6]Qe0Q?F+pYR$>MQG0-/\E\R+t:)eHeElLF--n$(_Q]"Wm8+hVUfUiEG#T'h&=/cUGec[)??qHL$_%c_B<sX0oMi8ji))s)-BS$;VILT--\Dc-r`B@4,OnfY;SrlLCY6-Vdpadm^MhqK??mF0r\t`EdI)89\n?CoQHPqZGSg2t;o$o',6X%F@fdY(.N+.FkqGKS`ms#J"4LL_n8'k84.j%&P5.&@79YtpFmfiEZU@F/-aMeH$,;%0/XqT7bio]e=[er@al.ujgjI<#A#<,1V.37%PX"Q.4ML`G%a+:00fbd0s1g;-3ZE-BG3^mTTM&O5lZ'u-[C;F7_LAQq,i^YF@tcY!NtlQb<4Q?/$C`u9%lXMF:Z;'F?/kgCqu*[-%F4FII/*t;khrN)c!biI2mG"nFEkUfSG2/bV]Z.>TQpD%gq^>W3#g1IWnB=@/ZjH\k\*g-cL>\["Ke(Gd@P%Z?G'MiM[]Ll]:[:[F%pa6?0G,\HirNC\CrO6-`o@s/7r9S'g5!Ju)m4Wt`rE&dYA/AT(Qs:Roi./W)0L8"*Pbhgliu0D6#PMSM/S#UdS&e`iHo,QEqD.?F%@&'6@=8K(B.a)**2h#Tq()J.f(tD1/AQf1Rb"qWtZ<6.bMmBPC\)-M\s5NCV^N1Xr\)><1(t4!)j8V:>n\4hgS;PpII(4`t$SRZa%HTuuTE!t6tSG?&fGMV@<98tbio;5=;3USA@L&GClIVCa.n!nY0U@umFM52K=]p6:JIRIh_GfrD(SU"K8Ya(c]d'::EY-M-]1X<X"%V.O)kU3qG9B0IU'Q^OB>I.ZId-TaPA?`a(n3ATjHm)Rii$%$=AI^aC\pLS8`jqZ/8kOIZsGCRt>H2[?Gno=6TkOJ=W\agY@ZR_Z/%?G(`mpYtqdRMR'4OS3#Y;@T\2*W:6]DXYX7bJ&Ef,'dN&Ii^QJnErLc[IbWuG]5Och]LWu+87ne^ueY+Q+b%`6oR<$.SR[oTu%8n%]Bo&iiR@B^\/V',[,:+GJ7<!&drfKqZE*=,p7o1giB/5l3=gq+bq=?&%uA^+Y2+>9lIPm2G2nX%rSVSko$1tJn&:9I_3M\Q^GQMa%a)^3g[d_o:`eR>n.+RCtgWt%Lr4],Bpf08lm(E,aa]d9/'An9t3Ut.a2`^DRUY+r93V!!ErTTmJE8tC)idMUAI<t6e>k`H^eSK3Z%c^t$s?[r+Jk.U\8qrR^/d%'6L=73!G/2P*Q(^0:HD0):4a%G]Q$j';"o8`YGj$8aap?FAbISC_"51pq8GWGEZiIo?&iQt$RS.CjE%^THD/3dcm"m0sjCYV((BffNu!?bY%ED(P/Idc59#9;fnkl<jh8k;:s1B:g6q,[OCN]4+sXVusad-pPCZP^i<9?iB]CkMLa]ohumk%^]!T$IsH,8eMlAnH[PG^qChTXrV"K[huE-!2tu5.oC)Yn81i8=rm=5cpP]&np\t9>M+a$~>%AI9_PrivateDataEnd